

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (23 September 2021 20:29:08) as /home/ignacio/Documents/Facultad/repos-isw1/isw1/parciales/cuis-clean/CuisUniversity-4532.image!


----End fileIn of /home/ignacio/Documents/Facultad/repos-isw1/isw1/parciales/2021-2c/ISW1-2021-2C-1erParcial.st----!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'IAR 9/23/2021 20:30:17'!
PASSED!

----QUIT----(23 September 2021 20:30:27) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (23 September 2021 20:32:58) as /home/ignacio/Documents/Facultad/repos-isw1/isw1/parciales/cuis-clean/CuisUniversity-4532.image!


!classRemoval: #Residential stamp: 'IAR 9/23/2021 20:33:22'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Industrial stamp: 'IAR 9/23/2021 20:33:23'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Commercial stamp: 'IAR 9/23/2021 20:33:24'!
Zone subclass: #Commercial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'IAR 9/23/2021 20:33:24'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #WaterTower stamp: 'IAR 9/23/2021 20:33:25'!
Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #SolarPlant stamp: 'IAR 9/23/2021 20:33:26'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'IAR 9/23/2021 20:33:27'!
Object subclass: #Service
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'IAR 9/23/2021 20:33:28'!
Object subclass: #City
	instanceVariableNames: 'zones services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'IAR 9/23/2021 20:33:29'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----End fileIn of /home/ignacio/Documents/Facultad/repos-isw1/isw1/parciales/2021-2c/ISW1-2021-2C-1erParcial.st----!

!testRun: #CityTest #test01CityWithoutPowerServicesHaveZeroEnergyProduced stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test02CityWithSolarPlantWithoutZonesHave500EnergyAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test03CityWithSolarPlantWithResidentialZonesHave495EnergyAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test04CityWithSolarPlantWithCommertialZonesHave492EnergyAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test05CityWithSolarPlantWithIndustrialZonesHave490EnergyAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test06CityWithSolarPlantWithServeralZonesImpactEnergyAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test07CityWithoutWaterServicesHaveZeroWaterProduced stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test08CityWithWaterTowerWithoutZonesHave200WaterAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test09CityWithWaterTowerWithResidentialZonesHave191WaterAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test10CityWithWaterTowerWithCommertialZonesHave198WaterAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test11CityWithWaterTowerWithIndustrialZonesHave190WaterAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test12CityWithWaterTowerWithServeralZonesImpactWaterAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test13CityWith2SolarPlantsHaveTwiceEnergyAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test14CityWith2WaterTowerHaveTwiceWaterAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test15AResidentialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test16ACommertialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test17AnIndustrialZoneCannotBeAddedWithoutEnergyAndWaterAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test18CityWithoutZonesHaveZeroEnergyConsumption stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test19CityWithoutResidentialZonesCannotAddCommertialZone stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test20CityWithSolarPlantWithResidentialZoneWithManyCellsHave10LessEnergyAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test21CityWithSolarPlantWithCommertialZoneWithManyCellsHave16LessEnergyAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test22CityWithSolarPlantWithIndustrialZoneWithManyCellsHave20LessEnergyAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test23CityWithWaterTowerWithResidentialZoneWithManyCellsHave18LessWaterAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test24CityWithWaterTowerWithCommertialZoneWithManyCellsHave4LessWaterAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

!testRun: #CityTest #test25CityWithWaterTowerWithIndustrialZoneWithManyCellsHave20LessWaterAvailable stamp: 'IAR 9/23/2021 20:33:52'!
PASSED!

----QUIT----(23 September 2021 20:34:00) CuisUniversity-4532.image priorSource: 16911688!

----STARTUP---- (27 September 2021 18:14:27) as /home/ignacio/Documents/Facultad/repos-isw1/isw1/vms/cuis-clean/CuisUniversity-4532.image!


!classRemoval: #Residential stamp: 'IA 9/27/2021 18:15:00'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----STARTUP---- (27 September 2021 18:15:12) as /home/ignacio/Documents/Facultad/repos-isw1/isw1/vms/cuis-clean/CuisUniversity-4532.image!


!classRemoval: #Residential stamp: 'IAR 9/27/2021 18:15:31'!
Zone subclass: #Residential
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Industrial stamp: 'IAR 9/27/2021 18:15:31'!
Zone subclass: #Industrial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Commercial stamp: 'IAR 9/27/2021 18:15:32'!
Zone subclass: #Commercial
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'IAR 9/27/2021 18:15:33'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #WaterTower stamp: 'IAR 9/27/2021 18:15:34'!
Service subclass: #WaterTower
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #SolarPlant stamp: 'IAR 9/27/2021 18:15:34'!
Service subclass: #SolarPlant
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'IAR 9/27/2021 18:15:35'!
Object subclass: #Service
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'IAR 9/27/2021 18:15:36'!
Object subclass: #City
	instanceVariableNames: 'zones services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'IAR 9/27/2021 18:15:36'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

TestCase subclass: #TestX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HolidayCalendars'!

!classDefinition: #TestX category: 'HolidayCalendars' stamp: 'IAR 9/27/2021 18:19:25'!
TestCase subclass: #TestX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HolidayCalendars'!
!TestX methodsFor: 'nil' stamp: 'IAR 9/27/2021 18:20:35'!
test01

	| aSunday holidayCalendar |
	self assert: (holidayCalendar isHoliday: aSunday).! !

!classDefinition: #HolidayCalendar category: 'HolidayCalendar' stamp: 'IAR 9/27/2021 18:21:35'!
Object subclass: #HolidayCalendar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HolidayCalendar'!
!TestX methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:21:23' prior: 50861078!
test01

	| aSunday holidayCalendar |
	
	holidayCalendar _ HolidayCalendar new.
	aSunday _ September/26/2021.
	
	self assert: (holidayCalendar isHoliday: aSunday).! !

!testRun: #TestX #test01 stamp: 'IAR 9/27/2021 18:21:42'!
ERROR!

!testRun: #TestX #test01 stamp: 'IAR 9/27/2021 18:21:42'!
ERROR!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:22:03'!
isHoliday: aFixedGregorianDate 
	self shouldBeImplemented.! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:22:18' prior: 50861103!
isHoliday: aFixedGregorianDate 
	
	^true.! !

!testRun: #TestX #test01 stamp: 'IAR 9/27/2021 18:22:28'!
PASSED!

!testRun: #TestX #test01 stamp: 'IAR 9/27/2021 18:22:28'!
PASSED!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:22:38' prior: 50861109!
isHoliday: aFixedGregorianDate 
	
	^true! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:22:39' prior: 50861118!
isHoliday: aFixedGregorianDate 
	
	^ true! !

!testRun: #TestX #test01 stamp: 'IAR 9/27/2021 18:22:49'!
PASSED!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:23:08' prior: 50861123!
isHoliday: aFixedGregorianDate 
	
	^true! !
!TestX methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:21:23' prior: 50861091!
test01

	| aSunday holidayCalendar |
	
	holidayCalendar _ HolidayCalendar new.
	aSunday _ September/26/2021.
	
	self assert: (holidayCalendar isHoliday: aSunday).! !
!TestX methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:25:52'!
test02

	| aSunday holidayCalendar |
	
	holidayCalendar _ HolidayCalendar new.
	aSunday _ September/25/2021.
	
	self deny: (holidayCalendar isHoliday: aSunday)! !
!TestX methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:26:01' prior: 50861143!
test02

	| aMonday holidayCalendar |
	
	holidayCalendar _ HolidayCalendar new.
	aMonday _ September/25/2021.
	
	self deny: (holidayCalendar isHoliday: aMonday)! !
!TestX methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:26:07' prior: 50861151!
test02

	| aMonday holidayCalendar |
	
	holidayCalendar _ HolidayCalendar new.
	aMonday _ September/27/2021.
	
	self deny: (holidayCalendar isHoliday: aMonday)! !

!testRun: #TestX #test02 stamp: 'IAR 9/27/2021 18:26:13'!
FAILURE!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:27:08' prior: 50861130!
isHoliday: aFixedGregorianDate 
	
	^aFixedGregorianDate day = Sunday.! !

!testRun: #TestX #test01 stamp: 'IAR 9/27/2021 18:27:17'!
PASSED!

!testRun: #TestX #test02 stamp: 'IAR 9/27/2021 18:27:17'!
PASSED!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:28:00' prior: 50861170!
isHoliday: aPotentialHoliday 
	
	^aPotentialHoliday day = Sunday.! !

!testRun: #TestX #test01 stamp: 'IAR 9/27/2021 18:28:08'!
PASSED!

!testRun: #TestX #test02 stamp: 'IAR 9/27/2021 18:28:08'!
PASSED!
!TestX methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:31:32'!
test03

	| aSaturday holidayCalendar |
	
	holidayCalendar _ HolidayCalendar new.
	aSaturday _ September/25/2021.
	
	self deny: (holidayCalendar isHoliday: aSaturday)! !

!testRun: #TestX #test03 stamp: 'IAR 9/27/2021 18:31:47'!
PASSED!

!testRun: #TestX #test01 stamp: 'IAR 9/27/2021 18:31:47'!
PASSED!

!testRun: #TestX #test02 stamp: 'IAR 9/27/2021 18:31:47'!
PASSED!

!testRun: #TestX #test03 stamp: 'IAR 9/27/2021 18:31:47'!
PASSED!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:34:06' prior: 50861180!
isHoliday: aPotentialHoliday 
	
	^aPotentialHoliday day = Sunday or: [aPotentialHoliday day = Saturday].! !

!classDefinition: #HolidayCalendar category: 'HolidayCalendar' stamp: 'IAR 9/27/2021 18:39:25'!
Object subclass: #HolidayCalendar
	instanceVariableNames: 'weekdayHoliday'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'HolidayCalendar'!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:39:24' prior: 50861206!
isHoliday: aPotentialHoliday 
	
	^aPotentialHoliday day = weekdayHoliday.! !

!testRun: #TestX #test01 stamp: 'IAR 9/27/2021 18:39:28'!
FAILURE!

!testRun: #TestX #test02 stamp: 'IAR 9/27/2021 18:39:28'!
PASSED!

!testRun: #TestX #test03 stamp: 'IAR 9/27/2021 18:39:28'!
PASSED!

!testRun: #TestX #test01 stamp: 'IAR 9/27/2021 18:39:28'!
FAILURE!
!TestX methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:40:12' prior: 50861135!
test01

	| aSunday holidayCalendar |
	
	holidayCalendar _ HolidayCalendar new.
	aSunday _ September/26/2021.
	
	holidayCalendar markWeekdayAsHoliday: Sunday.
	
	self assert: (holidayCalendar isHoliday: aSunday).! !

!testRun: #TestX #test01 stamp: 'IAR 9/27/2021 18:40:17'!
ERROR!

!testRun: #TestX #test02 stamp: 'IAR 9/27/2021 18:40:17'!
PASSED!

!testRun: #TestX #test03 stamp: 'IAR 9/27/2021 18:40:17'!
PASSED!

!testRun: #TestX #test01 stamp: 'IAR 9/27/2021 18:40:17'!
ERROR!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:40:25'!
markWeekdayAsHoliday: aGregorianDay 
	self shouldBeImplemented.! !
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:40:47' prior: 50861253!
markWeekdayAsHoliday: aGregorianDay 

	weekdayHoliday _ aGregorianDay .! !

!testRun: #TestX #test01 stamp: 'IAR 9/27/2021 18:40:53'!
PASSED!

!testRun: #TestX #test02 stamp: 'IAR 9/27/2021 18:40:53'!
PASSED!

!testRun: #TestX #test03 stamp: 'IAR 9/27/2021 18:40:53'!
PASSED!

!testRun: #TestX #test03 stamp: 'IAR 9/27/2021 18:40:59'!
PASSED!

!testRun: #TestX #test01 stamp: 'IAR 9/27/2021 18:40:59'!
PASSED!

!testRun: #TestX #test02 stamp: 'IAR 9/27/2021 18:40:59'!
PASSED!

!testRun: #TestX #test03 stamp: 'IAR 9/27/2021 18:40:59'!
PASSED!

!testRun: #TestX #test03 stamp: 'IAR 9/27/2021 18:41:11'!
PASSED!

!testRun: #TestX #test01 stamp: 'IAR 9/27/2021 18:41:11'!
PASSED!

!testRun: #TestX #test02 stamp: 'IAR 9/27/2021 18:41:11'!
PASSED!

!testRun: #TestX #test03 stamp: 'IAR 9/27/2021 18:41:11'!
PASSED!

!testRun: #TestX #test01 stamp: 'IAR 9/27/2021 18:42:19'!
PASSED!

!testRun: #TestX #test02 stamp: 'IAR 9/27/2021 18:42:19'!
PASSED!

!testRun: #TestX #test03 stamp: 'IAR 9/27/2021 18:42:19'!
PASSED!

!testRun: #TestX #test03 stamp: 'IAR 9/27/2021 18:42:26'!
PASSED!
!TestX methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:42:37' prior: 50861189!
test03

	| aSaturday holidayCalendar |
	
	holidayCalendar _ HolidayCalendar new.
	aSaturday _ September/25/2021.
	
	self assert: (holidayCalendar isHoliday: aSaturday)! !

!testRun: #TestX #test03 stamp: 'IAR 9/27/2021 18:42:39'!
FAILURE!
!TestX methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 18:42:55' prior: 50861296!
test03

	| aSaturday holidayCalendar |
	
	holidayCalendar _ HolidayCalendar new.
	aSaturday _ September/25/2021.
	
	holidayCalendar markWeekdayAsHoliday: Saturday.
	
	self assert: (holidayCalendar isHoliday: aSaturday)! !

----QUIT----(27 September 2021 19:54:10) CuisUniversity-4532.image priorSource: 16939304!

----STARTUP---- (27 September 2021 20:16:36) as /home/ignacio/Documents/Facultad/repos-isw1/isw1/vms/main/CuisUniversity-4532.image!


Object subclass: #TestY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ROT13'!

!classDefinition: #TestY category: 'ROT13' stamp: 'IAR 9/27/2021 20:25:51'!
Object subclass: #TestY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ROT13'!

TestCase subclass: #TestY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ROT13'!

!classDefinition: #TestY category: 'ROT13' stamp: 'IAR 9/27/2021 20:26:27'!
TestCase subclass: #TestY
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ROT13'!

!classRenamed: #TestY as: #Rot13Test stamp: 'IAR 9/27/2021 20:26:54'!
Smalltalk renameClassNamed: #TestY as: #Rot13Test!

TestCase subclass: #Rot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Rot13'!

!classDefinition: #Rot13Test category: 'Rot13' stamp: 'IAR 9/27/2021 20:27:00'!
TestCase subclass: #Rot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Rot13'!
!Rot13Test methodsFor: 'nil' stamp: 'IAR 9/27/2021 20:32:30'!
test01
	
	
	self assert: '' equals: '' asRot13.! !

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 20:34:10'!
ERROR!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 20:34:52'!
asRot13
	self shouldBeImplemented.! !
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 20:35:05' prior: 50861363!
asRot13
	^ ''! !
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 20:35:08' prior: 50861367!
asRot13
	
	^ ''! !

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 20:35:10'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 20:35:10'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 20:35:54' prior: 50861357!
test01
	
	self assert: '' equals: '' asRot13.! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 20:39:09'!
test02
	
	self assert: '#' equals: '#' asRot13.! !

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 20:39:10'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 20:39:39' prior: 50861370!
asRot13
	
	^ self.! !

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 20:39:41'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 20:39:41'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 20:39:41'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 20:43:09' prior: 50861389!
asRot13
	
	self = '#' ifTrue: [^'#']
		ifFalse: [^''].! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'IAR 9/27/2021 20:43:11'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 20:43:17'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 20:43:17'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 20:43:17'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 20:48:12'!
test03
	
	self assert: '!!' equals: '!!' asRot13.! !

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 20:48:16'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 20:49:41' prior: 50861399!
asRot13
	
	self = '#' ifTrue: [^'#']
		ifFalse: [
			self = '!!' ifTrue: [^'!!']
				ifFalse: [^'']
			].! !

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 20:49:43'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 20:49:43'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 20:49:43'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 20:49:43'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 20:54:03' prior: 50861473!
asRot13
	
	self = '' ifTrue: [^''].
	^self.! !

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 20:54:05'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 20:54:05'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 20:54:05'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 20:54:05'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 20:56:39'!
test04
	
	self assert: 'n' equals: 'a' asRot13.! !

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 20:56:44'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 20:58:31' prior: 50861488!
asRot13
	
	self = '' ifTrue: [^''].
	self = 'a' ifTrue: [^'n']
	^self.! !
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 20:58:32' prior: 50861508!
asRot13
	
	self = '' ifTrue: [^''].
	self = 'a' ifTrue: [^'n'].
	^self.! !

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 20:58:38'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 20:58:38'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 20:58:38'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 20:58:38'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 20:58:38'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 21:02:30'!
test05
	
	self assert: 'm' equals: 'b' asRot13.! !

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 21:02:40'!
FAILURE!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 21:03:06' prior: 50861529!
test05
	
	self assert: 't' equals: 'g' asRot13.! !
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:03:41' prior: 50861513!
asRot13
	
	self = '' ifTrue: [^''].
	self = 'a' ifTrue: [^'n'].
	self = 'b' ifTrue: [^'t'].
	^self.! !
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:03:47' prior: 50861541!
asRot13
	
	self = '' ifTrue: [^''].
	self = 'a' ifTrue: [^'n'].
	self = 'g' ifTrue: [^'t'].
	^self.! !

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 21:03:50'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 21:03:50'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 21:03:50'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 21:03:50'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 21:03:50'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 21:03:50'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 21:04:41'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 21:04:41'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 21:04:41'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 21:04:41'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 21:04:41'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 21:04:41'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:05:58' prior: 50861547!
asRot13
	
	self = '' ifTrue: [^''].
	self = 'a' ifTrue: [^'n'].
	self = 'g' ifTrue: [^'t'].
	^ self.! !
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 21:10:52'!
test06
	
	self assert: 'z' equals: 'm' asRot13.! !

!testRun: #Rot13Test #test06 stamp: 'IAR 9/27/2021 21:11:30'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:12:02' prior: 50861580!
asRot13
	
	self = '' ifTrue: [^''].
	self = 'a' ifTrue: [^'n'].
	self = 'g' ifTrue: [^'t'].
	self = 'm' ifTrue: [^'z'].
	^ self.! !

!testRun: #Rot13Test #test06 stamp: 'IAR 9/27/2021 21:12:05'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 21:12:05'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 21:12:05'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 21:12:05'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 21:12:05'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 21:12:05'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'IAR 9/27/2021 21:12:05'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:27:02' prior: 50861593!
asRot13
	
	self = '' ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
	^ self.! !

!testRun: #Rot13Test #test06 stamp: 'IAR 9/27/2021 21:27:11'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 21:27:11'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 21:27:11'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 21:27:11'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 21:27:11'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 21:27:11'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'IAR 9/27/2021 21:27:11'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 21:28:15'!
test07
	
	self assert: 'a' equals: 'n' asRot13.! !

!testRun: #Rot13Test #test07 stamp: 'IAR 9/27/2021 21:28:19'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:28:49' prior: 50861616!
asRot13
	
	self = '' ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
	self = 'n' ifTrue: [^'a'].
	^ self.! !

!testRun: #Rot13Test #test07 stamp: 'IAR 9/27/2021 21:28:51'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 21:28:51'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 21:28:51'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 21:28:51'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 21:28:51'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 21:28:51'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'IAR 9/27/2021 21:28:51'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'IAR 9/27/2021 21:28:51'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 21:30:26'!
test08
	
	self assert: 'g' equals: 't' asRot13.! !

!testRun: #Rot13Test #test08 stamp: 'IAR 9/27/2021 21:31:14'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:31:45' prior: 50861647!
asRot13
	
	self = '' ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
	self = 'n' ifTrue: [^'a'].
	self = 't' ifTrue: [^'g'].
	^ self.! !

!testRun: #Rot13Test #test08 stamp: 'IAR 9/27/2021 21:31:46'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 21:31:46'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 21:31:46'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 21:31:46'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 21:31:46'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 21:31:46'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'IAR 9/27/2021 21:31:46'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'IAR 9/27/2021 21:31:46'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'IAR 9/27/2021 21:31:46'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 21:32:09'!
test09
	
	self assert: 'm' equals: 'z' asRot13.! !

!testRun: #Rot13Test #test09 stamp: 'IAR 9/27/2021 21:32:10'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:32:28' prior: 50861681!
asRot13
	
	self = '' ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
	self = 'n' ifTrue: [^'a'].
	self = 't' ifTrue: [^'g'].
	self = 'z' ifTrue: [^'m'].
	^ self.! !

!testRun: #Rot13Test #test09 stamp: 'IAR 9/27/2021 21:32:29'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 21:32:29'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 21:32:29'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 21:32:29'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 21:32:29'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 21:32:29'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'IAR 9/27/2021 21:32:29'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'IAR 9/27/2021 21:32:29'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'IAR 9/27/2021 21:32:29'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'IAR 9/27/2021 21:32:29'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:34:04' prior: 50861718!
asRot13
	
	self = '' ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
	(self first asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [^(Character asciiValue: self first asciiValue - 13) asString].
	self = 'n' ifTrue: [^'a'].
	self = 't' ifTrue: [^'g'].
	self = 'z' ifTrue: [^'m'].
	^ self.! !
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:34:08' prior: 50861752!
asRot13
	
	self = '' ifTrue: [^''].
	(self first asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
	(self first asciiValue between: $n asciiValue and: $z asciiValue) ifTrue: [^(Character asciiValue: self first asciiValue - 13) asString].
	^ self.! !

!testRun: #Rot13Test #test09 stamp: 'IAR 9/27/2021 21:34:11'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 21:34:11'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 21:34:11'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 21:34:11'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 21:34:11'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 21:34:11'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'IAR 9/27/2021 21:34:11'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'IAR 9/27/2021 21:34:11'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'IAR 9/27/2021 21:34:11'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'IAR 9/27/2021 21:34:11'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:34:40' prior: 50861768!
asRot13
	
	self = '' ifTrue: [^''].
	
	(self first asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
	
	(self first asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^(Character asciiValue: self first asciiValue - 13) asString].
	^ self.! !
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:34:47' prior: 50861803!
asRot13
	
	self = '' ifTrue: [^''].
	
	(self first asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
	
	(self first asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^(Character asciiValue: self first asciiValue - 13) asString].
	
	^ self.! !
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:34:50' prior: 50861816!
asRot13
	
	self = '' ifTrue: [^''].
	
	(self first asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
	(self first asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^(Character asciiValue: self first asciiValue - 13) asString].
	
	^ self.! !
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:34:55' prior: 50861829!
asRot13
	
	self = '' ifTrue: [^''].
	
	(self first asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
		
	(self first asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^(Character asciiValue: self first asciiValue - 13) asString].
	
	^ self.! !

!testRun: #Rot13Test #test09 stamp: 'IAR 9/27/2021 21:35:05'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 21:35:05'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 21:35:05'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 21:35:05'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 21:35:05'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 21:35:05'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'IAR 9/27/2021 21:35:05'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'IAR 9/27/2021 21:35:05'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'IAR 9/27/2021 21:35:05'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'IAR 9/27/2021 21:35:05'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 21:42:54'!
test10
	
	self assert: 'N' equals: 'A' asRot13.! !

!testRun: #Rot13Test #test10 stamp: 'IAR 9/27/2021 21:42:56'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:43:37' prior: 50861842!
asRot13
	
	self = '' ifTrue: [^''].
	
	(self first asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
		
	(self first asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^(Character asciiValue: self first asciiValue - 13) asString].
		
	self = 'A' ifTrue: [^'N'].
	
	^ self.! !

!testRun: #Rot13Test #test10 stamp: 'IAR 9/27/2021 21:43:39'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 21:43:39'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 21:43:39'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 21:43:39'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 21:43:39'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 21:43:39'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'IAR 9/27/2021 21:43:39'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'IAR 9/27/2021 21:43:39'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'IAR 9/27/2021 21:43:39'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'IAR 9/27/2021 21:43:39'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'IAR 9/27/2021 21:43:39'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 21:45:52'!
test11
	
	self assert: 'T' equals: 'G' asRot13.! !

!testRun: #Rot13Test #test11 stamp: 'IAR 9/27/2021 21:45:53'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:46:11' prior: 50861885!
asRot13
	
	self = '' ifTrue: [^''].
	
	(self first asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
		
	(self first asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^(Character asciiValue: self first asciiValue - 13) asString].
		
	self = 'A' ifTrue: [^'N'].
	self = 'G' ifTrue: [^'T'].
	
	^ self.! !

!testRun: #Rot13Test #test11 stamp: 'IAR 9/27/2021 21:46:12'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 21:46:12'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 21:46:12'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 21:46:12'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 21:46:12'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 21:46:12'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'IAR 9/27/2021 21:46:12'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'IAR 9/27/2021 21:46:12'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'IAR 9/27/2021 21:46:12'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'IAR 9/27/2021 21:46:12'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'IAR 9/27/2021 21:46:12'!
PASSED!

!testRun: #Rot13Test #test11 stamp: 'IAR 9/27/2021 21:46:12'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 21:46:51'!
test12
	
	self assert: 'Z' equals: 'M' asRot13.! !

!testRun: #Rot13Test #test12 stamp: 'IAR 9/27/2021 21:46:52'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:47:15' prior: 50861931!
asRot13
	
	self = '' ifTrue: [^''].
	
	(self first asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
		
	(self first asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^(Character asciiValue: self first asciiValue - 13) asString].
		
	self = 'A' ifTrue: [^'N'].
	self = 'G' ifTrue: [^'T'].
	self = 'M' ifTrue: [^'Z'].

	^ self.! !

!testRun: #Rot13Test #test12 stamp: 'IAR 9/27/2021 21:47:17'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 21:47:17'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 21:47:17'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 21:47:17'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 21:47:17'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 21:47:17'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'IAR 9/27/2021 21:47:17'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'IAR 9/27/2021 21:47:17'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'IAR 9/27/2021 21:47:17'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'IAR 9/27/2021 21:47:17'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'IAR 9/27/2021 21:47:17'!
PASSED!

!testRun: #Rot13Test #test11 stamp: 'IAR 9/27/2021 21:47:17'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'IAR 9/27/2021 21:47:17'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 21:50:58'!
test13
	
	self assert: 'M' equals: 'Z' asRot13.! !
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:51:11' prior: 50861980!
asRot13
	
	self = '' ifTrue: [^''].
	
	(self first asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
		
	(self first asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^(Character asciiValue: self first asciiValue - 13) asString].
		
	self = 'A' ifTrue: [^'N'].
	self = 'G' ifTrue: [^'T'].
	self = 'M' ifTrue: [^'Z'].

	self = 'Z' ifTrue: [^'M'].
	
	^ self.! !

!testRun: #Rot13Test #test12 stamp: 'IAR 9/27/2021 21:51:19'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'IAR 9/27/2021 21:51:26'!
PASSED!

!testRun: #Rot13Test #test13 stamp: 'IAR 9/27/2021 21:51:37'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 21:51:37'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 21:51:37'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 21:51:37'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 21:51:37'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 21:51:37'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'IAR 9/27/2021 21:51:37'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'IAR 9/27/2021 21:51:37'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'IAR 9/27/2021 21:51:37'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'IAR 9/27/2021 21:51:37'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'IAR 9/27/2021 21:51:37'!
PASSED!

!testRun: #Rot13Test #test11 stamp: 'IAR 9/27/2021 21:51:37'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'IAR 9/27/2021 21:51:37'!
PASSED!

!testRun: #Rot13Test #test13 stamp: 'IAR 9/27/2021 21:51:37'!
PASSED!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:54:08' prior: 50862030!
asRot13
	
	self = '' ifTrue: [^''].
	
	(self first asLowercase asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
		
	(self first asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^(Character asciiValue: self first asciiValue - 13) asString].
		
	self = 'A' ifTrue: [^'N'].
	self = 'G' ifTrue: [^'T'].
	self = 'M' ifTrue: [^'Z'].

	self = 'Z' ifTrue: [^'M'].
	
	^ self.! !
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:54:19' prior: 50862083!
asRot13
	
	self = '' ifTrue: [^''].
	
	(self first asLowercase asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
		
	(self first asLowercase asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^(Character asciiValue: self first asciiValue - 13) asString].
		
	self = 'A' ifTrue: [^'N'].
	self = 'G' ifTrue: [^'T'].
	self = 'M' ifTrue: [^'Z'].

	self = 'Z' ifTrue: [^'M'].
	
	^ self.! !
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:54:24' prior: 50862100!
asRot13
	
	self = '' ifTrue: [^''].
	
	(self first asLowercase asciiValue between: $a asciiValue and: $m asciiValue) 
		ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
		
	(self first asLowercase asciiValue between: $n asciiValue and: $z asciiValue)
		ifTrue: [^(Character asciiValue: self first asciiValue - 13) asString].
	
	^ self.! !

!testRun: #Rot13Test #test13 stamp: 'IAR 9/27/2021 21:54:27'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 21:54:27'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 21:54:27'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 21:54:27'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 21:54:27'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 21:54:27'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'IAR 9/27/2021 21:54:27'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'IAR 9/27/2021 21:54:27'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'IAR 9/27/2021 21:54:27'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'IAR 9/27/2021 21:54:27'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'IAR 9/27/2021 21:54:27'!
PASSED!

!testRun: #Rot13Test #test11 stamp: 'IAR 9/27/2021 21:54:27'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'IAR 9/27/2021 21:54:27'!
PASSED!

!testRun: #Rot13Test #test13 stamp: 'IAR 9/27/2021 21:54:27'!
PASSED!
!Rot13Test methodsFor: 'as yet unclassified' stamp: 'IAR 9/27/2021 21:55:09'!
test14
	
	self assert: 'NZ' equals: 'AM' asRot13.! !

!testRun: #Rot13Test #test14 stamp: 'IAR 9/27/2021 21:55:11'!
FAILURE!
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:58:04' prior: 50862118!
asRot13
	
	self = '' ifTrue: [^''].
	
	self collect: [:aChar |
		(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue) 
			ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
		
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue)
			ifTrue: [^(Character asciiValue: self first asciiValue - 13) asString].
		]
	
	
	
	^ self.! !
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 21:58:08' prior: 50862170!
asRot13
	
	self = '' ifTrue: [^''].
	
	self collect: [:aChar |
		(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue) 
			ifTrue: [^(Character asciiValue: self first asciiValue + 13) asString].
		
		(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue)
			ifTrue: [^(Character asciiValue: self first asciiValue - 13) asString].
		].
	
	^ self.! !
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 22:09:59' prior: 50862185!
asRot13
	
	self = '' ifTrue: [^''].
	
	^self collect: [:aChar | (aChar asLowercase asciiValue between: $a asciiValue and: $z asciiValue) ifTrue: [
				(aChar asLowercase asciiValue between: $a asciiValue and: $m asciiValue) ifTrue: [
					Character asciiValue: aChar asciiValue + 13
				].
				
				(aChar asLowercase asciiValue between: $n asciiValue and: $z asciiValue) 	ifTrue: [
					Character asciiValue: aChar asciiValue - 13
				].
		
			] ifFalse: [aChar].
		].! !
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 22:11:51' prior: 50862200!
asRot13
	
	self = '' ifTrue: [^''].
	
	^self collect: [:aChar | (aChar asLowercase asciiValue between: $a asciiValue and: $z asciiValue) ifTrue: [
				(aChar asLowercase < $n)
					ifTrue: [Character asciiValue: aChar asciiValue + 13]
					ifFalse: [Character asciiValue: aChar asciiValue - 13]
			] ifFalse: [aChar].
		].! !
!String methodsFor: '*Rot13' stamp: 'IAR 9/27/2021 22:12:19' prior: 50862218!
asRot13
	
	self = '' ifTrue: [^''].
	
	^self collect: [:aChar |
		(aChar asLowercase asciiValue between: $a asciiValue and: $z asciiValue) ifTrue: [
				(aChar asLowercase < $n)
					ifTrue: [Character asciiValue: aChar asciiValue + 13]
					ifFalse: [Character asciiValue: aChar asciiValue - 13]
			] ifFalse: [aChar].
		].! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testAsUtf8WithNCRs stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testFirstNoBlankIndex stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testLastNoBlankIndex stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'IAR 9/27/2021 22:12:23'!
PASSED!

!testRun: #Rot13Test #test14 stamp: 'IAR 9/27/2021 22:12:31'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/27/2021 22:12:31'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/27/2021 22:12:31'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/27/2021 22:12:31'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'IAR 9/27/2021 22:12:31'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'IAR 9/27/2021 22:12:31'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'IAR 9/27/2021 22:12:31'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'IAR 9/27/2021 22:12:31'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'IAR 9/27/2021 22:12:31'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'IAR 9/27/2021 22:12:31'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'IAR 9/27/2021 22:12:31'!
PASSED!

!testRun: #Rot13Test #test11 stamp: 'IAR 9/27/2021 22:12:31'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'IAR 9/27/2021 22:12:31'!
PASSED!

!testRun: #Rot13Test #test13 stamp: 'IAR 9/27/2021 22:12:31'!
PASSED!

!testRun: #Rot13Test #test14 stamp: 'IAR 9/27/2021 22:12:31'!
PASSED!

!testRun: #Rot13Test #test14 stamp: 'IAR 9/28/2021 00:32:58'!
PASSED!

!testRun: #Rot13Test #test01 stamp: 'IAR 9/28/2021 00:32:58'!
PASSED!

!testRun: #Rot13Test #test02 stamp: 'IAR 9/28/2021 00:32:58'!
PASSED!

!testRun: #Rot13Test #test03 stamp: 'IAR 9/28/2021 00:32:58'!
PASSED!

!testRun: #Rot13Test #test04 stamp: 'IAR 9/28/2021 00:32:58'!
PASSED!

!testRun: #Rot13Test #test05 stamp: 'IAR 9/28/2021 00:32:58'!
PASSED!

!testRun: #Rot13Test #test06 stamp: 'IAR 9/28/2021 00:32:58'!
PASSED!

!testRun: #Rot13Test #test07 stamp: 'IAR 9/28/2021 00:32:58'!
PASSED!

!testRun: #Rot13Test #test08 stamp: 'IAR 9/28/2021 00:32:58'!
PASSED!

!testRun: #Rot13Test #test09 stamp: 'IAR 9/28/2021 00:32:58'!
PASSED!

!testRun: #Rot13Test #test10 stamp: 'IAR 9/28/2021 00:32:58'!
PASSED!

!testRun: #Rot13Test #test11 stamp: 'IAR 9/28/2021 00:32:58'!
PASSED!

!testRun: #Rot13Test #test12 stamp: 'IAR 9/28/2021 00:32:58'!
PASSED!

!testRun: #Rot13Test #test13 stamp: 'IAR 9/28/2021 00:32:58'!
PASSED!

!testRun: #Rot13Test #test14 stamp: 'IAR 9/28/2021 00:32:58'!
PASSED!

----QUIT----(28 September 2021 00:33:05) CuisUniversity-4532.image priorSource: 16949309!

----STARTUP---- (30 September 2021 17:20:21) as /home/ignacio/Documents/Facultad/repos-isw1/isw1/vms/main/CuisUniversity-4532.image!


TestCase subclass: #TestRomans
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TestRomans'!

!classDefinition: #TestRomans category: 'TestRomans' stamp: 'IAR 9/30/2021 17:26:12'!
TestCase subclass: #TestRomans
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TestRomans'!
!TestRomans methodsFor: 'nil' stamp: 'IAR 9/30/2021 17:27:59'!
test01

	self assert: 'I' equals: 1 asRoman.! !

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 17:30:24'!
ERROR!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 17:31:20'!
asRoman
	self shouldBeImplemented.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 17:31:30' prior: 50862390!
asRoman
	^ 'I'! !

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 17:31:32'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 17:31:32'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 17:35:23'!
test02

	self assert: 'II' equals: 2 asRoman.! !

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 17:35:26'!
FAILURE!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 17:36:33' prior: 50862394!
asRoman

	self = 1 ifTrue: [^'I'].
	self = 2 ifTrue: [^'II'].! !

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 17:36:35'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 17:36:35'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 17:36:35'!
PASSED!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 17:41:04' prior: 50862409!
asRoman

	self = 1 ifTrue: [^'I'].
	^ 'II'.! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 17:41:50'!
test03

	self assert: 'III' equals: 3 asRoman.! !

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 17:41:51'!
FAILURE!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 17:42:25' prior: 50862421!
asRoman

	self = 1 ifTrue: [^'I'].
	self = 2 ifTrue: [^'II'].
	^ 'III'.! !

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 17:42:26'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 17:42:26'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 17:42:26'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 17:42:26'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 17:44:21'!
test04

	self assert: 'IV' equals: 4 asRoman.! !

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 17:44:24'!
FAILURE!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 17:45:00' prior: 50862432!
asRoman

	self = 1 ifTrue: [^'I'].
	self = 2 ifTrue: [^'II'].
	self = 3 ifTrue: [^'III'].
	^ 'IV'.! !

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 17:45:02'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 17:45:02'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 17:45:02'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 17:45:02'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 17:45:02'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 17:46:26'!
test05

	self assert: 'V' equals: 5 asRoman.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 17:47:25' prior: 50862453!
asRoman

	self = 1 ifTrue: [^'I'].
	self = 2 ifTrue: [^'II'].
	self = 3 ifTrue: [^'III'].
	self = 4 ifTrue: [^'IV'].
	^ 'V'.! !

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 17:47:26'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 17:47:26'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 17:47:26'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 17:47:26'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 17:47:26'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 17:47:26'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 17:49:31'!
test06

	self assert: 'VI' equals: 6 asRoman.! !

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 17:49:32'!
FAILURE!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 17:49:53' prior: 50862475!
asRoman

	self = 1 ifTrue: [^'I'].
	self = 2 ifTrue: [^'II'].
	self = 3 ifTrue: [^'III'].
	self = 4 ifTrue: [^'IV'].
	self = 5 ifTrue: [^'V'].
	^ 'VI'.! !

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 17:49:55'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 17:49:55'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 17:49:55'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 17:49:55'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 17:49:55'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 17:49:55'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 17:49:55'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 17:51:13'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 17:51:13'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 17:51:13'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 17:51:13'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 17:51:13'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 17:51:13'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 17:51:13'!
PASSED!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 17:51:36' prior: 50862502!
asRoman

	self = 1 ifTrue: [^'I'].
	self = 2 ifTrue: [^'II'].
	self = 3 ifTrue: [^'III'].
	self = 4 ifTrue: [^'IV'].
	self = 5 ifTrue: [^'V'].
	self = 6 ifTrue: [^'VI'].
	^ 'VII'.! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 17:51:38'!
test07

	self assert: 'VII' equals: 7 asRoman.! !

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 17:51:38'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 17:51:38'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 17:51:38'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 17:51:38'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 17:51:38'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 17:51:38'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 17:51:38'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 17:51:38'!
PASSED!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 17:52:08' prior: 50862541!
asRoman

	self = 1 ifTrue: [^'I'].
	self = 2 ifTrue: [^'II'].
	self = 3 ifTrue: [^'III'].
	self = 4 ifTrue: [^'IV'].
	self = 5 ifTrue: [^'V'].
	self = 6 ifTrue: [^'VI'].
	self = 7 ifTrue: [^'VII'].
	^ 'VIII'.! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 17:52:09'!
test08

	self assert: 'VIII' equals: 8 asRoman.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:10:41' prior: 50862573!
asRoman

	(self between: 1 and: 3) ifTrue: [
		^ String streamContents:
			[: stream | 1 to: self do: [:index | stream nextPut: $I]]
		].
	self = 4 ifTrue: [^'IV'].
	self = 5 ifTrue: [^'V'].
	self = 6 ifTrue: [^'VI'].
	self = 7 ifTrue: [^'VII'].
	^ 'VIII'.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:10:53' prior: 50862588!
asRoman

	(self between: 1 and: 3) ifTrue: [
		^ String streamContents:
			[: stream | 1 to: self do:
				[:index | stream nextPut: $I]
			]
		].
	self = 4 ifTrue: [^'IV'].
	self = 5 ifTrue: [^'V'].
	self = 6 ifTrue: [^'VI'].
	self = 7 ifTrue: [^'VII'].
	^ 'VIII'.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:11:00' prior: 50862599!
asRoman

	(self between: 1 and: 3) ifTrue: [
		^ String streamContents:
			[: stream | 1 to: self do:				[:index | stream nextPut: $I]]
		].
	self = 4 ifTrue: [^'IV'].
	self = 5 ifTrue: [^'V'].
	self = 6 ifTrue: [^'VI'].
	self = 7 ifTrue: [^'VII'].
	^ 'VIII'.! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'IAR 9/30/2021 18:11:06'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'IAR 9/30/2021 18:11:06'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'IAR 9/30/2021 18:11:06'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'IAR 9/30/2021 18:11:06'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'IAR 9/30/2021 18:11:06'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'IAR 9/30/2021 18:11:06'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'IAR 9/30/2021 18:11:06'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'IAR 9/30/2021 18:11:06'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'IAR 9/30/2021 18:11:06'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'IAR 9/30/2021 18:11:06'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'IAR 9/30/2021 18:11:06'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'IAR 9/30/2021 18:11:06'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 18:11:09'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 18:11:09'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 18:11:09'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 18:11:09'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 18:11:09'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 18:11:09'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 18:11:09'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 18:11:09'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 18:11:09'!
PASSED!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:15:47' prior: 50862611!
asRoman

	(self between: 1 and: 3) ifTrue: [
		^ String streamContents:
			[: stream | self timesRepeat: [stream nextPut: $I]]
		].
	self = 4 ifTrue: [^'IV'].
	self = 5 ifTrue: [^'V'].
	self = 6 ifTrue: [^'VI'].
	self = 7 ifTrue: [^'VII'].
	^ 'VIII'.! !

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 18:15:50'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 18:15:50'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 18:15:50'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 18:15:50'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 18:15:50'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 18:15:50'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 18:15:50'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 18:15:50'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 18:15:50'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 18:19:41'!
test09

	self assert: 'IX' equals: 9 asRoman.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:19:57' prior: 50862674!
asRoman

	(self between: 1 and: 3) ifTrue: [
		^ String streamContents:
			[: stream | self timesRepeat: [stream nextPut: $I]]
		].
	self = 4 ifTrue: [^'IV'].
	self = 5 ifTrue: [^'V'].
	self = 6 ifTrue: [^'VI'].
	self = 7 ifTrue: [^'VII'].
	self = 8 ifTrue: [^'VIII'].
	^ 'IX'.! !

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 18:19:59'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 18:19:59'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 18:19:59'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 18:19:59'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 18:19:59'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 18:19:59'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 18:19:59'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 18:19:59'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 18:19:59'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 18:19:59'!
PASSED!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:24:03' prior: 50862710!
asRoman

	(self between: 1 and: 3) ifTrue: [
		^ String streamContents:
			[: stream | self timesRepeat: [stream nextPut: $I]]
		].
	self = 4 ifTrue: [^'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		^ 'V', (String streamContents:
			[: stream | (self - 5) timesRepeat: [stream nextPut: $I]])
		].
	self = 5 ifTrue: [^'V'].
	self = 6 ifTrue: [^'VI'].
	self = 7 ifTrue: [^'VII'].
	self = 8 ifTrue: [^'VIII'].
	^ 'IX'.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:24:11' prior: 50862744!
asRoman

	(self between: 1 and: 3) ifTrue: [
		^ String streamContents:
			[: stream | self timesRepeat: [stream nextPut: $I]]
		].
	self = 4 ifTrue: [^'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		^ 'V', (String streamContents:
			[: stream | (self - 5) timesRepeat: [stream nextPut: $I]])
		].
	^ 'IX'.! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 18:24:13' prior: 50862705!
test09

	self assert: 'IX' equals: 9 asRoman! !

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 18:24:13'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 18:24:13'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 18:24:13'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 18:24:13'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 18:24:13'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 18:24:13'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 18:24:13'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 18:24:13'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 18:24:13'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 18:24:13'!
PASSED!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:24:31' prior: 50862760!
asRoman

	(self between: 1 and: 3) ifTrue: [
		^ String streamContents:
			[: stream | self timesRepeat: [stream nextPut: $I]]
		].
	
	self = 4 ifTrue: [^'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		^ 'V', (String streamContents:
			[: stream | (self - 5) timesRepeat: [stream nextPut: $I]])
		].
	^ 'IX'.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:33:05' prior: 50862800!
asRoman

	(self between: 1 and: 3) ifTrue: [ | resultingNumber |
		
		self timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		^ resultingNumber.
	].
	self = 4 ifTrue: [^'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		^ 'V', (String streamContents:
			[: stream | (self - 5) timesRepeat: [stream nextPut: $I]])
		].
	^ 'IX'.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:33:33' prior: 50862813!
asRoman

	 | resultingNumber |
	
	resultingNumber _ ''.
	
	(self between: 1 and: 3) ifTrue: [
		
		self timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		^ resultingNumber.
	].
	self = 4 ifTrue: [^'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		^ 'V', (String streamContents:
			[: stream | (self - 5) timesRepeat: [stream nextPut: $I]])
		].
	^ 'IX'.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:33:35' prior: 50862827!
asRoman

	 | resultingNumber |
	
	resultingNumber _ ''.
	
	(self between: 1 and: 3) ifTrue: [	
		self timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		^ resultingNumber.
	].
	self = 4 ifTrue: [^'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		^ 'V', (String streamContents:
			[: stream | (self - 5) timesRepeat: [stream nextPut: $I]])
		].
	^ 'IX'.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:34:25' prior: 50862842!
asRoman

	 | resultingNumber |
	
	resultingNumber _ ''.
	
	(self between: 1 and: 3) ifTrue: [	
		self timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		^ resultingNumber.
	].
	self = 4 ifTrue: [^'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		resultingNumber _ 'V'.
		self timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		^ resultingNumber.
		].
	^ 'IX'.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:34:34' prior: 50862857!
asRoman

	 | resultingNumber |
	
	resultingNumber _ ''.
	
	(self between: 1 and: 3) ifTrue: [	
		self timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		^ resultingNumber.
	].
	self = 4 ifTrue: [^'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		resultingNumber _ 'V'.
		self timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		^ resultingNumber.
	].
	^ 'IX'.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:34:38' prior: 50862872!
asRoman

	 | resultingNumber |
	
	resultingNumber _ ''.
	
	(self between: 1 and: 3) ifTrue: [	
		self timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		^ resultingNumber.
	].
	self = 4 ifTrue: [^'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		resultingNumber _ 'V'.
		self timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		^ resultingNumber.
	].

	^ 'IX'.! !

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 18:34:41'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 18:34:41'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 18:34:41'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 18:34:41'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 18:34:41'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 18:34:41'!
FAILURE!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 18:34:41'!
FAILURE!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 18:34:41'!
FAILURE!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 18:34:41'!
FAILURE!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 18:34:41'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 18:34:44'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 18:34:44'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 18:34:44'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 18:34:44'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 18:34:44'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 18:34:44'!
FAILURE!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 18:34:44'!
FAILURE!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 18:34:44'!
FAILURE!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 18:34:44'!
FAILURE!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:35:06' prior: 50862887!
asRoman

	 | resultingNumber |
	
	resultingNumber _ ''.
	
	(self between: 1 and: 3) ifTrue: [	
		self timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		^ resultingNumber.
	].
	self = 4 ifTrue: [^'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		resultingNumber _ 'V'.
		(self - 5) timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		^ resultingNumber.
	].

	^ 'IX'.! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'IAR 9/30/2021 18:35:07'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'IAR 9/30/2021 18:35:07'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'IAR 9/30/2021 18:35:07'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'IAR 9/30/2021 18:35:07'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'IAR 9/30/2021 18:35:07'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'IAR 9/30/2021 18:35:07'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'IAR 9/30/2021 18:35:07'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'IAR 9/30/2021 18:35:07'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'IAR 9/30/2021 18:35:07'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'IAR 9/30/2021 18:35:07'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'IAR 9/30/2021 18:35:07'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'IAR 9/30/2021 18:35:07'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 18:35:09'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 18:35:09'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 18:35:09'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 18:35:09'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 18:35:09'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 18:35:09'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 18:35:09'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 18:35:09'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 18:35:09'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 18:35:09'!
PASSED!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:35:14' prior: 50862945!
asRoman

	 | resultingNumber |
	
	resultingNumber _ ''.
	
	(self between: 1 and: 3) ifTrue: [	
		self timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		^ resultingNumber.
	].

	self = 4 ifTrue: [^'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		resultingNumber _ 'V'.
		(self - 5) timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		^ resultingNumber.
	].

	^ 'IX'.! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 18:35:33'!
test10

	self assert: 'X' equals: 10 asRoman! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:36:17' prior: 50863014!
asRoman

	 | resultingNumber |
	
	resultingNumber _ ''.
	
	(self between: 1 and: 3) ifTrue: [	
		self timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		^ resultingNumber.
	].

	self = 4 ifTrue: [^'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		resultingNumber _ 'V'.
		(self - 5) timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		^ resultingNumber.
	].

	self = 9 ifTrue: [^'IX'].
	^'X'.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:46:35' prior: 50863034!
asRoman

	 | resultingNumber |
	
	resultingNumber _ ''.
	
	(self between: 1 and: 3) ifTrue: [	
		self timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		
	].

	self = 4 ifTrue: [resultingNumber _ 'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		resultingNumber _ 'V'.
		(self - 5) timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
	].

	self = 9 ifTrue: [resultingNumber _ 'IX'].
	self = 10 ifTrue: [resultingNumber _ 'X'].
	^ resultingNumber.! !

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 18:46:39'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 18:46:39'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 18:46:39'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 18:46:39'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 18:46:39'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 18:46:39'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 18:46:39'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 18:46:39'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 18:46:39'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 18:46:39'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 18:46:39'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 18:46:48'!
test11

	self assert: 'XI' equals: 11 asRoman! !

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 18:46:49'!
FAILURE!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:47:05' prior: 50863050!
asRoman

	 | resultingNumber |
	
	resultingNumber _ ''.
	
	(self between: 1 and: 3) ifTrue: [	
		self timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		
	].

	self = 4 ifTrue: [resultingNumber _ 'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		resultingNumber _ 'V'.
		(self - 5) timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
	].

	self = 9 ifTrue: [resultingNumber _ 'IX'].
	self = 10 ifTrue: [resultingNumber _ 'X'].
	self = 11 ifTrue: [resultingNumber _ 'XI'].

	^ resultingNumber.! !

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 18:47:07'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 18:47:07'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 18:47:07'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 18:47:07'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 18:47:07'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 18:47:07'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 18:47:07'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 18:47:07'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 18:47:07'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 18:47:07'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 18:47:07'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 18:47:07'!
PASSED!

----End fileIn of /home/ignacio/Documents/Facultad/repos-isw1/isw1/vms/main/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /home/ignacio/Documents/Facultad/repos-isw1/isw1/vms/main/Packages/Features/VectorGraphics.pck.st----!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 18:49:11'!
test12

	self assert: 'XII' equals: 12 asRoman! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:49:24' prior: 50863099!
asRoman

	 | resultingNumber |
	
	resultingNumber _ ''.
	
	(self between: 1 and: 3) ifTrue: [	
		self timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		
	].

	self = 4 ifTrue: [resultingNumber _ 'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		resultingNumber _ 'V'.
		(self - 5) timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
	].

	self = 9 ifTrue: [resultingNumber _ 'IX'].
	self = 10 ifTrue: [resultingNumber _ 'X'].
	self = 11 ifTrue: [resultingNumber _ 'XI'].
	self = 12 ifTrue: [resultingNumber _ 'XII'].

	^ resultingNumber.! !
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 18:53:12'!
test13

	self assert: 'XIII' equals: 13 asRoman! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 18:53:23' prior: 50874742!
asRoman

	 | resultingNumber |
	
	resultingNumber _ ''.
	
	(self between: 1 and: 3) ifTrue: [	
		self timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		
	].

	self = 4 ifTrue: [resultingNumber _ 'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		resultingNumber _ 'V'.
		(self - 5) timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
	].

	self = 9 ifTrue: [resultingNumber _ 'IX'].
	self = 10 ifTrue: [resultingNumber _ 'X'].
	self = 11 ifTrue: [resultingNumber _ 'XI'].
	self = 12 ifTrue: [resultingNumber _ 'XII'].
	self = 13 ifTrue: [resultingNumber _ 'XIII'].

	^ resultingNumber.! !

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 18:53:28'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 18:53:28'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 18:53:28'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 18:53:28'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 18:53:28'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 18:53:28'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 18:53:28'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 18:53:28'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 18:53:28'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 18:53:28'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 18:53:28'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 18:53:28'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 18:53:28'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 18:53:28'!
PASSED!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 19:09:55'!
pepito: aStringToBuild

	| aString |
	
	aString _ aStringToBuild.
	(self - 5) timesRepeat: [aString _ aString append: 'I'].
	^aString.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 19:10:29' prior: 50874768!
asRoman

	 | resultingNumber |
	
	resultingNumber _ ''.
	
	(self between: 1 and: 3) ifTrue: [	
		self timesRepeat: [resultingNumber _ resultingNumber append: 'I'].
		
	].

	self = 4 ifTrue: [resultingNumber _ 'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		resultingNumber _ self pepito: 'V'
	].

	self = 9 ifTrue: [resultingNumber _ 'IX'].
	self = 10 ifTrue: [resultingNumber _ 'X'].
	self = 11 ifTrue: [resultingNumber _ 'XI'].
	self = 12 ifTrue: [resultingNumber _ 'XII'].
	self = 13 ifTrue: [resultingNumber _ 'XIII'].

	^ resultingNumber.! !

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 19:10:57'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 19:10:57'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 19:10:57'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 19:10:57'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 19:10:57'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 19:10:57'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 19:10:57'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 19:10:57'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 19:10:57'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 19:10:57'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 19:10:57'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 19:10:57'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 19:10:57'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 19:10:57'!
PASSED!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 19:51:06' prior: 50874828!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	
	(self between: 1 and: 3) ifTrue: [	
		self timesRepeat: [romanizedNumber _ romanizedNumber append: 'I'].
		
	].

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		romanizedNumber _ self pepito: 'V'
	].

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	self = 10 ifTrue: [romanizedNumber _ 'X'].
	self = 11 ifTrue: [romanizedNumber _ 'XI'].
	self = 12 ifTrue: [romanizedNumber _ 'XII'].
	self = 13 ifTrue: [romanizedNumber _ 'XIII'].

	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 19:52:20' prior: 50874880!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	
	(self between: 1 and: 3) ifTrue: [	
		romanizedNumber _ self pepito: ''
		
	].

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	(self between: 5 and: 8) ifTrue: [
		romanizedNumber _ (self-5) pepito: 'V'
	].

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	(self between: 10 and: 13) ifTrue: [
		romanizedNumber _ (self-10) pepito: 'X'
	].

	^ romanizedNumber.! !

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 19:52:23'!
FAILURE!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 19:52:41' prior: 50874821!
pepito: aStringToBuild

	| aString |
	
	aString _ aStringToBuild.
	self timesRepeat: [aString _ aString append: 'I'].
	^aString.! !

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 19:52:44'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 19:52:44'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 19:52:44'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 19:52:44'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 19:52:44'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 19:52:44'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 19:52:44'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 19:52:44'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 19:52:44'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 19:52:44'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 19:52:44'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 19:52:44'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 19:52:44'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 19:52:44'!
PASSED!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 20:15:28'!
pepito2conX:xInteger Y:yInteger Z:zString previous:romanizedNumber

	(self between:xInteger and: yInteger) ifTrue: [
		^(self - xInteger) pepito: zString.
		]! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 20:15:45' prior: 50874957!
pepito2conX:xInteger Y:yInteger Z:zString previous:romanizedNumber

	(self between:xInteger and: yInteger) ifTrue: [
		^(self - xInteger) pepito: zString.
		].
	^romanizedNumber. ! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 20:18:41' prior: 50874900!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
		romanizedNumber _ self pepito2ConX:0 Y:3 Z:'' previous: romanizedNumber.

	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	romanizedNumber _ self pepito2ConX:5 Y:8 Z:'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	romanizedNumber _ self pepito2ConX:10 Y:13 Z:'X' previous: romanizedNumber.

	^ romanizedNumber.! !

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 20:19:00'!
ERROR!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 20:19:54'!
ERROR!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 20:19:54'!
ERROR!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 20:19:54'!
ERROR!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 20:19:54'!
ERROR!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 20:19:54'!
ERROR!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 20:19:54'!
ERROR!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 20:19:54'!
ERROR!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 20:19:54'!
ERROR!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 20:19:54'!
ERROR!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 20:19:54'!
ERROR!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 20:19:54'!
ERROR!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 20:19:54'!
ERROR!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 20:19:54'!
ERROR!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 20:19:58'!
ERROR!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 20:22:17' prior: 50874974!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self pepito2conX:0 Y:3 Z:'' previous:romanizedNumber .
	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	romanizedNumber _ self pepito2conX:5 Y:8 Z:'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	romanizedNumber _ self pepito2conX:10 Y:13 Z:'X' previous: romanizedNumber.

	^ romanizedNumber.! !

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 20:22:21'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 20:22:21'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 20:22:21'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 20:22:21'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 20:22:21'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 20:22:21'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 20:22:21'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 20:22:21'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 20:22:21'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 20:22:21'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 20:22:21'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 20:22:21'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 20:22:21'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 20:22:21'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 20:27:11'!
test14

	self assert: 'XIV' equals: 14 asRoman.! !

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 20:27:13'!
FAILURE!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 20:27:37' prior: 50875023!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self pepito2conX:0 Y:3 Z:'' previous:romanizedNumber .
	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	romanizedNumber _ self pepito2conX:5 Y:8 Z:'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	romanizedNumber _ self pepito2conX:10 Y:13 Z:'X' previous: romanizedNumber.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	^ romanizedNumber.! !

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 20:27:39'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 20:27:39'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 20:30:06'!
test15

	self assert: 'XV' equals: 15 asRoman.! !

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 20:30:08'!
FAILURE!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 20:30:49' prior: 50875077!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self pepito2conX:0 Y:3 Z:'' previous:romanizedNumber .
	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	romanizedNumber _ self pepito2conX:5 Y:8 Z:'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	romanizedNumber _ self pepito2conX:10 Y:13 Z:'X' previous: romanizedNumber.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	self = 15 ifTrue: [romanizedNumber _ 'XV'].
	^ romanizedNumber.! !

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 20:30:52'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 20:30:52'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 20:30:52'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 20:30:52'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 20:30:52'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 20:30:52'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 20:30:52'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 20:30:52'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 20:30:52'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 20:30:52'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 20:30:52'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 20:30:52'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 20:30:52'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 20:30:52'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 20:30:52'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 20:30:52'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 20:33:16'!
test16

	self assert: 'XIX' equals: 19 asRoman.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 20:33:41' prior: 50875135!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self pepito2conX:0 Y:3 Z:'' previous:romanizedNumber .
	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	romanizedNumber _ self pepito2conX:5 Y:8 Z:'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	romanizedNumber _ self pepito2conX:10 Y:13 Z:'X' previous: romanizedNumber.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	self = 15 ifTrue: [romanizedNumber _ 'XV'].
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	^ romanizedNumber.! !

!testRun: #TestRomans #test16 stamp: 'IAR 9/30/2021 20:33:45'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 20:33:45'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 20:33:45'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 20:33:45'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 20:33:45'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 20:33:45'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 20:33:45'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 20:33:45'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 20:33:45'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 20:33:45'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 20:33:45'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 20:33:45'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 20:33:45'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 20:33:45'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 20:33:45'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 20:33:45'!
PASSED!

!testRun: #TestRomans #test16 stamp: 'IAR 9/30/2021 20:33:45'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 20:34:44'!
test19

	self assert: 'XIX' equals: 19 asRoman.! !

!methodRemoval: TestRomans #test16 stamp: 'IAR 9/30/2021 20:34:44'!
test16

	self assert: 'XIX' equals: 19 asRoman.!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 20:35:54' prior: 50875194!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self pepito2conX:0 Y:3 Z:'' previous:romanizedNumber .
	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	romanizedNumber _ self pepito2conX:5 Y:8 Z:'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	romanizedNumber _ self pepito2conX:10 Y:13 Z:'X' previous: romanizedNumber.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	romanizedNumber _ self pepito2conX:15 Y:18 Z:'XV' previous: romanizedNumber.
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 20:36:01' prior: 50875260!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self pepito2conX:0 Y:3 Z:'' previous:romanizedNumber .
	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	romanizedNumber _ self pepito2conX:5 Y:8 Z:'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	romanizedNumber _ self pepito2conX:10 Y:13 Z:'X' previous: romanizedNumber.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	
	romanizedNumber _ self pepito2conX:15 Y:18 Z:'XV' previous: romanizedNumber.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	^ romanizedNumber.! !

!testRun: #TestRomans #test19 stamp: 'IAR 9/30/2021 20:36:05'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 20:36:05'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 20:36:05'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 20:36:05'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 20:36:05'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 20:36:05'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 20:36:05'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 20:36:05'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 20:36:05'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 20:36:05'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 20:36:05'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 20:36:05'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 20:36:05'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 20:36:05'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 20:36:05'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 20:36:05'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'IAR 9/30/2021 20:36:05'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 20:41:20'!
test20

	self assert: 'XX' equals: 20 asRoman.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 20:42:11' prior: 50875281!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self pepito2conX:0 Y:3 Z:'' previous:romanizedNumber .
	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	romanizedNumber _ self pepito2conX:5 Y:8 Z:'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	romanizedNumber _ self pepito2conX:10 Y:13 Z:'X' previous: romanizedNumber.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	
	romanizedNumber _ self pepito2conX:15 Y:18 Z:'XV' previous: romanizedNumber.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	
	romanizedNumber _ self pepito2conX:20 Y:23 Z:'XV' previous: romanizedNumber.
	^ romanizedNumber.! !

!testRun: #TestRomans #test20 stamp: 'IAR 9/30/2021 20:42:15'!
FAILURE!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 20:42:28' prior: 50875345!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self pepito2conX:0 Y:3 Z:'' previous:romanizedNumber .
	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	romanizedNumber _ self pepito2conX:5 Y:8 Z:'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	romanizedNumber _ self pepito2conX:10 Y:13 Z:'X' previous: romanizedNumber.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	
	romanizedNumber _ self pepito2conX:15 Y:18 Z:'XV' previous: romanizedNumber.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	
	romanizedNumber _ self pepito2conX:20 Y:23 Z:'XX' previous: romanizedNumber.
	^ romanizedNumber.! !

!testRun: #TestRomans #test20 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'IAR 9/30/2021 20:42:30'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 20:44:11'!
test24

	self assert: 'XXIV' equals: 24 asRoman.! !

!testRun: #TestRomans #test24 stamp: 'IAR 9/30/2021 20:44:20'!
FAILURE!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 20:44:54' prior: 50875371!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self pepito2conX:0 Y:3 Z:'' previous:romanizedNumber .
	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	romanizedNumber _ self pepito2conX:5 Y:8 Z:'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	romanizedNumber _ self pepito2conX:10 Y:13 Z:'X' previous: romanizedNumber.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	
	romanizedNumber _ self pepito2conX:15 Y:18 Z:'XV' previous: romanizedNumber.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	
	romanizedNumber _ self pepito2conX:20 Y:23 Z:'XX' previous: romanizedNumber.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].

	^ romanizedNumber.! !

!testRun: #TestRomans #test24 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'IAR 9/30/2021 20:44:55'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 20:49:41'!
test25

	self assert: 'XXV' equals: 25 asRoman.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 20:50:19' prior: 50875442!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self pepito2conX:0 Y:3 Z:'' previous:romanizedNumber .
	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	romanizedNumber _ self pepito2conX:5 Y:8 Z:'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	romanizedNumber _ self pepito2conX:10 Y:13 Z:'X' previous: romanizedNumber.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	
	romanizedNumber _ self pepito2conX:15 Y:18 Z:'XV' previous: romanizedNumber.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	
	romanizedNumber _ self pepito2conX:20 Y:23 Z:'XX' previous: romanizedNumber.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	
	romanizedNumber _ self pepito2conX:25 Y:28 Z:'XXV' previous: romanizedNumber.

	^ romanizedNumber.! !

!testRun: #TestRomans #test25 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'IAR 9/30/2021 20:50:23'!
PASSED!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 20:56:31'!
pepito: aStringToBuild with: romanNumberUnit

	| aString |
	
	aString _ aStringToBuild.
	self timesRepeat: [aString _ aString append: romanNumberUnit].
	^aString.! !

!methodRemoval: SmallInteger #pepito: stamp: 'IAR 9/30/2021 20:56:43'!
pepito: aStringToBuild

	| aString |
	
	aString _ aStringToBuild.
	self timesRepeat: [aString _ aString append: 'I'].
	^aString.!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 20:57:00' prior: 50874965!
pepito2conX:xInteger Y:yInteger Z:zString previous:romanizedNumber

	(self between:xInteger and: yInteger) ifTrue: [
		^(self - xInteger) pepito: zString with: 'I'.
		].
	^romanizedNumber. ! !

!testRun: #TestRomans #test25 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'IAR 9/30/2021 20:57:13'!
PASSED!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:04:03'!
convertToRomanIfBetween:xInteger and:yInteger with:zString previous:romanizedNumber

	(self between:xInteger and: yInteger) ifTrue: [
		^(self - xInteger) pepito: zString with: 'I'.
		].
	^romanizedNumber. ! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 21:04:03' prior: 50875515!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self convertToRomanIfBetween:0 and:3 with:'' previous:romanizedNumber .
	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with:'V' previous: romanizedNumber.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	romanizedNumber _ self convertToRomanIfBetween:10 and:13 with:'X' previous: romanizedNumber.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:15 and:18 with:'XV' previous: romanizedNumber.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	
	romanizedNumber _ self convertToRomanIfBetween:20 and:23 with:'XX' previous: romanizedNumber.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:25 and:28 with:'XXV' previous: romanizedNumber.

	^ romanizedNumber.! !

!methodRemoval: SmallInteger #pepito2conX:Y:Z:previous: stamp: 'IAR 9/30/2021 21:04:03'!
pepito2conX:xInteger Y:yInteger Z:zString previous:romanizedNumber

	(self between:xInteger and: yInteger) ifTrue: [
		^(self - xInteger) pepito: zString with: 'I'.
		].
	^romanizedNumber. !

!testRun: #TestRomans #test25 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'IAR 9/30/2021 21:04:12'!
PASSED!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:08:01' prior: 50875587!
pepito: aStringToBuild with: aRomanDigit

	| aString |
	
	aString _ aStringToBuild.
	self timesRepeat: [aString _ aString append: aRomanDigit].
	^aString.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:09:12' prior: 50875751!
pepito: aStringToBuild with: aRomanNumberDigit

	| aString |
	
	aString _ aStringToBuild.
	self timesRepeat: [aString _ aString append: aRomanNumberDigit].
	^aString.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:11:41'!
convertToRomanIfBetween:xInteger and:yInteger with:zString previous:romanizedNumber withXXXXXXX: withXXXX 

	(self between:xInteger and: yInteger) ifTrue: [
		^(self - xInteger) pepito: zString with: 'I'.
		].
	^romanizedNumber. ! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 21:11:41' prior: 50875666!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self convertToRomanIfBetween:0 and:3 with:'' previous:romanizedNumber withXXXXXXX: 'I' .
	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with:'V' previous: romanizedNumber withXXXXXXX: 'I'.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	romanizedNumber _ self convertToRomanIfBetween:10 and:13 with:'X' previous: romanizedNumber withXXXXXXX: 'I'.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:15 and:18 with:'XV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	
	romanizedNumber _ self convertToRomanIfBetween:20 and:23 with:'XX' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:25 and:28 with:'XXV' previous: romanizedNumber withXXXXXXX: 'I'.

	^ romanizedNumber.! !

!methodRemoval: SmallInteger #convertToRomanIfBetween:and:with:previous: stamp: 'IAR 9/30/2021 21:11:41'!
convertToRomanIfBetween:xInteger and:yInteger with:zString previous:romanizedNumber

	(self between:xInteger and: yInteger) ifTrue: [
		^(self - xInteger) pepito: zString with: 'I'.
		].
	^romanizedNumber. !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:12:06' prior: 50875767!
convertToRomanIfBetween:xInteger and:yInteger with:zString previous:romanizedNumber withXXXXXXX: aRomanNumberDigit 

	(self between:xInteger and: yInteger) ifTrue: [
		^(self - xInteger) pepito: zString with: 'I'.
		].
	^romanizedNumber. ! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:12:14' prior: 50875822!
convertToRomanIfBetween:xInteger and:yInteger with:zString previous:romanizedNumber withXXXXXXX: aRomanNumberDigit 

	(self between:xInteger and: yInteger) ifTrue: [
		^(self - xInteger) pepito: zString with: aRomanNumberDigit.
		].
	^romanizedNumber. ! !

!testRun: #TestRomans #test25 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'IAR 9/30/2021 21:12:41'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 21:18:26'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 21:18:26'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 21:18:26'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 21:18:27'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 21:18:27'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 21:18:27'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 21:18:27'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 21:18:27'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 21:18:27'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 21:18:27'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 21:18:27'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 21:18:27'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 21:18:27'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 21:18:27'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 21:18:27'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 21:18:27'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'IAR 9/30/2021 21:18:27'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'IAR 9/30/2021 21:18:27'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'IAR 9/30/2021 21:18:27'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'IAR 9/30/2021 21:18:27'!
PASSED!
!TestRomans methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 21:19:43'!
test29

	self assert: 'XXIX' equals: 29 asRoman.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:19:58' prior: 50875778!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self convertToRomanIfBetween:0 and:3 with:'' previous:romanizedNumber withXXXXXXX: 'I' .
	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with:'V' previous: romanizedNumber withXXXXXXX: 'I'.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	romanizedNumber _ self convertToRomanIfBetween:10 and:13 with:'X' previous: romanizedNumber withXXXXXXX: 'I'.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:15 and:18 with:'XV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	
	romanizedNumber _ self convertToRomanIfBetween:20 and:23 with:'XX' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:25 and:28 with:'XXV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 29 ifTrue: [romanizedNumber _ 'XXIX'].


	^ romanizedNumber.! !

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 21:20:03'!
PASSED!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:34:20'!
asRomanUnit

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self convertToRomanIfBetween:0 and:3 with:'' previous:romanizedNumber withXXXXXXX: 'I' .
	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with:'V' previous: romanizedNumber withXXXXXXX: 'I'.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:35:20' prior: 50875939!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	(self between: 1 and: 9) ifTrue: [
		^self asRomanUnit.
	].
	
	romanizedNumber _ self convertToRomanIfBetween:10 and:13 with:'X' previous: romanizedNumber withXXXXXXX: 'I'.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:15 and:18 with:'XV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	
	romanizedNumber _ self convertToRomanIfBetween:20 and:23 with:'XX' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:25 and:28 with:'XXV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 29 ifTrue: [romanizedNumber _ 'XXIX'].


	^ romanizedNumber.! !

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 21:35:25'!
PASSED!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:36:28' prior: 50876036!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	(self between: 0 and: 9) ifTrue: [
		^self asRomanUnit.
	].
	
	romanizedNumber _ self convertToRomanIfBetween:10 and:13 with:'X' previous: romanizedNumber withXXXXXXX: 'I'.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:15 and:18 with:'XV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	
	romanizedNumber _ self convertToRomanIfBetween:20 and:23 with:'XX' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:25 and:28 with:'XXV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 29 ifTrue: [romanizedNumber _ 'XXIX'].


	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:46:21'!
asRomanWithTens: tens fives: fives units: units

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self convertToRomanIfBetween:0 and:3 with:'' previous:romanizedNumber withXXXXXXX: units .
	self = 4 ifTrue: [romanizedNumber _ (units, fives)].
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with: fives previous: romanizedNumber withXXXXXXX: 'I'.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:46:29' prior: 50876138!
asRomanWithTens: tens fives: fives units: units

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self convertToRomanIfBetween:0 and:3 with:'' previous:romanizedNumber withXXXXXXX: units .
	self = 4 ifTrue: [romanizedNumber _ (units, fives)].
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with: fives previous: romanizedNumber withXXXXXXX: units.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:46:40' prior: 50876155!
asRomanWithTens: tens fives: fives units: units

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self convertToRomanIfBetween:0 and:3 with:'' previous:romanizedNumber withXXXXXXX: units .
	self = 4 ifTrue: [romanizedNumber _ (units, fives)].
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with: fives previous: romanizedNumber withXXXXXXX: units.

	self = 9 ifTrue: [romanizedNumber _ (units, tens)].
	
	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:46:41' prior: 50876172!
asRomanWithTens: tens fives: fives units: units

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self convertToRomanIfBetween:0 and:3 with:'' previous:romanizedNumber withXXXXXXX: units .
	self = 4 ifTrue: [romanizedNumber _ (units, fives)].
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with: fives previous: romanizedNumber withXXXXXXX: units.
	self = 9 ifTrue: [romanizedNumber _ (units, tens)].
	
	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:47:42' prior: 50876189!
asRomanWithTens: tens fives: fives units: units

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self convertToRomanIfBetween:0 and:3 with:'' previous:romanizedNumber withXXXXXXX: units .
	self = 4 ifTrue: [^ (units, fives)].
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with: fives previous: romanizedNumber withXXXXXXX: units.
	self = 9 ifTrue: [romanizedNumber _ (units, tens)].
	
	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:47:47' prior: 50876206!
asRomanWithTens: tens fives: fives units: units

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self convertToRomanIfBetween:0 and:3 with:'' previous:romanizedNumber withXXXXXXX: units .
	self = 4 ifTrue: [^ units, fives].
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with: fives previous: romanizedNumber withXXXXXXX: units.
	self = 9 ifTrue: [romanizedNumber _ (units, tens)].
	
	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:48:58' prior: 50876111!
asRoman

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	(self between: 0 and: 9) ifTrue: [
		^self asRomanWithTens: 'X' fives: 'V' units: 'I'.
	].
	
	romanizedNumber _ self convertToRomanIfBetween:10 and:13 with:'X' previous: romanizedNumber withXXXXXXX: 'I'.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:15 and:18 with:'XV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	
	romanizedNumber _ self convertToRomanIfBetween:20 and:23 with:'XX' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:25 and:28 with:'XXV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 29 ifTrue: [romanizedNumber _ 'XXIX'].


	^ romanizedNumber.! !

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 21:49:03'!
PASSED!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:50:09' prior: 50876240!
asRoman

	 | romanizedNumber decena unidad |
	
	decena _ self // 10.
	unidad _ self \\ 10.
	
	romanizedNumber _ ''.
	(self between: 0 and: 9) ifTrue: [
		^self asRomanWithTens: 'X' fives: 'V' units: 'I'.
	].
	
	romanizedNumber _ self convertToRomanIfBetween:10 and:13 with:'X' previous: romanizedNumber withXXXXXXX: 'I'.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:15 and:18 with:'XV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	
	romanizedNumber _ self convertToRomanIfBetween:20 and:23 with:'XX' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:25 and:28 with:'XXV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 29 ifTrue: [romanizedNumber _ 'XXIX'].


	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:50:29' prior: 50876316!
asRoman

	 | romanizedNumber decena unidad |
	
	decena _ self // 10.
	unidad _ self \\ 10.
	
	romanizedNumber _ ''.
	(self between: 0 and: 9) ifTrue: [
		^unidad asRomanWithTens: 'X' fives: 'V' units: 'I'.
	].
	
	romanizedNumber _ self convertToRomanIfBetween:10 and:13 with:'X' previous: romanizedNumber withXXXXXXX: 'I'.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:15 and:18 with:'XV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	
	romanizedNumber _ self convertToRomanIfBetween:20 and:23 with:'XX' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:25 and:28 with:'XXV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 29 ifTrue: [romanizedNumber _ 'XXIX'].


	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:51:27' prior: 50876347!
asRoman

	 | romanizedNumber decena unidad romanUnit |
	
	decena _ self // 10.
	unidad _ self \\ 10.
	
	romanizedNumber _ ''.
	romanUnit _ unidad asRomanWithTens: 'X' fives: 'V' units: 'I'.
	
	romanizedNumber _ self convertToRomanIfBetween:10 and:13 with:'X' previous: romanizedNumber withXXXXXXX: 'I'.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:15 and:18 with:'XV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	
	romanizedNumber _ self convertToRomanIfBetween:20 and:23 with:'XX' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:25 and:28 with:'XXV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 29 ifTrue: [romanizedNumber _ 'XXIX'].


	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:53:24' prior: 50876378!
asRoman

	 | romanizedNumber decena unidad romanUnit romanTens |
	
	decena _ self // 10.
	unidad _ self \\ 10.
	
	romanizedNumber _ ''.
	romanUnit _ unidad asRomanWithTens: 'X' fives: 'V' units: 'I'.
	romanTens _ decena asRomanWithTens: 'X' fives: 'V' units: 'I'.
	
	romanizedNumber _ self convertToRomanIfBetween:10 and:13 with:'X' previous: romanizedNumber withXXXXXXX: 'I'.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:15 and:18 with:'XV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	
	romanizedNumber _ self convertToRomanIfBetween:20 and:23 with:'XX' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:25 and:28 with:'XXV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 29 ifTrue: [romanizedNumber _ 'XXIX'].


	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:54:01' prior: 50876408!
asRoman

	 | romanizedNumber decena unidad romanUnit romanTens |
	
	decena _ self // 10.
	unidad _ self \\ 10.
	
	romanizedNumber _ ''.
	romanUnit _ unidad asRomanWithTens: 'X' fives: 'V' units: 'I'.
	romanTens _ decena asRomanWithTens: 'C' fives: 'L' units: 'X'.
	
	romanizedNumber _ self convertToRomanIfBetween:10 and:13 with:'X' previous: romanizedNumber withXXXXXXX: 'I'.

	self = 14 ifTrue: [romanizedNumber _ 'XIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:15 and:18 with:'XV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 19 ifTrue: [romanizedNumber _ 'XIX'].
	
	romanizedNumber _ self convertToRomanIfBetween:20 and:23 with:'XX' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 24 ifTrue: [romanizedNumber _ 'XXIV'].
	
	romanizedNumber _ self convertToRomanIfBetween:25 and:28 with:'XXV' previous: romanizedNumber withXXXXXXX: 'I'.
	
	self = 29 ifTrue: [romanizedNumber _ 'XXIX'].


	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:55:06' prior: 50876440!
asRoman

	 | romanizedNumber decena unidad romanUnit romanTens |
	
	decena _ self // 10.
	unidad _ self \\ 10.
	
	romanizedNumber _ ''.
	romanUnit _ unidad asRomanWithTens: 'X' fives: 'V' units: 'I'.
	romanTens _ decena asRomanWithTens: 'C' fives: 'L' units: 'X'.
	
	^romanTens, romanUnit.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:55:13' prior: 50876472!
asRoman

	 | decena unidad romanUnit romanTens |
	
	decena _ self // 10.
	unidad _ self \\ 10.
	
	romanUnit _ unidad asRomanWithTens: 'X' fives: 'V' units: 'I'.
	romanTens _ decena asRomanWithTens: 'C' fives: 'L' units: 'X'.
	
	^romanTens, romanUnit.! !

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 21:55:43'!
PASSED!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 21:56:35' prior: 50876484!
asRoman

	 | romanUnit romanTens tens units |
	
	tens _ self // 10.
	units _ self \\ 10.
	
	romanUnit _ units asRomanWithTens: 'X' fives: 'V' units: 'I'.
	romanTens _ tens asRomanWithTens: 'C' fives: 'L' units: 'X'.
	
	^romanTens, romanUnit.! !

!methodRemoval: SmallInteger #asRomanUnit stamp: 'IAR 9/30/2021 21:57:00'!
asRomanUnit

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	romanizedNumber _ self convertToRomanIfBetween:0 and:3 with:'' previous:romanizedNumber withXXXXXXX: 'I' .
	self = 4 ifTrue: [romanizedNumber _ 'IV'].
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with:'V' previous: romanizedNumber withXXXXXXX: 'I'.

	self = 9 ifTrue: [romanizedNumber _ 'IX'].
	
	^ romanizedNumber.!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:06:13'!
timesAppend: aStringToBuild to: aRomanNumberDigit

	| aString |
	
	aString _ aStringToBuild.
	self timesRepeat: [aString _ aString append: aRomanNumberDigit].
	^aString.! !
!SmallInteger methodsFor: 'as yet unclassified' stamp: 'IAR 9/30/2021 22:06:13' prior: 50875833!
convertToRomanIfBetween:xInteger and:yInteger with:zString previous:romanizedNumber withXXXXXXX: aRomanNumberDigit 

	(self between:xInteger and: yInteger) ifTrue: [
		^(self - xInteger) timesAppend: zString to: aRomanNumberDigit.
		].
	^romanizedNumber. ! !

!methodRemoval: SmallInteger #pepito:with: stamp: 'IAR 9/30/2021 22:06:13'!
pepito: aStringToBuild with: aRomanNumberDigit

	| aString |
	
	aString _ aStringToBuild.
	self timesRepeat: [aString _ aString append: aRomanNumberDigit].
	^aString.!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:06:49' prior: 50876567!
timesAppend: aRomanNumeral to: aRomanNumberDigit

	| aString |
	
	aString _ aRomanNumeral.
	self timesRepeat: [aString _ aString append: aRomanNumberDigit].
	^aString.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:06:58' prior: 50876595!
timesAppend: aRomanNumeral to: aRomanNumber

	| aString |
	
	aString _ aRomanNumeral.
	self timesRepeat: [aString _ aString append: aRomanNumber].
	^aString.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:09:10' prior: 50876603!
timesAppend: aRomanNumeral to: aRomanNumber

	
	
	^ aRomanNumber, (String streamContents: (self timesRepeat: [aRomanNumeral]))! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:09:15' prior: 50876611!
timesAppend: aRomanNumeral to: aRomanNumber

	^ aRomanNumber, (String streamContents: (self timesRepeat: [aRomanNumeral]))! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:10:01' prior: 50876618!
timesAppend: aRomanNumeral to: aRomanNumber

	^ aRomanNumber, (String streamContents: [: stream | self timesRepeat: [stream nextPut: $I]])! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:10:18' prior: 50876625!
timesAppend: aRomanNumeral to: aRomanNumber

	^ aRomanNumber, (String streamContents: [: stream | self timesRepeat: [stream nextPut: aRomanNumeral]])! !

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 22:10:36'!
ERROR!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:11:18' prior: 50876633!
timesAppend: aRomanNumeral to: aRomanNumber

	^ aRomanNumber, (String streamContents: [: stream | self timesRepeat: [stream nextPut: aRomanNumeral first]])! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:11:31' prior: 50876643!
timesAppend: aRomanNumeral to: aRomanNumber

	^ aRomanNumber, (String streamContents: [: stream | self timesRepeat: [stream nextPut: aRomanNumeral]])! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:12:55' prior: 50876651!
timesAppend: aRomanNumber to: aRomanNumeral

	^ aRomanNumber, (String streamContents: [: stream | self timesRepeat: [stream nextPut: aRomanNumeral]])! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:26:17' prior: 50876659!
timesAppend: aRomanNumeral to: aRomanNumber

	^ aRomanNumber, (String streamContents: [: stream | self timesRepeat: [stream nextPut: aRomanNumeral]])! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:30:56' prior: 50876223!
asRomanWithTens: tens fives: fives units: units

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	(self between: 0 and: 3) ifTrue: [
		^ (self - 0) timesAppend: $I to: ''.
		].
	romanizedNumber _ self convertToRomanIfBetween:0 and:3 with:'' previous:romanizedNumber withXXXXXXX: units .
	self = 4 ifTrue: [^ units, fives].
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with: fives previous: romanizedNumber withXXXXXXX: units.
	self = 9 ifTrue: [romanizedNumber _ (units, tens)].
	
	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:31:04' prior: 50876675!
asRomanWithTens: tens fives: fives units: units

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	(self between: 0 and: 3) ifTrue: [
			^ (self - 0) timesAppend: $I to: ''.
		].
	romanizedNumber _ self convertToRomanIfBetween:0 and:3 with:'' previous:romanizedNumber withXXXXXXX: units .
	self = 4 ifTrue: [^ units, fives].
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with: fives previous: romanizedNumber withXXXXXXX: units.
	self = 9 ifTrue: [romanizedNumber _ (units, tens)].
	
	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:31:19' prior: 50876694!
asRomanWithTens: tens fives: fives units: units

	 | romanizedNumber |
	
	romanizedNumber _ ''.
	(self between: 0 and: 3) ifTrue: [
		^ (self - 0) timesAppend: $I to: ''.
	].
	romanizedNumber _ self convertToRomanIfBetween:0 and:3 with:'' previous:romanizedNumber withXXXXXXX: units .
	self = 4 ifTrue: [^ units, fives].
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with: fives previous: romanizedNumber withXXXXXXX: units.
	self = 9 ifTrue: [romanizedNumber _ (units, tens)].
	
	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:33:10' prior: 50876713!
asRomanWithTens: tens fives: fives units: units

	 | romanizedNumber |
	
	(self between: 0 and: 3) ifTrue: [
		^ (self - 0) timesAppend: units to: ''.
	].
	self = 4 ifTrue: [^ units, fives].
	
	(self between: 5 and: 8) ifTrue: [
		^ (self - 5) timesAppend: units to: fives.
	].
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with: fives previous: romanizedNumber withXXXXXXX: units.
	self = 9 ifTrue: [romanizedNumber _ (units, tens)].
	
	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:33:41' prior: 50876732!
asRomanWithTens: tens fives: fives units: units

	| romanizedNumber |
	romanizedNumber _ ''.
	
	(self between: 0 and: 3) ifTrue: [
		^ (self - 0) timesAppend: units to: ''.
	].
	self = 4 ifTrue: [^ units, fives].
	
	(self between: 5 and: 8) ifTrue: [
		^ (self - 5) timesAppend: units to: fives.
	].
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with: fives previous: romanizedNumber withXXXXXXX: units.
	self = 9 ifTrue: [romanizedNumber _ (units, tens)].
	
	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:33:53' prior: 50876750!
asRomanWithTens: tens fives: fives units: units

	| romanizedNumber |
	romanizedNumber _ ''.
	
	(self between: 0 and: 3) ifTrue: [
		^ (self - 0) timesAppend: units to: ''.
	].
	self = 4 ifTrue: [^ units, fives].
	
	"(self between: 5 and: 8) ifTrue: [
		^ (self - 5) timesAppend: units to: fives.
	]."
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with: fives previous: romanizedNumber withXXXXXXX: units.
	self = 9 ifTrue: [romanizedNumber _ (units, tens)].
	
	^ romanizedNumber.! !

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 22:34:43'!
ERROR!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:35:45' prior: 50876542!
asRoman

	 | romanUnit romanTens tens units |
	
	tens _ self // 10.
	units _ self \\ 10.
	
	romanUnit _ units asRomanWithTens: $X fives: $V units: $I.
	romanTens _ tens asRomanWithTens: $C fives: $L units: $X.
	
	^romanTens, romanUnit.! !

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 22:35:48'!
ERROR!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:37:00' prior: 50876769!
asRomanWithTens: tens fives: fives units: units

	| romanizedNumber |
	romanizedNumber _ ''.
	
	(self between: 0 and: 3) ifTrue: [
		^ (self - 0) timesAppend: units to: ''.
	].
	self = 4 ifTrue: [^ {units.fives}].
	
	"(self between: 5 and: 8) ifTrue: [
		^ (self - 5) timesAppend: units to: fives.
	]."
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with: fives previous: romanizedNumber withXXXXXXX: units.
	self = 9 ifTrue: [romanizedNumber _ {units. tens}].
	
	^ romanizedNumber.! !

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 22:37:01'!
ERROR!

----End fileIn of /home/ignacio/Documents/Facultad/repos-isw1/isw1/vms/main/Packages/TerseGuide.pck.st----!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:38:59' prior: 50876803!
asRomanWithTens: tens fives: fives units: units

	| romanizedNumber |
	romanizedNumber _ ''.
	
	(self between: 0 and: 3) ifTrue: [
		^ (self - 0) timesAppend: units to: ''.
	].
	self = 4 ifTrue: [^ String with: units with: fives].
	
	"(self between: 5 and: 8) ifTrue: [
		^ (self - 5) timesAppend: units to: fives.
	]."
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with: fives previous: romanizedNumber withXXXXXXX: units.
	self = 9 ifTrue: [romanizedNumber _ {units. tens}].
	
	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:39:03' prior: 50879750!
asRomanWithTens: tens fives: fives units: units

	| romanizedNumber |
	romanizedNumber _ ''.
	
	(self between: 0 and: 3) ifTrue: [
		^ (self - 0) timesAppend: units to: ''.
	].
	self = 4 ifTrue: [^String with: units with: fives].
	
	"(self between: 5 and: 8) ifTrue: [
		^ (self - 5) timesAppend: units to: fives.
	]."
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with: fives previous: romanizedNumber withXXXXXXX: units.
	self = 9 ifTrue: [romanizedNumber _ {units. tens}].
	
	^ romanizedNumber.! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:39:19' prior: 50879769!
asRomanWithTens: tens fives: fives units: units

	| romanizedNumber |
	romanizedNumber _ ''.
	
	(self between: 0 and: 3) ifTrue: [
		^ (self - 0) timesAppend: units to: ''.
	].
	self = 4 ifTrue: [^String with: units with: fives].
	
	"(self between: 5 and: 8) ifTrue: [
		^ (self - 5) timesAppend: units to: fives.
	]."
	
	romanizedNumber _ self convertToRomanIfBetween:5 and:8 with: fives previous: romanizedNumber withXXXXXXX: units.
	self = 9 ifTrue: [romanizedNumber _ String with: units with: tens].
	
	^ romanizedNumber.! !

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 22:39:21'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 22:39:21'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 22:39:21'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 22:39:21'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 22:39:21'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 22:39:21'!
ERROR!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 22:39:21'!
ERROR!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 22:39:21'!
ERROR!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 22:39:21'!
ERROR!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 22:39:21'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 22:39:21'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 22:39:21'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 22:39:21'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 22:39:21'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 22:39:21'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 22:39:21'!
ERROR!

!testRun: #TestRomans #test19 stamp: 'IAR 9/30/2021 22:39:21'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'IAR 9/30/2021 22:39:21'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'IAR 9/30/2021 22:39:21'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'IAR 9/30/2021 22:39:21'!
ERROR!

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 22:39:21'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 22:39:26'!
ERROR!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:42:19' prior: 50879788!
asRomanWithTens: tens fives: fives units: units
	
	(self between: 0 and: 3) ifTrue: [
		^ (self - 0) timesAppend: units to: ''.
	].
	self = 4 ifTrue: [^String with: units with: fives].
	
	(self between: 5 and: 8) ifTrue: [
		^ (self - 5) timesAppend: units to: fives.
	].
	self = 9 ifTrue: [^String with: units with: tens].! !

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 22:42:22'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 22:42:22'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 22:42:22'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 22:42:22'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 22:42:22'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 22:42:22'!
ERROR!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 22:42:22'!
ERROR!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 22:42:22'!
ERROR!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 22:42:22'!
ERROR!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 22:42:22'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 22:42:22'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 22:42:22'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 22:42:22'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 22:42:22'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 22:42:22'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 22:42:22'!
ERROR!

!testRun: #TestRomans #test19 stamp: 'IAR 9/30/2021 22:42:22'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'IAR 9/30/2021 22:42:22'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'IAR 9/30/2021 22:42:22'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'IAR 9/30/2021 22:42:22'!
ERROR!

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 22:42:22'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 22:42:28'!
ERROR!

$A!

$!

$!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:47:17' prior: 50876667!
timesAppend: aRomanNumeral to: aRomanNumber

	^ (String with: aRomanNumber), (String streamContents: [: stream | self timesRepeat: [stream nextPut: aRomanNumeral]])! !

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 22:47:18'!
ERROR!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:47:21' prior: 50879857!
asRomanWithTens: tens fives: fives units: units
	
	(self between: 0 and: 3) ifTrue: [
		^ (self - 0) timesAppend: units to: $.
	].
	self = 4 ifTrue: [^String with: units with: fives].
	
	(self between: 5 and: 8) ifTrue: [
		^ (self - 5) timesAppend: units to: fives.
	].
	self = 9 ifTrue: [^String with: units with: tens].! !

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 22:47:24'!
FAILURE!

'' first!

Character null !

Character null!

String with: Character null!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:52:21' prior: 50879931!
asRomanWithTens: tens fives: fives units: units
	
	(self between: 0 and: 3) ifTrue: [
		^ (self - 0) timesAppend: units to: ''.
	].
	self = 4 ifTrue: [^String with: units with: fives asString].
	
	(self between: 5 and: 8) ifTrue: [
		^ (self - 5) timesAppend: units to: fives asString.
	].
	self = 9 ifTrue: [^String with: units with: tens].! !
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:52:37' prior: 50879920!
timesAppend: aRomanNumeral to: aRomanNumber

	^ aRomanNumber, (String streamContents: [: stream | self timesRepeat: [stream nextPut: aRomanNumeral]])! !

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 22:52:40'!
ERROR!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 22:52:40'!
ERROR!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'IAR 9/30/2021 22:52:40'!
ERROR!

!testRun: #TestRomans #test25 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 22:52:40'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 22:52:46'!
ERROR!
!SmallInteger methodsFor: '*Romans' stamp: 'IAR 9/30/2021 22:53:02' prior: 50879949!
asRomanWithTens: tens fives: fives units: units
	
	(self between: 0 and: 3) ifTrue: [
		^ (self - 0) timesAppend: units to: ''.
	].
	self = 4 ifTrue: [^String with: units with: fives].
	
	(self between: 5 and: 8) ifTrue: [
		^ (self - 5) timesAppend: units to: fives asString.
	].
	self = 9 ifTrue: [^String with: units with: tens].! !

!testRun: #TestRomans #test01 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test02 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test03 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test05 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test06 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test07 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test08 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test09 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test10 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test11 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test12 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test13 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test15 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test19 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test20 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test25 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test29 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test04 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test14 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

!testRun: #TestRomans #test24 stamp: 'IAR 9/30/2021 22:53:06'!
PASSED!

----QUIT----(1 October 2021 02:34:47) CuisUniversity-4532.image priorSource: 16982893!

----STARTUP---- (4 October 2021 23:11:00) as /home/ignacio/Documents/Facultad/repos-isw1/isw1/vms/main/CuisUniversity-4532.image!


TestCase subclass: #TestMarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #TestMarsRover category: 'MarsRover' stamp: 'IAR 10/4/2021 23:18:39'!
TestCase subclass: #TestMarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'IAR 10/4/2021 23:20:59'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!TestMarsRover methodsFor: 'nil' stamp: 'IAR 10/4/2021 23:20:42'!
test01
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #North.
	rover process: ''.
	self assert: (rover isAt: 0@0 facing: #North).! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:21:03'!
ERROR!
!MarsRover class methodsFor: 'instance creation' stamp: 'IAR 10/4/2021 23:21:16'!
at: aPoint facing: aSymbol 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAt: aPoint facing: aSymbol ! !
!MarsRover class methodsFor: 'instance creation' stamp: 'IAR 10/4/2021 23:23:03' prior: 50880112!
at: aPosition facing: aCardinalDirection

	^self new initializeAt: aPosition facing: aCardinalDirection.! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:23:06'!
ERROR!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'IAR 10/4/2021 23:23:40'!
Object subclass: #MarsRover
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'IAR 10/4/2021 23:23:40'!
Object subclass: #MarsRover
	instanceVariableNames: 'position cardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'IAR 10/4/2021 23:23:40'!
initializeAt: aPosition facing: aCardinalDirection 
	self shouldBeImplemented.
	position := aPosition.
	cardinalDirection := aCardinalDirection.! !
!MarsRover methodsFor: 'initialization' stamp: 'IAR 10/4/2021 23:23:55' prior: 50880144!
initializeAt: aPosition facing: aCardinalDirection 
	
	position := aPosition.
	cardinalDirection := aCardinalDirection.! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:23:56'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:24:13'!
process: aString 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:25:54' prior: 50880161!
process: aSequenceOfCommands 
	! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:25:55'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:26:06'!
isAt: aPoint facing: aSymbol 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:26:49' prior: 50880172!
isAt: aPosition facing: aCardinalDirection 
	
	^true! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:26:50'!
PASSED!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:26:50'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:26:57'!
test02
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #North.
	rover process: ''.
	self assert: (rover isAt: 0@0 facing: #North).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:27:13' prior: 50880186!
test02
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #North.
	rover process: 'f'.
	self assert: (rover isAt: 0@1 facing: #North).! !

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:27:15'!
PASSED!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:27:15'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:27:15'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:27:35' prior: 50880194!
test02
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #North.
	rover process: 'f'.
	self deny: (rover isAt: 0@0 facing: #North).! !

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:27:36'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:30:14' prior: 50880177!
isAt: aPosition facing: aCardinalDirection 
	
	^(aPosition = position and: [aCardinalDirection = cardinalDirection]).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:30:21' prior: 50880219!
isAt: aPosition facing: aCardinalDirection 
	
	^(aPosition = position and: [ aCardinalDirection = cardinalDirection ]).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:30:40' prior: 50880226!
isAt: aPosition facing: aCardinalDirection 
	
	^aPosition = position and: [ aCardinalDirection = cardinalDirection ].! !

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:30:45'!
FAILURE!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:31:30'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:32:32' prior: 50880166!
process: aSequenceOfCommands

	position = position + (0@1).
	! !

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:32:35'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:33:02' prior: 50880245!
process: aSequenceOfCommands

	position _ position + (0@1).
	! !

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:33:03'!
PASSED!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:33:03'!
FAILURE!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:33:03'!
PASSED!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:33:03'!
FAILURE!

position + (0@1)!

aPosition = position and: [ aCardinalDirection = cardinalDirection ]!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:36:22' prior: 50880253!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [^self].
	position _ position + (0@1).
	! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:36:26'!
PASSED!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:36:26'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:36:26'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:38:08'!
test03
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #North.
	rover process: 'f'.
	self assert: (rover isAt: 0@1 facing: #North).! !

!methodRemoval: TestMarsRover #test03 stamp: 'IAR 10/4/2021 23:39:45'!
test03
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #North.
	rover process: 'f'.
	self assert: (rover isAt: 0@1 facing: #North).!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:40:14' prior: 50880271!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [^self].
	position _ 20@1
	! !

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:40:17'!
PASSED!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:40:17'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:40:17'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:40:31'!
test03
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #North.
	rover process: 'f'.
	self assert: (rover isAt: 0@1 facing: #North).! !

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/4/2021 23:41:13'!
FAILURE!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/4/2021 23:41:13'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:41:50' prior: 50880299!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [^self].
	position _ position + (0@1).
	! !

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/4/2021 23:41:53'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/4/2021 23:41:55'!
PASSED!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:41:55'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:41:55'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/4/2021 23:41:55'!
PASSED!

0@-1!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:44:21'!
test04
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #North.
	rover process: 'b'.
	self assert: (rover isAt: 0@-1 facing: #North).! !

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/4/2021 23:44:24'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:45:18' prior: 50880324!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [^self].
	(aSequenceOfCommands = 'f') ifTrue: [position _ position + (0@1)].
	(aSequenceOfCommands = 'b') ifTrue: [position _ position + (0@-1)].
	! !

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/4/2021 23:45:19'!
PASSED!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:45:19'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:45:19'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/4/2021 23:45:19'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/4/2021 23:45:19'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:48:02'!
test05
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #North.
	rover process: 'r'.
	self assert: (rover isAt: 0@1 facing: #East).! !

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/4/2021 23:48:06'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:50:41' prior: 50880352!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [^self].
	(aSequenceOfCommands = 'f') ifTrue: [position _ position + (0@1)].
	(aSequenceOfCommands = 'b') ifTrue: [position _ position + (0@-1)].
	(aSequenceOfCommands = 'r') ifTrue: [cardinalDirection _ #East].
	! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:50:51'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:50:51'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/4/2021 23:50:51'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/4/2021 23:50:51'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/4/2021 23:50:51'!
FAILURE!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/4/2021 23:50:51'!
FAILURE!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:51:02' prior: 50880374!
test05
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #North.
	rover process: 'r'.
	self assert: (rover isAt: 0@0 facing: #East).! !

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/4/2021 23:51:02'!
PASSED!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:51:07'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:51:07'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/4/2021 23:51:07'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/4/2021 23:51:07'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/4/2021 23:51:07'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:51:53'!
test06
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #North.
	rover process: 'l'.
	self assert: (rover isAt: 0@0 facing: #West).! !

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/4/2021 23:51:55'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:52:50' prior: 50880384!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [^self].
	(aSequenceOfCommands = 'f') ifTrue: [position _ position + (0@1)].
	(aSequenceOfCommands = 'b') ifTrue: [position _ position + (0@-1)].
	(aSequenceOfCommands = 'r') ifTrue: [cardinalDirection _ #East].
	(aSequenceOfCommands = 'l') ifTrue: [cardinalDirection _ #West].
	! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:52:52'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:52:52'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/4/2021 23:52:52'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/4/2021 23:52:52'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/4/2021 23:52:52'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/4/2021 23:52:52'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:53:17' prior: 50880442!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	(aSequenceOfCommands = 'f') ifTrue: [ position _ position + (0@1) ].
	(aSequenceOfCommands = 'b') ifTrue: [ position _ position + (0@-1) ].
	(aSequenceOfCommands = 'r') ifTrue: [ cardinalDirection _ #East ].
	(aSequenceOfCommands = 'l') ifTrue: [ cardinalDirection _ #West ].
	! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:53:18'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:53:18'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/4/2021 23:53:18'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/4/2021 23:53:18'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/4/2021 23:53:18'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/4/2021 23:53:18'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:56:36'!
test07
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #East.
	rover process: 'f'.
	self assert: (rover isAt: 1@0 facing: #East).! !

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/4/2021 23:56:40'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:58:50' prior: 50880470!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ position _ position + (1@0) ].
		].
	(aSequenceOfCommands = 'b') ifTrue: [ position _ position + (0@-1) ].
	(aSequenceOfCommands = 'r') ifTrue: [ cardinalDirection _ #East ].
	(aSequenceOfCommands = 'l') ifTrue: [ cardinalDirection _ #West ].! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:58:56'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:58:56'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/4/2021 23:58:56'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/4/2021 23:58:56'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/4/2021 23:58:56'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/4/2021 23:58:56'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/4/2021 23:58:56'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/4/2021 23:59:17'!
test08
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #East.
	rover process: 'b'.
	self assert: (rover isAt: -1@0 facing: #East).! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/4/2021 23:59:23'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/4/2021 23:59:23'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/4/2021 23:59:23'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/4/2021 23:59:23'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/4/2021 23:59:23'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/4/2021 23:59:23'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/4/2021 23:59:23'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/4/2021 23:59:23'!
FAILURE!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/4/2021 23:59:23'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:00:03' prior: 50880508!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ position _ position + (1@0) ].
		].
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@-1) ].
		(cardinalDirection = #East)
			ifTrue: [ position _ position + (-1@0) ].
		].
	(aSequenceOfCommands = 'r') ifTrue: [ cardinalDirection _ #East ].
	(aSequenceOfCommands = 'l') ifTrue: [ cardinalDirection _ #West ].! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:00:06'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:00:06'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:00:06'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:00:06'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:00:06'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:00:06'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:00:06'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:00:06'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:00:25' prior: 50880571!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ position _ position + (1@0) ].
		].
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ position _ position - (1@0) ].
		].
	(aSequenceOfCommands = 'r') ifTrue: [ cardinalDirection _ #East ].
	(aSequenceOfCommands = 'l') ifTrue: [ cardinalDirection _ #West ].! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:01:11'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:01:11'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:01:11'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:01:11'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:01:11'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:01:11'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:01:11'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:01:11'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:02:05'!
test09
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #East.
	rover process: 'r'.
	self assert: (rover isAt: 0@0 facing: #South).! !

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:02:17'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:03:53' prior: 50880612!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ position _ position + (1@0) ].
		].
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ position _ position - (1@0) ].
		].
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ cardinalDirection _ #East ].
		].
	(aSequenceOfCommands = 'l') ifTrue: [ cardinalDirection _ #West ].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:04:11' prior: 50880663!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ position _ position + (1@0) ].
		].
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ position _ position - (1@0) ].
		].
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ cardinalDirection _ #South ].
		].
	(aSequenceOfCommands = 'l') ifTrue: [ cardinalDirection _ #West ].! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:04:19'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:04:19'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:04:19'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:04:19'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:04:19'!
FAILURE!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:04:19'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:04:19'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:04:19'!
PASSED!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:04:19'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:04:19'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:05:49' prior: 50880687!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		].
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		].
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		].
	(aSequenceOfCommands = 'l') ifTrue: [ ^cardinalDirection _ #West ].! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:05:55'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:05:55'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:05:55'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:05:55'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:05:55'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:05:55'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:05:55'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:05:55'!
PASSED!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:05:55'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:06:23'!
test10
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #East.
	rover process: 'l'.
	self assert: (rover isAt: 0@0 facing: #North).! !

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:06:26'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:07:54' prior: 50880737!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		].
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		].
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		].
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North) ifTrue:		[ ^cardinalDirection _ #West ].
		(cardinalDirection = #East) ifTrue:		[ ^cardinalDirection _ #North ].
		]! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:07:56'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:07:56'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:07:56'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:07:56'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:07:56'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:07:56'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:07:56'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:07:56'!
PASSED!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:07:56'!
PASSED!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:07:56'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:09:46'!
test11
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #South.
	rover process: 'f'.
	self assert: (rover isAt: 0@-1 facing: #South).! !

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:09:48'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:10:26' prior: 50880794!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (1@0) ].
		].
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		].
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		].
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North) ifTrue:		[ ^cardinalDirection _ #West ].
		(cardinalDirection = #East) ifTrue:		[ ^cardinalDirection _ #North ].
		]! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:10:28'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:10:28'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:10:28'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:10:28'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:10:28'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:10:28'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:10:28'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:10:28'!
PASSED!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:10:28'!
PASSED!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:10:28'!
PASSED!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:10:28'!
FAILURE!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:10:28'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:10:39' prior: 50880857!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (0@1) ].
		].
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		].
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		].
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North) ifTrue:		[ ^cardinalDirection _ #West ].
		(cardinalDirection = #East) ifTrue:		[ ^cardinalDirection _ #North ].
		]! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:10:41'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:10:41'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:10:41'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:10:41'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:10:41'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:10:41'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:10:41'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:10:41'!
PASSED!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:10:41'!
PASSED!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:10:41'!
PASSED!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:10:41'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:10:58'!
test12
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #South.
	rover process: 'b'.
	self assert: (rover isAt: 0@1 facing: #South).! !

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 00:11:01'!
FAILURE!

----QUIT----(5 October 2021 00:11:07) CuisUniversity-4532.image priorSource: 17549679!

----STARTUP---- (5 October 2021 00:11:13) as /home/ignacio/Documents/Facultad/repos-isw1/isw1/vms/main/CuisUniversity-4532.image!

!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:13:12' prior: 50880918!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (0@1) ].
		].
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position + (0@1) ].
		].
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		].
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North) ifTrue:		[ ^cardinalDirection _ #West ].
		(cardinalDirection = #East) ifTrue:		[ ^cardinalDirection _ #North ].
		]! !

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 00:13:15'!
PASSED!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:13:15'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:13:15'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:13:15'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:13:15'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:13:15'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:13:15'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:13:15'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:13:15'!
PASSED!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:13:15'!
PASSED!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:13:15'!
PASSED!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:13:15'!
PASSED!

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 00:13:15'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:13:29'!
test13
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #South.
	rover process: 'r'.
	self assert: (rover isAt: 0@0 facing: #West).! !

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 00:13:31'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:13:53' prior: 50880993!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (0@1) ].
		].
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position + (0@1) ].
		].
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		(cardinalDirection = #South)
			ifTrue: [ ^cardinalDirection _ #West ].
		].
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North) ifTrue:		[ ^cardinalDirection _ #West ].
		(cardinalDirection = #East) ifTrue:		[ ^cardinalDirection _ #North ].
		]! !

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 00:13:55'!
PASSED!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:13:55'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:13:55'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:13:55'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:13:55'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:13:55'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:13:55'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:13:55'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:13:55'!
PASSED!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:13:55'!
PASSED!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:13:55'!
PASSED!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:13:55'!
PASSED!

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 00:13:55'!
PASSED!

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 00:13:55'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:14:26'!
test14
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #South.
	rover process: 'l'.
	self assert: (rover isAt: 0@0 facing: #East).! !

!testRun: #TestMarsRover #test14 stamp: 'IAR 10/5/2021 00:14:27'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:15:14' prior: 50881068!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (0@1) ].
		].
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position + (0@1) ].
		].
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		(cardinalDirection = #South)
			ifTrue: [ ^cardinalDirection _ #West ].
		].
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North)
			ifTrue:	 [ ^cardinalDirection _ #West ].
		(cardinalDirection = #East)
			 ifTrue:	 [ ^cardinalDirection _ #North ].
		(cardinalDirection = #South)
			ifTrue:	 [ ^cardinalDirection _ #East ].
		]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:15:21' prior: 50881147!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (0@1) ].
		].
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position + (0@1) ].
		].
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		(cardinalDirection = #South)
			ifTrue: [ ^cardinalDirection _ #West ].
		].
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North)
			ifTrue:	 [ ^cardinalDirection _ #West ].
		(cardinalDirection = #East)
			ifTrue:	 [ ^cardinalDirection _ #North ].
		(cardinalDirection = #South)
			ifTrue:	 [ ^cardinalDirection _ #East ].
		]! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:15:23'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:15:23'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:15:23'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:15:23'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:15:23'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:15:23'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:15:23'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:15:23'!
PASSED!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:15:23'!
PASSED!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:15:23'!
PASSED!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:15:23'!
PASSED!

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 00:15:23'!
PASSED!

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 00:15:23'!
PASSED!

!testRun: #TestMarsRover #test14 stamp: 'IAR 10/5/2021 00:15:23'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:15:58'!
test15
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #West.
	rover process: 'f'.
	self assert: (rover isAt: 0@-1 facing: #West).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:16:29' prior: 50881259!
test15
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #West.
	rover process: 'f'.
	self assert: (rover isAt: -1@0 facing: #West).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:16:42' prior: 50881187!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position - (1@0) ].
		].
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position + (0@1) ].
		].
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		(cardinalDirection = #South)
			ifTrue: [ ^cardinalDirection _ #West ].
		].
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North)
			ifTrue:	 [ ^cardinalDirection _ #West ].
		(cardinalDirection = #East)
			ifTrue:	 [ ^cardinalDirection _ #North ].
		(cardinalDirection = #South)
			ifTrue:	 [ ^cardinalDirection _ #East ].
		]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:16:55' prior: 50881275!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position - (1@0) ].
		].
	
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position + (0@1) ].
		].
	
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		(cardinalDirection = #South)
			ifTrue: [ ^cardinalDirection _ #West ].
		].
	
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North)
			ifTrue:	 [ ^cardinalDirection _ #West ].
		(cardinalDirection = #East)
			ifTrue:	 [ ^cardinalDirection _ #North ].
		(cardinalDirection = #South)
			ifTrue:	 [ ^cardinalDirection _ #East ].
		]! !

!testRun: #TestMarsRover #test15 stamp: 'IAR 10/5/2021 00:16:57'!
PASSED!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:16:57'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:16:57'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:16:57'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:16:57'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:16:57'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:16:57'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:16:57'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:16:57'!
PASSED!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:16:57'!
PASSED!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:16:57'!
PASSED!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:16:57'!
PASSED!

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 00:16:57'!
PASSED!

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 00:16:57'!
PASSED!

!testRun: #TestMarsRover #test14 stamp: 'IAR 10/5/2021 00:16:57'!
PASSED!

!testRun: #TestMarsRover #test15 stamp: 'IAR 10/5/2021 00:16:57'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:17:07' prior: 50881267!
test15
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #West.
	rover process: 'b'.
	self assert: (rover isAt: 1@0 facing: #West).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:17:59' prior: 50881317!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position - (1@0) ].
		].
	
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position + (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position + (1@0) ].
		].
	
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		(cardinalDirection = #South)
			ifTrue: [ ^cardinalDirection _ #West ].
		].
	
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North)
			ifTrue:	 [ ^cardinalDirection _ #West ].
		(cardinalDirection = #East)
			ifTrue:	 [ ^cardinalDirection _ #North ].
		(cardinalDirection = #South)
			ifTrue:	 [ ^cardinalDirection _ #East ].
		]! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:18:02'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:18:02'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:18:02'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:18:02'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:18:02'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:18:02'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:18:02'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:18:02'!
PASSED!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:18:02'!
PASSED!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:18:02'!
PASSED!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:18:02'!
PASSED!

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 00:18:02'!
PASSED!

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 00:18:02'!
PASSED!

!testRun: #TestMarsRover #test14 stamp: 'IAR 10/5/2021 00:18:02'!
PASSED!

!testRun: #TestMarsRover #test15 stamp: 'IAR 10/5/2021 00:18:02'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:18:15'!
test16
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #West.
	rover process: 'r'.
	self assert: (rover isAt: 0@0 facing: #North).! !

!testRun: #TestMarsRover #test16 stamp: 'IAR 10/5/2021 00:18:16'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:18:53' prior: 50881405!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position - (1@0) ].
		].
	
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position + (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position + (1@0) ].
		].
	
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		(cardinalDirection = #South)
			ifTrue: [ ^cardinalDirection _ #West ].
		(cardinalDirection = #West)
			ifTrue: [ ^cardinalDirection _ #North ].
		].
	
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North)
			ifTrue:	 [ ^cardinalDirection _ #West ].
		(cardinalDirection = #East)
			ifTrue:	 [ ^cardinalDirection _ #North ].
		(cardinalDirection = #South)
			ifTrue:	 [ ^cardinalDirection _ #East ].
		]! !

!testRun: #TestMarsRover #test16 stamp: 'IAR 10/5/2021 00:19:02'!
PASSED!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:19:02'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:19:02'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:19:02'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:19:02'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:19:02'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:19:02'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:19:02'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:19:02'!
PASSED!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:19:02'!
PASSED!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:19:02'!
PASSED!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:19:02'!
PASSED!

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 00:19:02'!
PASSED!

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 00:19:02'!
PASSED!

!testRun: #TestMarsRover #test14 stamp: 'IAR 10/5/2021 00:19:02'!
PASSED!

!testRun: #TestMarsRover #test15 stamp: 'IAR 10/5/2021 00:19:02'!
PASSED!

!testRun: #TestMarsRover #test16 stamp: 'IAR 10/5/2021 00:19:02'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:19:07'!
test17
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #West.
	rover process: 'r'.
	self assert: (rover isAt: 0@0 facing: #North).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:19:42' prior: 50881580!
test17
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #West.
	rover process: 'l'.
	self assert: (rover isAt: 0@0 facing: #South).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:20:01' prior: 50881494!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position - (1@0) ].
		].
	
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position + (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position + (1@0) ].
		].
	
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		(cardinalDirection = #South)
			ifTrue: [ ^cardinalDirection _ #West ].
		(cardinalDirection = #West)
			ifTrue: [ ^cardinalDirection _ #North ].
		].
	
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North)
			ifTrue:	 [ ^cardinalDirection _ #West ].
		(cardinalDirection = #East)
			ifTrue:	 [ ^cardinalDirection _ #North ].
		(cardinalDirection = #South)
			ifTrue:	 [ ^cardinalDirection _ #East ].
		(cardinalDirection = #West)
			ifTrue: [ ^cardinalDirection _ #South ].
		]! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:20:04'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:20:04'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:20:04'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:20:04'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:20:04'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:20:04'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:20:04'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:20:04'!
PASSED!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:20:04'!
PASSED!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:20:04'!
PASSED!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:20:04'!
PASSED!

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 00:20:04'!
PASSED!

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 00:20:04'!
PASSED!

!testRun: #TestMarsRover #test14 stamp: 'IAR 10/5/2021 00:20:04'!
PASSED!

!testRun: #TestMarsRover #test15 stamp: 'IAR 10/5/2021 00:20:04'!
PASSED!

!testRun: #TestMarsRover #test16 stamp: 'IAR 10/5/2021 00:20:04'!
PASSED!

!testRun: #TestMarsRover #test17 stamp: 'IAR 10/5/2021 00:20:04'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:26:45'!
test18
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #North.
	rover process: 'fb'.
	self assert: (rover isAt: 0@0 facing: #South).! !

!testRun: #TestMarsRover #test18 stamp: 'IAR 10/5/2021 00:26:46'!
FAILURE!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:26:53' prior: 50881685!
test18
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #North.
	rover process: 'fb'.
	self assert: (rover isAt: 0@0 facing: #North).! !

!testRun: #TestMarsRover #test18 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test14 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test15 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test16 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test17 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!

!testRun: #TestMarsRover #test18 stamp: 'IAR 10/5/2021 00:26:56'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:27:00' prior: 50881695!
test18
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #North.
	rover process: 'ff'.
	self assert: (rover isAt: 0@0 facing: #North).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:27:06' prior: 50881747!
test18
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #North.
	rover process: 'ff'.
	self assert: (rover isAt: 0@2 facing: #North).! !

!testRun: #TestMarsRover #test18 stamp: 'IAR 10/5/2021 00:27:08'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:29:17' prior: 50881596!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	
	
	(aSequenceOfCommands = 'ff') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@2) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (2@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (0@2) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position - (2@0) ].
		].
	
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position - (1@0) ].
		].
	
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position + (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position + (1@0) ].
		].
	
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		(cardinalDirection = #South)
			ifTrue: [ ^cardinalDirection _ #West ].
		(cardinalDirection = #West)
			ifTrue: [ ^cardinalDirection _ #North ].
		].
	
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North)
			ifTrue:	 [ ^cardinalDirection _ #West ].
		(cardinalDirection = #East)
			ifTrue:	 [ ^cardinalDirection _ #North ].
		(cardinalDirection = #South)
			ifTrue:	 [ ^cardinalDirection _ #East ].
		(cardinalDirection = #West)
			ifTrue: [ ^cardinalDirection _ #South ].
		]! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:29:36' prior: 50881765!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	
	(aSequenceOfCommands = 'f') ifTrue: [ 
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position - (1@0) ].
		].
	
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position + (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position + (1@0) ].
		].
	
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		(cardinalDirection = #South)
			ifTrue: [ ^cardinalDirection _ #West ].
		(cardinalDirection = #West)
			ifTrue: [ ^cardinalDirection _ #North ].
		].
	
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North)
			ifTrue:	 [ ^cardinalDirection _ #West ].
		(cardinalDirection = #East)
			ifTrue:	 [ ^cardinalDirection _ #North ].
		(cardinalDirection = #South)
			ifTrue:	 [ ^cardinalDirection _ #East ].
		(cardinalDirection = #West)
			ifTrue: [ ^cardinalDirection _ #South ].
		]! !

Object subclass: #CardinalDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #CardinalDirection category: 'MarsRover' stamp: 'IAR 10/5/2021 00:30:33'!
Object subclass: #CardinalDirection
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalDirection subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'IAR 10/5/2021 00:43:03'!
CardinalDirection subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalDirection subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'IAR 10/5/2021 00:43:09'!
CardinalDirection subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalDirection subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'IAR 10/5/2021 00:43:12'!
CardinalDirection subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalDirection subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'IAR 10/5/2021 00:43:15'!
CardinalDirection subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!CardinalDirection methodsFor: 'nil' stamp: 'IAR 10/5/2021 00:43:55'!
moveForward: aMarsRover

	self subclassResponsibility! !
!North methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:44:19' overrides: 50881928!
moveForward: aMarsRover

	self subclassResponsibility! !
!East methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:44:19' overrides: 50881928!
moveForward: aMarsRover

	self subclassResponsibility! !
!South methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:44:19' overrides: 50881928!
moveForward: aMarsRover

	self subclassResponsibility! !
!West methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:44:19' overrides: 50881928!
moveForward: aMarsRover

	self subclassResponsibility! !

!methodRemoval: CardinalDirection #moveForward: stamp: 'IAR 10/5/2021 00:44:19'!
moveForward: aMarsRover

	self subclassResponsibility!
!CardinalDirection methodsFor: 'nil' stamp: 'IAR 10/5/2021 00:44:23'!
moveForward: aMarsRover

	self subclassResponsibility! !
!East methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:44:50' prior: 50881938 overrides: 50881957!
moveForward: aMarsRover

	aMarsRover moveForwardFacingEast.! !
!North methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:45:15' prior: 50881933 overrides: 50881957!
moveForward: aMarsRover

	aMarsRover moveForwardFacingNorth.! !
!South methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:45:39' prior: 50881943 overrides: 50881957!
moveForward: aMarsRover

	aMarsRover moveForwardFacingSouth.! !
!West methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:45:53' prior: 50881948 overrides: 50881957!
moveForward: aMarsRover

	aMarsRover moveForwardFacingWest.! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:46:11'!
moveBackwards: aMarsRover

	self subclassResponsibility! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:48:14'!
moveBackward: aMarsRover

	self subclassResponsibility! !

!methodRemoval: CardinalDirection #moveBackwards: stamp: 'IAR 10/5/2021 00:48:14'!
moveBackwards: aMarsRover

	self subclassResponsibility!
!North methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:48:20' overrides: 50881991!
moveBackward: aMarsRover

	self subclassResponsibility! !
!East methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:48:20' overrides: 50881991!
moveBackward: aMarsRover

	self subclassResponsibility! !
!South methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:48:20' overrides: 50881991!
moveBackward: aMarsRover

	self subclassResponsibility! !
!West methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:48:20' overrides: 50881991!
moveBackward: aMarsRover

	self subclassResponsibility! !

!methodRemoval: CardinalDirection #moveBackward: stamp: 'IAR 10/5/2021 00:48:20'!
moveBackward: aMarsRover

	self subclassResponsibility!
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:48:28'!
moveBackward: aMarsRover

	self subclassResponsibility! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:49:04' prior: 50881825!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	
	(aSequenceOfCommands = 'f') ifTrue: [ 
		"(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position - (1@0) ].
		"].
	
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position + (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position + (1@0) ].
		].
	
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		(cardinalDirection = #South)
			ifTrue: [ ^cardinalDirection _ #West ].
		(cardinalDirection = #West)
			ifTrue: [ ^cardinalDirection _ #North ].
		].
	
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North)
			ifTrue:	 [ ^cardinalDirection _ #West ].
		(cardinalDirection = #East)
			ifTrue:	 [ ^cardinalDirection _ #North ].
		(cardinalDirection = #South)
			ifTrue:	 [ ^cardinalDirection _ #East ].
		(cardinalDirection = #West)
			ifTrue: [ ^cardinalDirection _ #South ].
		]! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:49:19'!
rotateRight: aMarsRover

	self subclassResponsibility! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:49:24'!
rotateLeft: aMarsRover

	self subclassResponsibility! !
!North methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:49:33' overrides: 50882084!
rotateLeft: aMarsRover

	self subclassResponsibility! !
!East methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:49:33' overrides: 50882084!
rotateLeft: aMarsRover

	self subclassResponsibility! !
!South methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:49:33' overrides: 50882084!
rotateLeft: aMarsRover

	self subclassResponsibility! !
!West methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:49:33' overrides: 50882084!
rotateLeft: aMarsRover

	self subclassResponsibility! !

!methodRemoval: CardinalDirection #rotateLeft: stamp: 'IAR 10/5/2021 00:49:33'!
rotateLeft: aMarsRover

	self subclassResponsibility!
!North methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:49:38' overrides: 50882079!
rotateRight: aMarsRover

	self subclassResponsibility! !
!East methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:49:38' overrides: 50882079!
rotateRight: aMarsRover

	self subclassResponsibility! !
!South methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:49:38' overrides: 50882079!
rotateRight: aMarsRover

	self subclassResponsibility! !
!West methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:49:38' overrides: 50882079!
rotateRight: aMarsRover

	self subclassResponsibility! !

!methodRemoval: CardinalDirection #rotateRight: stamp: 'IAR 10/5/2021 00:49:38'!
rotateRight: aMarsRover

	self subclassResponsibility!
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:49:43'!
rotateLeft: aMarsRover

	self subclassResponsibility! !
!CardinalDirection methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:49:47'!
rotateRight: aMarsRover

	self subclassResponsibility! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:50:10' prior: 50882030!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	
	(aSequenceOfCommands = 'f') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position - (1@0) ].
		].
	
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position + (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position + (1@0) ].
		].
	
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		(cardinalDirection = #South)
			ifTrue: [ ^cardinalDirection _ #West ].
		(cardinalDirection = #West)
			ifTrue: [ ^cardinalDirection _ #North ].
		].
	
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North)
			ifTrue:	 [ ^cardinalDirection _ #West ].
		(cardinalDirection = #East)
			ifTrue:	 [ ^cardinalDirection _ #North ].
		(cardinalDirection = #South)
			ifTrue:	 [ ^cardinalDirection _ #East ].
		(cardinalDirection = #West)
			ifTrue: [ ^cardinalDirection _ #South ].
		]! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:50:12'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:50:12'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:50:12'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:50:12'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:50:12'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:50:12'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:50:12'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:50:12'!
PASSED!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:50:12'!
PASSED!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:50:12'!
PASSED!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:50:12'!
PASSED!

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 00:50:12'!
PASSED!

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 00:50:12'!
PASSED!

!testRun: #TestMarsRover #test14 stamp: 'IAR 10/5/2021 00:50:12'!
PASSED!

!testRun: #TestMarsRover #test15 stamp: 'IAR 10/5/2021 00:50:12'!
PASSED!

!testRun: #TestMarsRover #test16 stamp: 'IAR 10/5/2021 00:50:12'!
PASSED!

!testRun: #TestMarsRover #test17 stamp: 'IAR 10/5/2021 00:50:12'!
PASSED!

!testRun: #TestMarsRover #test18 stamp: 'IAR 10/5/2021 00:50:12'!
FAILURE!

!testRun: #TestMarsRover #test18 stamp: 'IAR 10/5/2021 00:50:12'!
FAILURE!

!methodRemoval: TestMarsRover #test18 stamp: 'IAR 10/5/2021 00:50:24'!
test18
	
	| rover |
	rover _ MarsRover at: 0@0 facing: #North.
	rover process: 'ff'.
	self assert: (rover isAt: 0@2 facing: #North).!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:50:40'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:50:40'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:50:40'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:50:40'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:50:40'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:50:40'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:50:40'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:50:40'!
PASSED!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:50:40'!
PASSED!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:50:40'!
PASSED!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:50:40'!
PASSED!

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 00:50:40'!
PASSED!

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 00:50:40'!
PASSED!

!testRun: #TestMarsRover #test14 stamp: 'IAR 10/5/2021 00:50:40'!
PASSED!

!testRun: #TestMarsRover #test15 stamp: 'IAR 10/5/2021 00:50:40'!
PASSED!

!testRun: #TestMarsRover #test16 stamp: 'IAR 10/5/2021 00:50:40'!
PASSED!

!testRun: #TestMarsRover #test17 stamp: 'IAR 10/5/2021 00:50:40'!
PASSED!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:51:55' prior: 50882147!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	
	(aSequenceOfCommands = 'f') ifTrue: [
		cardinalDirection moveForward
		].
		"= #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position - (1@0) ].
		"
	
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position + (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position + (1@0) ].
		].
	
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		(cardinalDirection = #South)
			ifTrue: [ ^cardinalDirection _ #West ].
		(cardinalDirection = #West)
			ifTrue: [ ^cardinalDirection _ #North ].
		].
	
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North)
			ifTrue:	 [ ^cardinalDirection _ #West ].
		(cardinalDirection = #East)
			ifTrue:	 [ ^cardinalDirection _ #North ].
		(cardinalDirection = #South)
			ifTrue:	 [ ^cardinalDirection _ #East ].
		(cardinalDirection = #West)
			ifTrue: [ ^cardinalDirection _ #South ].
		]! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:51:57'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:51:57'!
ERROR!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:51:57'!
ERROR!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:51:57'!
PASSED!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:51:57'!
PASSED!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:51:57'!
PASSED!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:51:57'!
ERROR!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:51:57'!
PASSED!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:51:57'!
PASSED!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:51:57'!
PASSED!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:51:57'!
ERROR!

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 00:51:57'!
PASSED!

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 00:51:57'!
PASSED!

!testRun: #TestMarsRover #test14 stamp: 'IAR 10/5/2021 00:51:57'!
PASSED!

!testRun: #TestMarsRover #test15 stamp: 'IAR 10/5/2021 00:51:57'!
PASSED!

!testRun: #TestMarsRover #test16 stamp: 'IAR 10/5/2021 00:51:57'!
PASSED!

!testRun: #TestMarsRover #test17 stamp: 'IAR 10/5/2021 00:51:57'!
PASSED!
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:52:39' prior: 50880209!
test02
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self north.
	rover process: 'f'.
	self deny: (rover isAt: 0@0 facing: self north).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:53:20' prior: 50880102!
test01
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self north.
	rover process: ''.
	self assert: (rover isAt: 0@0 facing: #North).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:53:25' prior: 50882384!
test01
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self north.
	rover process: ''.
	self assert: (rover isAt: 0@0 facing: self north).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:53:35' prior: 50880312!
test03
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self north.
	rover process: 'f'.
	self assert: (rover isAt: 0@1 facing: self north).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:53:42' prior: 50880342!
test04
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self north.
	rover process: 'b'.
	self assert: (rover isAt: 0@-1 facing: self north).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:53:53' prior: 50880411!
test05
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self north.
	rover process: 'r'.
	self assert: (rover isAt: 0@0 facing: self east).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:54:06' prior: 50880432!
test06
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self north.
	rover process: 'l'.
	self assert: (rover isAt: 0@0 facing: self west).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:54:14' prior: 50880498!
test07
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self east.
	rover process: 'f'.
	self assert: (rover isAt: 1@0 facing: #East).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:54:20' prior: 50882432!
test07
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self east.
	rover process: 'f'.
	self assert: (rover isAt: 1@0 facing: self east).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:54:27' prior: 50880542!
test08
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self east.
	rover process: 'b'.
	self assert: (rover isAt: -1@0 facing: self east).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:54:39' prior: 50880653!
test09
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self east.
	rover process: 'r'.
	self assert: (rover isAt: 0@0 facing: self south).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:54:48' prior: 50880784!
test10
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self east.
	rover process: 'l'.
	self assert: (rover isAt: 0@0 facing: #North).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:54:54' prior: 50882464!
test10
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self east.
	rover process: 'l'.
	self assert: (rover isAt: 0@0 facing: self north).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:55:09' prior: 50880847!
test11
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self south.
	rover process: 'f'.
	self assert: (rover isAt: 0@-1 facing: self south).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:55:17' prior: 50880976!
test12
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self south.
	rover process: 'b'.
	self assert: (rover isAt: 0@1 facing: self south).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:55:21' prior: 50881058!
test13
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self south.
	rover process: 'r'.
	self assert: (rover isAt: 0@0 facing: #West).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:55:26' prior: 50882496!
test13
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self south.
	rover process: 'r'.
	self assert: (rover isAt: 0@0 facing: self west).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:55:31' prior: 50881137!
test14
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self south.
	rover process: 'l'.
	self assert: (rover isAt: 0@0 facing: #East).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:55:34' prior: 50882512!
test14
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self south.
	rover process: 'l'.
	self assert: (rover isAt: 0@0 facing: self east).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:55:45' prior: 50881397!
test15
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self west.
	rover process: 'b'.
	self assert: (rover isAt: 1@0 facing: self west).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:55:51' prior: 50881484!
test16
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self west.
	rover process: 'r'.
	self assert: (rover isAt: 0@0 facing: #North).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:55:54' prior: 50882536!
test16
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self west.
	rover process: 'r'.
	self assert: (rover isAt: 0@0 facing: self north).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:56:00' prior: 50881588!
test17
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self west.
	rover process: 'l'.
	self assert: (rover isAt: 0@0 facing: #South).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:56:03' prior: 50882552!
test17
	
	| rover |
	rover _ MarsRover at: 0@0 facing: self west.
	rover process: 'l'.
	self assert: (rover isAt: 0@0 facing: self south).! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:56:25'!
north

	^ North new! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:56:30'!
east

	^ East new! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:56:37'!
west

	^ West new! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:56:40'!
south

	^ West new! !
!TestMarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:56:45' prior: 50882579!
south

	^ South new! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:57:29'!
ERROR!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:57:29'!
ERROR!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:57:29'!
ERROR!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:57:29'!
ERROR!

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test14 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test15 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test16 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test17 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:57:29'!
ERROR!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:57:29'!
ERROR!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:57:29'!
ERROR!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:57:29'!
ERROR!

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test14 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test15 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test16 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test17 stamp: 'IAR 10/5/2021 00:57:29'!
FAILURE!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:57:39'!
ERROR!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 00:58:10' prior: 50882287!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	
	(aSequenceOfCommands = 'f') ifTrue: [
		cardinalDirection moveForward: self
		].
		"= #North)
			ifTrue: [ position _ position + (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position + (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position - (1@0) ].
		"
	
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position + (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position + (1@0) ].
		].
	
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		(cardinalDirection = #South)
			ifTrue: [ ^cardinalDirection _ #West ].
		(cardinalDirection = #West)
			ifTrue: [ ^cardinalDirection _ #North ].
		].
	
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North)
			ifTrue:	 [ ^cardinalDirection _ #West ].
		(cardinalDirection = #East)
			ifTrue:	 [ ^cardinalDirection _ #North ].
		(cardinalDirection = #South)
			ifTrue:	 [ ^cardinalDirection _ #East ].
		(cardinalDirection = #West)
			ifTrue: [ ^cardinalDirection _ #South ].
		]! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:58:13'!
FAILURE!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:58:13'!
ERROR!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:58:13'!
ERROR!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:58:13'!
FAILURE!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:58:13'!
FAILURE!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:58:13'!
FAILURE!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:58:13'!
ERROR!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:58:13'!
FAILURE!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:58:13'!
FAILURE!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:58:13'!
FAILURE!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:58:13'!
ERROR!

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 00:58:13'!
FAILURE!

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 00:58:13'!
FAILURE!

!testRun: #TestMarsRover #test14 stamp: 'IAR 10/5/2021 00:58:13'!
FAILURE!

!testRun: #TestMarsRover #test15 stamp: 'IAR 10/5/2021 00:58:13'!
FAILURE!

!testRun: #TestMarsRover #test16 stamp: 'IAR 10/5/2021 00:58:13'!
FAILURE!

!testRun: #TestMarsRover #test17 stamp: 'IAR 10/5/2021 00:58:13'!
FAILURE!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:58:15'!
ERROR!
!MarsRover methodsFor: 'xxxxxxxx' stamp: 'IAR 10/5/2021 00:58:30'!
moveForwardFacingNorth
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'xxxxxxxx' stamp: 'IAR 10/5/2021 00:59:15' prior: 50882761!
moveForwardFacingNorth
	position _ position + (0@1).! !

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:59:17'!
PASSED!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 00:59:29'!
FAILURE!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 00:59:29'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 00:59:29'!
FAILURE!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 00:59:29'!
FAILURE!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 00:59:29'!
FAILURE!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 00:59:29'!
FAILURE!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:59:29'!
ERROR!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 00:59:29'!
FAILURE!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 00:59:29'!
FAILURE!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 00:59:30'!
FAILURE!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 00:59:30'!
ERROR!

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 00:59:30'!
FAILURE!

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 00:59:30'!
FAILURE!

!testRun: #TestMarsRover #test14 stamp: 'IAR 10/5/2021 00:59:30'!
FAILURE!

!testRun: #TestMarsRover #test15 stamp: 'IAR 10/5/2021 00:59:30'!
FAILURE!

!testRun: #TestMarsRover #test16 stamp: 'IAR 10/5/2021 00:59:30'!
FAILURE!

!testRun: #TestMarsRover #test17 stamp: 'IAR 10/5/2021 00:59:30'!
FAILURE!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 00:59:31'!
ERROR!
!MarsRover methodsFor: 'xxxxxxxx' stamp: 'IAR 10/5/2021 00:59:57'!
moveForwardFacingEast
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'xxxxxxxx' stamp: 'IAR 10/5/2021 01:00:15' prior: 50882815!
moveForwardFacingEast
	position _ position + (1@0).! !
!MarsRover methodsFor: 'xxxxxxxx' stamp: 'IAR 10/5/2021 01:00:18' prior: 50882820!
moveForwardFacingEast
	
	position _ position + (1@0).! !

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 01:00:20'!
FAILURE!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 01:01:31'!
FAILURE!
!MarsRover methodsFor: 'xxxxxxxx' stamp: 'IAR 10/5/2021 01:02:07'!
moveForwardFacingWest
	position _ position - (0@1).! !
!MarsRover methodsFor: 'xxxxxxxx' stamp: 'IAR 10/5/2021 01:02:15'!
moveForwardFacingSouth
	position _ position - (0@1).! !
!MarsRover methodsFor: 'xxxxxxxx' stamp: 'IAR 10/5/2021 01:02:21' prior: 50882834!
moveForwardFacingWest
	position _ position - (1@0).! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 01:02:26' prior: 50882670!
process: aSequenceOfCommands

	(aSequenceOfCommands = '') ifTrue: [ ^self ].
	
	(aSequenceOfCommands = 'f') ifTrue: [
		cardinalDirection moveForward: self
		].
	
	(aSequenceOfCommands = 'b') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^position _ position - (0@1) ].
		(cardinalDirection = #East)
			ifTrue: [ ^position _ position - (1@0) ].
		(cardinalDirection = #South)
			ifTrue: [ ^position _ position + (0@1) ].
		(cardinalDirection = #West)
			ifTrue: [ ^position _ position + (1@0) ].
		].
	
	(aSequenceOfCommands = 'r') ifTrue: [
		(cardinalDirection = #North)
			ifTrue: [ ^cardinalDirection _ #East ].
		(cardinalDirection = #East)
			ifTrue: [ ^cardinalDirection _ #South ].
		(cardinalDirection = #South)
			ifTrue: [ ^cardinalDirection _ #West ].
		(cardinalDirection = #West)
			ifTrue: [ ^cardinalDirection _ #North ].
		].
	
	(aSequenceOfCommands = 'l') ifTrue: [
		(cardinalDirection = #North)
			ifTrue:	 [ ^cardinalDirection _ #West ].
		(cardinalDirection = #East)
			ifTrue:	 [ ^cardinalDirection _ #North ].
		(cardinalDirection = #South)
			ifTrue:	 [ ^cardinalDirection _ #East ].
		(cardinalDirection = #West)
			ifTrue: [ ^cardinalDirection _ #South ].
		]! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 01:02:27'!
FAILURE!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 01:02:27'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 01:02:27'!
FAILURE!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 01:02:27'!
FAILURE!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 01:02:27'!
FAILURE!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 01:02:27'!
FAILURE!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 01:02:27'!
FAILURE!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 01:02:27'!
FAILURE!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 01:02:27'!
FAILURE!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 01:02:27'!
FAILURE!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 01:02:27'!
FAILURE!

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 01:02:27'!
FAILURE!

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 01:02:27'!
FAILURE!

!testRun: #TestMarsRover #test14 stamp: 'IAR 10/5/2021 01:02:27'!
FAILURE!

!testRun: #TestMarsRover #test15 stamp: 'IAR 10/5/2021 01:02:27'!
FAILURE!

!testRun: #TestMarsRover #test16 stamp: 'IAR 10/5/2021 01:02:27'!
FAILURE!

!testRun: #TestMarsRover #test17 stamp: 'IAR 10/5/2021 01:02:27'!
FAILURE!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 01:02:35'!
FAILURE!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 01:02:43'!
FAILURE!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 01:02:51'!
FAILURE!

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 01:02:55'!
FAILURE!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'IAR 10/5/2021 01:04:22' prior: 50880233!
isAt: aPosition facing: aCardinalDirection 
	
	^aPosition = position and: [ aCardinalDirection isKindOf: cardinalDirection class].! !

!testRun: #TestMarsRover #test01 stamp: 'IAR 10/5/2021 01:04:26'!
PASSED!

!testRun: #TestMarsRover #test02 stamp: 'IAR 10/5/2021 01:04:26'!
PASSED!

!testRun: #TestMarsRover #test03 stamp: 'IAR 10/5/2021 01:04:26'!
PASSED!

!testRun: #TestMarsRover #test04 stamp: 'IAR 10/5/2021 01:04:26'!
FAILURE!

!testRun: #TestMarsRover #test05 stamp: 'IAR 10/5/2021 01:04:26'!
FAILURE!

!testRun: #TestMarsRover #test06 stamp: 'IAR 10/5/2021 01:04:26'!
FAILURE!

!testRun: #TestMarsRover #test07 stamp: 'IAR 10/5/2021 01:04:26'!
PASSED!

!testRun: #TestMarsRover #test08 stamp: 'IAR 10/5/2021 01:04:26'!
FAILURE!

!testRun: #TestMarsRover #test09 stamp: 'IAR 10/5/2021 01:04:26'!
FAILURE!

!testRun: #TestMarsRover #test10 stamp: 'IAR 10/5/2021 01:04:26'!
FAILURE!

!testRun: #TestMarsRover #test11 stamp: 'IAR 10/5/2021 01:04:26'!
PASSED!

!testRun: #TestMarsRover #test12 stamp: 'IAR 10/5/2021 01:04:26'!
FAILURE!

!testRun: #TestMarsRover #test13 stamp: 'IAR 10/5/2021 01:04:26'!
FAILURE!

!testRun: #TestMarsRover #test14 stamp: 'IAR 10/5/2021 01:04:26'!
FAILURE!

!testRun: #TestMarsRover #test15 stamp: 'IAR 10/5/2021 01:04:26'!
FAILURE!

!testRun: #TestMarsRover #test16 stamp: 'IAR 10/5/2021 01:04:26'!
FAILURE!

!testRun: #TestMarsRover #test17 stamp: 'IAR 10/5/2021 01:04:26'!
FAILURE!

----QUIT----(5 October 2021 01:05:21) CuisUniversity-4532.image priorSource: 17578706!

----STARTUP---- (5 October 2021 01:05:31) as /home/ignacio/Documents/Facultad/repos-isw1/isw1/vms/main/CuisUniversity-4532.image!


----QUIT----(5 October 2021 01:11:20) CuisUniversity-4532.image priorSource: 17642732!