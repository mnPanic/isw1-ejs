

----QUIT----(13 October 2021 15:20:10) CuisUniversity-4913.image priorSource: 14638157!

----STARTUP---- (13 October 2021 15:20:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:20:10) CuisUniversity-4913.image priorSource: 18661767!

----STARTUP---- (13 October 2021 15:21:02) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:21:02) CuisUniversity-4913.image priorSource: 18661997!

----QUIT----(13 October 2021 15:26:07) CuisUniversity-4913.image priorSource: 14638157!

----STARTUP---- (13 October 2021 15:26:08) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:26:08) CuisUniversity-4913.image priorSource: 18661767!

----STARTUP---- (28 October 2021 16:20:21) as /home/agus/Documents/inge1/linux64/CuisUniversity-4913.image!


----End fileIn of /home/agus/Documents/inge1/isw1-ejs/19-MarsRover-ElRegreso/MarsRover-WithHeading.st----!

Object subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!

!classDefinition: #CartTest category: 'TusLibros-It1' stamp: 'AF 10/28/2021 21:01:23'!
Object subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!

!classDefinition: #CartTest category: 'TusLibros-It1' stamp: 'AF 10/28/2021 21:01:53'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!

!classDefinition: #Cart category: 'TusLibros-It1' stamp: 'AF 10/28/2021 21:03:04'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!
!CartTest methodsFor: 'nil' stamp: 'AF 10/28/2021 21:02:51'!
test01

	| cart |
	cart _ Cart new.
	self assert: cart isEmpty.! !

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:03:40'!
ERROR!
!Cart methodsFor: 'as yet unclasifed' stamp: 'AF 10/28/2021 21:03:53'!
isEmpty
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclasifed' stamp: 'AF 10/28/2021 21:03:59' prior: 50915920!
isEmpty
	^true.! !

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:01'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:01'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:34'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:34'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:36'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:36'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:36'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:36'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:37'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:37'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:37'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:37'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:37'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:37'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:37'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:37'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:38'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:38'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:38'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:38'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:38'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:04:38'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:06:56'!
test02

	| cart |
	cart _ Cart new.
	cart addBook: 'growing object-oriented software guided by tests'.
	self deny: cart isEmpty ! !

!testRun: #CartTest #test02 stamp: 'AF 10/28/2021 21:07:02'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:07:07'!
addBook: aString 
	self shouldBeImplemented.! !

!testRun: #CartTest #test02 stamp: 'AF 10/28/2021 21:08:15'!
ERROR!

!classDefinition: #Cart category: 'TusLibros-It1' stamp: 'AF 10/28/2021 21:08:59'!
Object subclass: #Cart
	instanceVariableNames: 'contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!
!Cart methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:08:56' prior: 50915985!
addBook: aBook

	contents add: aBook.! !

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:09:02'!
PASSED!

!testRun: #CartTest #test02 stamp: 'AF 10/28/2021 21:09:02'!
ERROR!

!testRun: #CartTest #test02 stamp: 'AF 10/28/2021 21:09:02'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:09:33' overrides: 16896425!
initialize

	contents _ OrderedCollection new.! !

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:09:33'!
PASSED!

!testRun: #CartTest #test02 stamp: 'AF 10/28/2021 21:09:33'!
FAILURE!

!testRun: #CartTest #test02 stamp: 'AF 10/28/2021 21:09:33'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:09:53' prior: 50915924!
isEmpty
	
	^contents isEmpty.! !

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:09:56'!
PASSED!

!testRun: #CartTest #test02 stamp: 'AF 10/28/2021 21:09:56'!
PASSED!
!CartTest methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:11:09'!
test03

	| cart aBook |
	cart _ Cart new.
	aBook _ 'growing object-oriented software guided by tests'.
	cart addBook: aBook.
	self assert: (cart contains: aBook).! !

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:11:42'!
PASSED!

!testRun: #CartTest #test02 stamp: 'AF 10/28/2021 21:11:42'!
PASSED!

!testRun: #CartTest #test03 stamp: 'AF 10/28/2021 21:11:42'!
ERROR!

!testRun: #CartTest #test03 stamp: 'AF 10/28/2021 21:11:42'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:11:48'!
contains: aString 
	self shouldBeImplemented.! !

----End fileIn of /home/agus/Documents/inge1/linux64/Packages/TerseGuide.pck.st----!
!Cart methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:12:41' prior: 50916046!
contains: aBook 
	
	contents contains: aBook.! !

!testRun: #CartTest #test03 stamp: 'AF 10/28/2021 21:12:42'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:12:50' prior: 50918976!
contains: aBook 
	
	contents includes: aBook.! !

!testRun: #CartTest #test03 stamp: 'AF 10/28/2021 21:12:52'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:13:24' prior: 50918983!
contains: aBook 
	
	^contents includes: aBook.! !

!testRun: #CartTest #test03 stamp: 'AF 10/28/2021 21:13:25'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:13:47'!
includes: aBook 
	
	^contents includes: aBook.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:13:47' prior: 50916029!
test03

	| cart aBook |
	cart _ Cart new.
	aBook _ 'growing object-oriented software guided by tests'.
	cart addBook: aBook.
	self assert: (cart includes: aBook).! !

!methodRemoval: Cart #contains: stamp: 'AF 10/28/2021 21:13:47'!
contains: aBook 
	
	^contents includes: aBook.!
!CartTest methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:19:15'!
test04

	| cart aBook aCatalog |
	aCatalog _ OrderedCollection new.
	cart _ Cart with: aCatalog.
	aBook _ 'growing object-oriented software guided by tests'.
	cart addBook: aBook.
	self assert: (cart includes: aBook).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:24:39' prior: 50919014!
test04

	| cart aBook aCatalog |
	
	aCatalog _ OrderedCollection new.
	cart _ Cart with: aCatalog.
	aBook _ 'growing object-oriented software guided by tests'.
	
	self should: [ cart addBook: aBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: Cart bookNotInCatalogErrorDescription equals: anError messageText.
			self deny: (cart includes: aBook) ].! !

!testRun: #CartTest #test04 stamp: 'AF 10/28/2021 21:24:42'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'AF 10/28/2021 21:24:51'!
with: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anOrderedCollection ! !
!Cart class methodsFor: 'instance creation' stamp: 'AF 10/28/2021 21:25:46' prior: 50919041!
with: aCatalog
	
	^self new initializeWith: aCatalog ! !

!testRun: #CartTest #test04 stamp: 'AF 10/28/2021 21:25:48'!
ERROR!

!classDefinition: #Cart category: 'TusLibros-It1' stamp: 'AF 10/28/2021 21:25:53'!
Object subclass: #Cart
	instanceVariableNames: 'contents catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!
!Cart methodsFor: 'initialization' stamp: 'AF 10/28/2021 21:25:53'!
initializeWith: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cart methodsFor: 'initialization' stamp: 'AF 10/28/2021 21:26:03' prior: 50919064!
initializeWith: aCatalog 
	
	catalog _ aCatalog.! !

!testRun: #CartTest #test04 stamp: 'AF 10/28/2021 21:26:06'!
FAILURE!
!Cart methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:27:39' prior: 50915999!
addBook: aBook
	
	(catalog includes: aBook) ifFalse: [self error: self class bookNotInCatalogErrorDescription].
	contents add: aBook.! !

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:27:44'!
PASSED!

!testRun: #CartTest #test02 stamp: 'AF 10/28/2021 21:27:44'!
ERROR!

!testRun: #CartTest #test03 stamp: 'AF 10/28/2021 21:27:44'!
ERROR!

!testRun: #CartTest #test04 stamp: 'AF 10/28/2021 21:27:44'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:27:56' prior: 50919077!
addBook: aBook
	
	(catalog includes: aBook) ifFalse: [ self error: self class bookNotInCatalogErrorDescription ].
	contents add: aBook.! !

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:27:56'!
PASSED!

!testRun: #CartTest #test02 stamp: 'AF 10/28/2021 21:27:56'!
ERROR!

!testRun: #CartTest #test03 stamp: 'AF 10/28/2021 21:27:56'!
ERROR!

!testRun: #CartTest #test04 stamp: 'AF 10/28/2021 21:27:56'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:28:54' prior: 50915976!
test02

	| cart aBook aCatalog |
	aBook _ 'growing object-oriented software guided by tests'.
	aCatalog _ OrderedCollection with:  aBook.
	cart _ Cart with: aCatalog.
	
	cart addBook: 'growing object-oriented software guided by tests'.
	self deny: cart isEmpty ! !

!testRun: #CartTest #test02 stamp: 'AF 10/28/2021 21:28:59'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:28:59'!
PASSED!

!testRun: #CartTest #test02 stamp: 'AF 10/28/2021 21:28:59'!
PASSED!

!testRun: #CartTest #test03 stamp: 'AF 10/28/2021 21:28:59'!
ERROR!

!testRun: #CartTest #test04 stamp: 'AF 10/28/2021 21:28:59'!
ERROR!
!CartTest methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:29:11' prior: 50919109!
test02

	| cart aBook aCatalog |
	aBook _ 'growing object-oriented software guided by tests'.
	aCatalog _ OrderedCollection with:  aBook.
	cart _ Cart with: aCatalog.
	cart addBook: 'growing object-oriented software guided by tests'.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:29:23' prior: 50919002!
test03

	| cart aBook aCatalog |
	aBook _ 'growing object-oriented software guided by tests'.
	aCatalog _ OrderedCollection with:  aBook.
	cart _ Cart with: aCatalog.
	cart addBook: aBook.
	self assert: (cart includes: aBook).! !

!testRun: #CartTest #test03 stamp: 'AF 10/28/2021 21:29:28'!
PASSED!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:29:28'!
PASSED!

!testRun: #CartTest #test02 stamp: 'AF 10/28/2021 21:29:28'!
PASSED!

!testRun: #CartTest #test03 stamp: 'AF 10/28/2021 21:29:28'!
PASSED!

!testRun: #CartTest #test04 stamp: 'AF 10/28/2021 21:29:28'!
ERROR!

!testRun: #CartTest #test04 stamp: 'AF 10/28/2021 21:29:28'!
ERROR!
!Cart class methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:29:48'!
bookNotInCatalogErrorDescription
	self shouldBeImplemented.! !
!Cart class methodsFor: 'as yet unclassified' stamp: 'AF 10/28/2021 21:30:29' prior: 50919167!
bookNotInCatalogErrorDescription
	
	^'Book not in catalog'! !

!testRun: #CartTest #test04 stamp: 'AF 10/28/2021 21:30:34'!
FAILURE!

!testRun: #CartTest #test01 stamp: 'AF 10/28/2021 21:30:47'!
PASSED!

!testRun: #CartTest #test02 stamp: 'AF 10/28/2021 21:30:47'!
PASSED!

!testRun: #CartTest #test03 stamp: 'AF 10/28/2021 21:30:47'!
PASSED!

!testRun: #CartTest #test04 stamp: 'AF 10/28/2021 21:30:47'!
PASSED!

----SNAPSHOT----(28 October 2021 21:43:37) CuisUniversity-4913.image priorSource: 18661997!

----SNAPSHOT----(30 October 2021 13:55:06) CuisUniversity-4913.image priorSource: 18821382!

----STARTUP---- (1 November 2021 19:16:23) as /home/ignacio/Documents/Facultad/repos-isw1/isw1/vms/tus-libros-it2-vm/CuisUniversity-4913.image!


----End fileIn of /home/ignacio/Documents/Facultad/repos-isw1/isw1-ejs/20-TusLibros/it1/TusLibros-It1.st----!

TestCase subclass: #CheckoutTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!

!classDefinition: #CheckoutTest category: 'TusLibros-It1' stamp: 'IAR 11/1/2021 19:21:22'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!
!Cart methodsFor: 'adding' stamp: 'IAR 11/1/2021 19:22:24'!
quantity: aQuantity addBook: aBook 
	
	self assertBookIncludedInCatalog: aBook.
	self assertQuantityIsPositive: aQuantity.
	
	contents add: aBook withOccurrences: aQuantity .! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:22:24' prior: 50914893!
test05CartIncludesAllOccurrencesOfBookAfterAdding

	| cart book catalog quantity |
	
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with:  book.
	quantity _ 5.
	
	cart _ Cart with: catalog.
	cart quantity: book addBook: quantity.
	
	self assert: quantity equals: (cart occurrencesOf: book).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:22:24' prior: 50914943!
assertAdding: aBook withQuantity: aQuantity to: aCart raises: anErrorMessage.

	self should: [ aCart quantity: aBook addBook: aQuantity ]
		raise: Error -  MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anErrorMessage equals: anError messageText .
			self deny: (aCart includes: aBook) ] ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:22:24' prior: 50914873!
test03CartIncludesBookAfterAdding

	| cart book catalog |

	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with:  book.
	cart _ Cart with: catalog.
	cart quantity: book addBook: 1.
	
	self assert: (cart includes: book).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:22:24' prior: 50914905!
test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes

	"paso de una pero lo dejamos porque no sabiamos como funcioanaba el bag"
	| cart book catalog quantity |
	
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with:  book.
	quantity _ 5.
	
	cart _ Cart with: catalog.
	cart quantity: book addBook: quantity.
	cart quantity: book addBook: quantity.
	
	self assert: (quantity*2) equals: (cart occurrencesOf: book).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:22:24' prior: 50914863!
test02CartWithABookShouldNotBeEmpty

	| cart book catalog |
	
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with:  book.
	cart _ Cart with: catalog.
	cart quantity: book addBook: 1.
	
	self deny: cart isEmpty ! !

!methodRemoval: Cart #addBook:quantity: stamp: 'IAR 11/1/2021 19:22:24'!
addBook: aBook quantity: aQuantity 
	
	self assertBookIncludedInCatalog: aBook.
	self assertQuantityIsPositive: aQuantity.
	
	contents add: aBook withOccurrences: aQuantity .!
!Cart methodsFor: 'adding' stamp: 'IAR 11/1/2021 19:22:34' prior: 50915046!
quantity: aQuantity addBook: aProduct 
	
	self assertBookIncludedInCatalog: aProduct.
	self assertQuantityIsPositive: aQuantity.
	
	contents add: aProduct withOccurrences: aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'IAR 11/1/2021 19:22:53'!
add: aQuantity of: aProduct 
	
	self assertBookIncludedInCatalog: aProduct.
	self assertQuantityIsPositive: aQuantity.
	
	contents add: aProduct withOccurrences: aQuantity .! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:22:53' prior: 50915068!
assertAdding: aBook withQuantity: aQuantity to: aCart raises: anErrorMessage.

	self should: [ aCart add: aBook of: aQuantity ]
		raise: Error -  MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anErrorMessage equals: anError messageText .
			self deny: (aCart includes: aBook) ] ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:22:53' prior: 50915109!
test02CartWithABookShouldNotBeEmpty

	| cart book catalog |
	
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with:  book.
	cart _ Cart with: catalog.
	cart add: book of: 1.
	
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:22:53' prior: 50915055!
test05CartIncludesAllOccurrencesOfBookAfterAdding

	| cart book catalog quantity |
	
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with:  book.
	quantity _ 5.
	
	cart _ Cart with: catalog.
	cart add: book of: quantity.
	
	self assert: quantity equals: (cart occurrencesOf: book).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:22:54' prior: 50915081!
test03CartIncludesBookAfterAdding

	| cart book catalog |

	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with:  book.
	cart _ Cart with: catalog.
	cart add: book of: 1.
	
	self assert: (cart includes: book).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:22:54' prior: 50915092!
test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes

	"paso de una pero lo dejamos porque no sabiamos como funcioanaba el bag"
	| cart book catalog quantity |
	
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with:  book.
	quantity _ 5.
	
	cart _ Cart with: catalog.
	cart add: book of: quantity.
	cart add: book of: quantity.
	
	self assert: (quantity*2) equals: (cart occurrencesOf: book).! !

!methodRemoval: Cart #quantity:addBook: stamp: 'IAR 11/1/2021 19:22:54'!
quantity: aQuantity addBook: aProduct 
	
	self assertBookIncludedInCatalog: aProduct.
	self assertQuantityIsPositive: aQuantity.
	
	contents add: aProduct withOccurrences: aQuantity .!

!classDefinition: #Cashier category: 'TusLibros-It1' stamp: 'IAR 11/1/2021 19:30:56'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!
!CheckoutTest methodsFor: 'nil' stamp: 'IAR 11/1/2021 19:30:42'!
test01

	| cart cashier catalog |
	cart _ self createCartWith: catalog. 
	cashier _ self createCashier.
	
	self should: [ cashier checkout: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 19:32:00'!
ERROR!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:32:09'!
createCartWith: anUndefinedObject 
	self shouldBeImplemented.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:34:53' prior: 50915220!
test01

	| cart cashier |
	cart _ self createCart. 
	cashier _ self createCashier.
	
	self should: [ cashier checkout: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 19:35:00'!
ERROR!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:35:05'!
createCart
	self shouldBeImplemented.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:35:25' prior: 50915255!
createCart
	
	^ Cart with: self defaultCatalog.! !

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 19:35:27'!
ERROR!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:35:37'!
defaultCatalog
	self shouldBeImplemented.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:36:02' prior: 50915267!
defaultCatalog
	
	^ {self validBook}.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:36:27' prior: 50915272!
defaultCatalog
	
	^ Set with: self validBook.! !

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 19:36:28'!
ERROR!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:36:34'!
validBook
	self shouldBeImplemented.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:36:46' prior: 50915284!
validBook
	
	^ 'validBook'.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:37:08'!
productSoldByTheStore
	
	^ 'validBook'.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:37:08' prior: 50915277!
defaultCatalog
	
	^ Set with: self productSoldByTheStore.! !

!methodRemoval: CheckoutTest #validBook stamp: 'IAR 11/1/2021 19:37:08'!
validBook
	
	^ 'validBook'.!

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 19:37:17'!
ERROR!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:37:23'!
createCashier
	self shouldBeImplemented.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:37:31' prior: 50915308!
createCashier
	
	^ Cashier new.! !

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 19:37:32'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:37:44'!
checkout: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:38:20' prior: 50915319!
checkout: aCart 
	
	self error: self class emptyCartErrorDescription.! !

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 19:38:21'!
ERROR!
!Cashier class methodsFor: 'error descriptions' stamp: 'IAR 11/1/2021 19:38:50'!
emptyCartErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'IAR 11/1/2021 19:39:15' prior: 50915332!
emptyCartErrorDescription
	
	^ 'Cannot checkout empty cart'! !
!Cashier class methodsFor: 'error descriptions' stamp: 'IAR 11/1/2021 19:39:22' prior: 50915337!
emptyCartErrorDescription
	
	^ 'Cannot checkout empty cart'.! !

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 19:39:23'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 19:39:23'!
PASSED!
!Cart class methodsFor: 'instance creation' stamp: 'IAR 11/1/2021 19:40:06'!
acceptingProductsFrom: aCatalog
	
	^self new initializeWith: aCatalog ! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:40:06' prior: 50915298!
defaultCatalog
	
	^ Set acceptingProductsFrom: self productSoldByTheStore.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:40:06' prior: 50914883!
test04CantAddBookNotIncludedInCatalog

	| cart catalog |
	
	catalog _ OrderedCollection new.
	cart _ Cart acceptingProductsFrom: catalog.
	
	self assertAdding: self bookGrowingOOSoft 
		withQuantity: 1 
		to: cart 
		raises: Cart bookNotInCatalogErrorDescription.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:40:06' prior: 50914921!
test07CantAddBookWithZeroQuantity

	| cart book catalog |
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection acceptingProductsFrom: book.
	cart _ Cart acceptingProductsFrom: catalog.
	
	self assertAdding: book 
		withQuantity: 0 
		to: cart 
		raises: Cart invalidQuantityErrorDescription.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:40:06' prior: 50915167!
test05CartIncludesAllOccurrencesOfBookAfterAdding

	| cart book catalog quantity |
	
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection acceptingProductsFrom:  book.
	quantity _ 5.
	
	cart _ Cart acceptingProductsFrom: catalog.
	cart add: book of: quantity.
	
	self assert: quantity equals: (cart occurrencesOf: book).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:40:06' prior: 50915260!
createCart
	
	^ Cart acceptingProductsFrom: self defaultCatalog.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:40:06' prior: 50915180!
test03CartIncludesBookAfterAdding

	| cart book catalog |

	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection acceptingProductsFrom:  book.
	cart _ Cart acceptingProductsFrom: catalog.
	cart add: book of: 1.
	
	self assert: (cart includes: book).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:40:06' prior: 50914932!
test08CantAddBookWithNegativeQuantity

	| cart book catalog |
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection acceptingProductsFrom: book.
	cart _ Cart acceptingProductsFrom: catalog.
	
	self assertAdding: book 
		withQuantity: -1 
		to: cart 
		raises: Cart invalidQuantityErrorDescription.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:40:06' prior: 50915157!
test02CartWithABookShouldNotBeEmpty

	| cart book catalog |
	
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection acceptingProductsFrom:  book.
	cart _ Cart acceptingProductsFrom: catalog.
	cart add: book of: 1.
	
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:40:06' prior: 50915190!
test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes

	"paso de una pero lo dejamos porque no sabiamos como funcioanaba el bag"
	| cart book catalog quantity |
	
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection acceptingProductsFrom:  book.
	quantity _ 5.
	
	cart _ Cart acceptingProductsFrom: catalog.
	cart add: book of: quantity.
	cart add: book of: quantity.
	
	self assert: (quantity*2) equals: (cart occurrencesOf: book).! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:40:06' prior: 50914856!
test01NewCartIsEmpty

	| cart catalog |

	catalog _ OrderedCollection new.
	cart _ Cart acceptingProductsFrom: catalog.
	
	self assert: cart isEmpty.! !

!methodRemoval: Cart class #with: stamp: 'IAR 11/1/2021 19:40:06'!
with: aCatalog
	
	^self new initializeWith: aCatalog !
!Cart methodsFor: 'assertions' stamp: 'IAR 11/1/2021 19:40:32' prior: 50914990!
assertQuantityIsPositive: aQuantity

	^aQuantity strictlyPositive ifTrue: [ self error: self class invalidQuantityErrorDescription ]! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'IAR 11/1/2021 19:40:37'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'IAR 11/1/2021 19:40:37'!
ERROR!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'IAR 11/1/2021 19:40:37'!
ERROR!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'IAR 11/1/2021 19:40:37'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'IAR 11/1/2021 19:40:37'!
ERROR!

!testRun: #CartTest #test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes stamp: 'IAR 11/1/2021 19:40:37'!
ERROR!

!testRun: #CartTest #test07CantAddBookWithZeroQuantity stamp: 'IAR 11/1/2021 19:40:37'!
ERROR!

!testRun: #CartTest #test08CantAddBookWithNegativeQuantity stamp: 'IAR 11/1/2021 19:40:37'!
ERROR!

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 19:40:37'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'IAR 11/1/2021 19:42:15' prior: 50915434!
test02CartWithABookShouldNotBeEmpty

	| cart book catalog |
	
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with: book.
	cart _ Cart acceptingProductsFrom: catalog.
	cart add: book of: 1.
	
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'IAR 11/1/2021 19:42:28' prior: 50915409!
test03CartIncludesBookAfterAdding

	| cart book catalog |

	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with: book.
	cart _ Cart acceptingProductsFrom: catalog.
	cart add: book of: 1.
	
	self assert: (cart includes: book).! !
!CartTest methodsFor: 'tests' stamp: 'IAR 11/1/2021 19:42:44' prior: 50915389!
test05CartIncludesAllOccurrencesOfBookAfterAdding

	| cart book catalog quantity |
	
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with: book.
	quantity _ 5.
	
	cart _ Cart acceptingProductsFrom: catalog.
	cart add: book of: quantity.
	
	self assert: quantity equals: (cart occurrencesOf: book).! !
!CartTest methodsFor: 'tests' stamp: 'IAR 11/1/2021 19:42:51' prior: 50915445!
test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes

	"paso de una pero lo dejamos porque no sabiamos como funcioanaba el bag"
	| cart book catalog quantity |
	
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with: book.
	quantity _ 5.
	
	cart _ Cart acceptingProductsFrom: catalog.
	cart add: book of: quantity.
	cart add: book of: quantity.
	
	self assert: (quantity*2) equals: (cart occurrencesOf: book).! !
!CartTest methodsFor: 'tests' stamp: 'IAR 11/1/2021 19:43:01' prior: 50915376!
test07CantAddBookWithZeroQuantity

	| cart book catalog |
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with: book.
	cart _ Cart acceptingProductsFrom: catalog.
	
	self assertAdding: book 
		withQuantity: 0 
		to: cart 
		raises: Cart invalidQuantityErrorDescription.! !
!CartTest methodsFor: 'tests' stamp: 'IAR 11/1/2021 19:43:08' prior: 50915421!
test08CantAddBookWithNegativeQuantity

	| cart book catalog |
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with: book.
	cart _ Cart acceptingProductsFrom: catalog.
	
	self assertAdding: book 
		withQuantity: -1 
		to: cart 
		raises: Cart invalidQuantityErrorDescription.! !

!testRun: #CartTest #test08CantAddBookWithNegativeQuantity stamp: 'IAR 11/1/2021 19:43:12'!
FAILURE!

!testRun: #CartTest #test08CantAddBookWithNegativeQuantity stamp: 'IAR 11/1/2021 19:43:16'!
FAILURE!

!testRun: #CartTest #test08CantAddBookWithNegativeQuantity stamp: 'IAR 11/1/2021 19:44:45'!
FAILURE!

!testRun: #CartTest #test07CantAddBookWithZeroQuantity stamp: 'IAR 11/1/2021 19:45:35'!
FAILURE!

!testRun: #CartTest #test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes stamp: 'IAR 11/1/2021 19:45:43'!
ERROR!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'IAR 11/1/2021 19:46:32'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'IAR 11/1/2021 19:46:32'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'IAR 11/1/2021 19:46:32'!
ERROR!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'IAR 11/1/2021 19:46:32'!
ERROR!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'IAR 11/1/2021 19:46:32'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'IAR 11/1/2021 19:46:32'!
ERROR!

!testRun: #CartTest #test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes stamp: 'IAR 11/1/2021 19:46:32'!
ERROR!

!testRun: #CartTest #test07CantAddBookWithZeroQuantity stamp: 'IAR 11/1/2021 19:46:32'!
FAILURE!

!testRun: #CartTest #test08CantAddBookWithNegativeQuantity stamp: 'IAR 11/1/2021 19:46:32'!
FAILURE!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'IAR 11/1/2021 19:46:40'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'IAR 11/1/2021 19:46:45'!
ERROR!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'IAR 11/1/2021 19:46:45'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'IAR 11/1/2021 19:48:51' prior: 50915509!
test02CartWithABookShouldNotBeEmpty

	| cart book catalog |
	
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with: book.
	cart _ Cart acceptingProductsFrom: catalog.
	cart add: 1 of: book.
	
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'IAR 11/1/2021 19:49:03' prior: 50915519!
test03CartIncludesBookAfterAdding

	| cart book catalog |

	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with: book.
	cart _ Cart acceptingProductsFrom: catalog.
	cart add: 1 of: book.
	
	self assert: (cart includes: book).! !
!CartTest methodsFor: 'tests' stamp: 'IAR 11/1/2021 19:49:25' prior: 50915530!
test05CartIncludesAllOccurrencesOfBookAfterAdding

	| cart book catalog quantity |
	
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with: book.
	quantity _ 5.
	
	cart _ Cart acceptingProductsFrom: catalog.
	cart add: quantity of: book.
	
	self assert: quantity equals: (cart occurrencesOf: book).! !
!CartTest methodsFor: 'tests' stamp: 'IAR 11/1/2021 19:49:33' prior: 50915543!
test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes

	"paso de una pero lo dejamos porque no sabiamos como funcioanaba el bag"
	| cart book catalog quantity |
	
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with: book.
	quantity _ 5.
	
	cart _ Cart acceptingProductsFrom: catalog.
	cart add: quantity of: book.
	cart add: book of: quantity.
	
	self assert: (quantity*2) equals: (cart occurrencesOf: book).! !
!CartTest methodsFor: 'tests' stamp: 'IAR 11/1/2021 19:49:43' prior: 50915670!
test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes

	"paso de una pero lo dejamos porque no sabiamos como funcioanaba el bag"
	| cart book catalog quantity |
	
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with: book.
	quantity _ 5.
	
	cart _ Cart acceptingProductsFrom: catalog.
	cart add: quantity of: book.
	cart add: quantity of: book.
	
	self assert: (quantity*2) equals: (cart occurrencesOf: book).! !
!CartTest methodsFor: 'assertions' stamp: 'IAR 11/1/2021 19:50:04' prior: 50915144!
assertAdding: aBook withQuantity: aQuantity to: aCart raises: anErrorMessage.

	self should: [ aCart add: aQuantity of: aBook]
		raise: Error -  MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anErrorMessage equals: anError messageText .
			self deny: (aCart includes: aBook) ] ! !
!CartTest methodsFor: 'assertions' stamp: 'IAR 11/1/2021 19:50:10' prior: 50915703!
assertAdding: aBook withQuantity: aQuantity to: aCart raises: anErrorMessage.

	self should: [ aCart add: aQuantity of: aBook ]
		raise: Error -  MessageNotUnderstood
		withExceptionDo: [ :anError | 
			self assert: anErrorMessage equals: anError messageText .
			self deny: (aCart includes: aBook) ] ! !
!CartTest methodsFor: 'books' stamp: 'IAR 11/1/2021 19:50:18' prior: 50914955!
bookGrowingOOSoft

	^'growing object-oriented software guided by tests'.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'IAR 11/1/2021 19:50:22'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'IAR 11/1/2021 19:50:22'!
ERROR!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'IAR 11/1/2021 19:50:22'!
ERROR!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'IAR 11/1/2021 19:50:22'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'IAR 11/1/2021 19:50:22'!
ERROR!

!testRun: #CartTest #test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes stamp: 'IAR 11/1/2021 19:50:22'!
ERROR!

!testRun: #CartTest #test07CantAddBookWithZeroQuantity stamp: 'IAR 11/1/2021 19:50:22'!
FAILURE!

!testRun: #CartTest #test08CantAddBookWithNegativeQuantity stamp: 'IAR 11/1/2021 19:50:22'!
FAILURE!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'IAR 11/1/2021 19:50:27'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'IAR 11/1/2021 19:50:44' prior: 50915474!
assertQuantityIsPositive: aQuantity

	^aQuantity strictlyPositive ifFalse: [ self error: self class invalidQuantityErrorDescription ]! !

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'IAR 11/1/2021 19:50:45'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'IAR 11/1/2021 19:50:46'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'IAR 11/1/2021 19:50:46'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'IAR 11/1/2021 19:50:46'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'IAR 11/1/2021 19:50:46'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'IAR 11/1/2021 19:50:46'!
PASSED!

!testRun: #CartTest #test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes stamp: 'IAR 11/1/2021 19:50:46'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithZeroQuantity stamp: 'IAR 11/1/2021 19:50:46'!
PASSED!

!testRun: #CartTest #test08CantAddBookWithNegativeQuantity stamp: 'IAR 11/1/2021 19:50:46'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 19:50:58'!
ERROR!

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 19:51:10'!
ERROR!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:51:31' prior: 50915358!
defaultCatalog
	
	^ Set with: self productSoldByTheStore.! !

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 19:51:39'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 19:51:39'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 19:51:43'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 19:51:43'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:52:07'!
test02

	| cart cashier |
	cart _ self createCart. 
	cashier _ self createCashier.
	
	self should: [ cashier checkout: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !

!methodRemoval: CheckoutTest #createCartWith: stamp: 'IAR 11/1/2021 19:53:07'!
createCartWith: anUndefinedObject 
	self shouldBeImplemented.!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:56:10' prior: 50915313!
createCashier
	
	^ Cashier sourcingPricesFrom: self defaultPriceList.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:58:05' prior: 50915817!
test02

	| cart cashier |
	cart _ self createCart. 
	cashier _ self createCashier.
	
	self assert: 100 equals: cashier checkout: cart.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:58:13' prior: 50915840!
test02

	| cart cashier |
	cart _ self createCart. 
	cashier _ self createCashier.
	
	self assert: 100 equals: (cashier checkout: cart).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:59:18' prior: 50915848!
test02

	| cart cashier |
	cart _ self createCart. 
	cashier _ self createCashier.
	
	self assert: self productSoldByTheStorePrice equals: (cashier checkout: cart).! !

!testRun: #CheckoutTest #test02 stamp: 'IAR 11/1/2021 19:59:22'!
ERROR!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 19:59:28'!
defaultPriceList
	self shouldBeImplemented.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:00:04' prior: 50915834!
createCashier
	
	"^ Cashier sourcingPricesFrom: self defaultPriceList."
	^ Cashier new.! !

!testRun: #CheckoutTest #test02 stamp: 'IAR 11/1/2021 20:00:09'!
ERROR!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:00:15'!
productSoldByTheStorePrice
	self shouldBeImplemented.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:00:33' prior: 50915880!
productSoldByTheStorePrice
	
	^ 100.! !

!testRun: #CheckoutTest #test02 stamp: 'IAR 11/1/2021 20:00:35'!
ERROR!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:00:50' prior: 50915856!
test02

	| cart cashier |
	cart _ self createCart.
	cashier _ self createCashier.
	
	self assert: self productSoldByTheStorePrice equals: (cashier checkout: cart).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:01:20' prior: 50915892!
test02

	| cart cashier |
	cart _ self createCart.
	cashier _ self createCashier.
	
	cart add: 1 of: self productSoldByTheStore.
	self assert: self productSoldByTheStorePrice equals: (cashier checkout: cart).! !

!testRun: #CheckoutTest #test02 stamp: 'IAR 11/1/2021 20:01:28'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:02:11' prior: 50915324!
checkout: aCart 
	
	aCart isEmpty ifTrue: [ self error: self class emptyCartErrorDescription ].! !

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 20:02:15'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'IAR 11/1/2021 20:02:15'!
FAILURE!

!testRun: #CheckoutTest #test02 stamp: 'IAR 11/1/2021 20:02:15'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:03:07' prior: 50915913!
checkout: aCart 
	
	aCart isEmpty ifTrue: [ self error: self class emptyCartErrorDescription ].
	^ 100.! !

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 20:03:17'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'IAR 11/1/2021 20:03:17'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:03:33' prior: 50915901!
test02

	| cart cashier |
	cart _ self createCart.
	cashier _ self createCashier.
	
	cart add: 1 of: self productSoldByTheStore.
	
	self assert: self productSoldByTheStorePrice equals: (cashier checkout: cart).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:05:42'!
test03

	| cart cashier quantity |
	cart _ self createCart.
	cashier _ self createCashier.
	quantity _ 5.
	
	cart add: quantity of: self productSoldByTheStore.
	
	self assert: (quantity * self productSoldByTheStorePrice) equals: (cashier checkout: cart).! !

!testRun: #CheckoutTest #test03 stamp: 'IAR 11/1/2021 20:05:45'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:13:38' prior: 50915926!
checkout: aCart 
	
	aCart isEmpty ifTrue: [ self error: self class emptyCartErrorDescription ].
	^ aCart totalPriceXX: 100.! !

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 20:13:46'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'IAR 11/1/2021 20:13:46'!
ERROR!

!testRun: #CheckoutTest #test03 stamp: 'IAR 11/1/2021 20:13:46'!
ERROR!

!testRun: #CheckoutTest #test02 stamp: 'IAR 11/1/2021 20:13:55'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:14:09'!
totalPriceXX: aSmallInteger 
	self shouldBeImplemented.! !

----End fileIn of /home/ignacio/Documents/Facultad/repos-isw1/isw1/vms/tus-libros-it2-vm/Packages/TerseGuide.pck.st----!
!Cart methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:17:35' prior: 50915977!
totalPriceXX: aPrice

	^ contents sum: [ :aProduct | aPrice ].! !

!testRun: #CheckoutTest #test02 stamp: 'IAR 11/1/2021 20:17:36'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'IAR 11/1/2021 20:17:41'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 20:17:43'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'IAR 11/1/2021 20:17:43'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'IAR 11/1/2021 20:17:43'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:20:46'!
test04

	| cart cashier quantity |
	cart _ self createCart.
	cashier _ self createCashier.
	quantity _ 5.
	
	cart add: quantity of: self productSoldByTheStore.
	cart add: 1 of: 'otherProductSoldByTheStore'.

	
	self assert: 550 equals: (cashier checkout: cart).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:21:06'!
otherProductSoldByTheStore

	^ 'otherProductSoldByTheStore'! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:21:06' prior: 50918925!
test04

	| cart cashier quantity |
	cart _ self createCart.
	cashier _ self createCashier.
	quantity _ 5.
	
	cart add: quantity of: self productSoldByTheStore.
	cart add: 1 of: self otherProductSoldByTheStore.

	
	self assert: 550 equals: (cashier checkout: cart).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:21:24' prior: 50918936!
otherProductSoldByTheStore

	^ 'Platero y Yo'.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:21:31'!
otherProductSoldByTheStorePrice

	^ 50.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:21:51' prior: 50915803!
defaultCatalog
	
	^ Set
		with: self productSoldByTheStore
		with: self otherProductSoldByTheStore.! !

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 20:21:55'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'IAR 11/1/2021 20:21:55'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'IAR 11/1/2021 20:21:55'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'IAR 11/1/2021 20:21:55'!
FAILURE!

!testRun: #CheckoutTest #test04 stamp: 'IAR 11/1/2021 20:21:55'!
FAILURE!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:24:51' prior: 50915872!
createCashier
	
	^ Cashier sourcingPricesFrom: self defaultPriceList.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:26:03' prior: 50915867!
defaultPriceList
	
	^ { self productSoldByTheStore -> self productSoldByTheStorePrice }.! !

{ self productSoldByTheStore -> self productSoldByTheStorePrice }!

self productSoldByTheStore -> self productSoldByTheStorePrice !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:28:02' prior: 50918987!
defaultPriceList
	
	^ self productSoldByTheStore! !

	^ self productSoldByTheStore!

self productSoldByTheStore.!

'hola' -> 100!

{'hola' -> 100}!

{'hola' -> 100. 'hola' -> 100}!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:31:04' prior: 50918998!
defaultPriceList
	
	^ Dictionary new add: (self productSoldByTheStore -> self productSoldByTheStorePrice )! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:31:57' prior: 50919007!
defaultPriceList
	
	^ Dictionary new add: (self productSoldByTheStore -> self productSoldByTheStorePrice);
		add: (self otherProductSoldByTheStore -> self otherProductSoldByTheStorePrice); yourself! !

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 20:32:13'!
ERROR!

!testRun: #CheckoutTest #test02 stamp: 'IAR 11/1/2021 20:32:13'!
ERROR!

!testRun: #CheckoutTest #test03 stamp: 'IAR 11/1/2021 20:32:13'!
ERROR!

!testRun: #CheckoutTest #test04 stamp: 'IAR 11/1/2021 20:32:13'!
ERROR!

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 20:32:19'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'IAR 11/1/2021 20:32:25'!
sourcingPricesFrom: aDictionary 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeSourcingPricesFrom: aDictionary ! !
!Cashier class methodsFor: 'instance creation' stamp: 'IAR 11/1/2021 20:32:46' prior: 50919035!
sourcingPricesFrom: aPriceList 

	^self new initializeSourcingPricesFrom: aPriceList ! !

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 20:32:47'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros-It1' stamp: 'IAR 11/1/2021 20:33:00'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!
!Cashier methodsFor: 'initialization' stamp: 'IAR 11/1/2021 20:33:00'!
initializeSourcingPricesFrom: aPriceList 
	self shouldBeImplemented.
	priceList := aPriceList.! !
!Cashier methodsFor: 'initialization' stamp: 'IAR 11/1/2021 20:33:07' prior: 50919059!
initializeSourcingPricesFrom: aPriceList 
	
	priceList := aPriceList.! !

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 20:33:08'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 20:33:10'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'IAR 11/1/2021 20:33:10'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'IAR 11/1/2021 20:33:10'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'IAR 11/1/2021 20:33:10'!
FAILURE!

!testRun: #CheckoutTest #test04 stamp: 'IAR 11/1/2021 20:33:10'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:33:29' prior: 50915961!
checkout: aCart 
	
	aCart isEmpty ifTrue: [ self error: self class emptyCartErrorDescription ].
	^ aCart totalPriceXX: priceList.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:33:42' prior: 50918908!
totalPriceXX: aPriceList

	^ contents sum: [ :aProduct | aPriceList ].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'IAR 11/1/2021 20:36:23' prior: 50919092!
totalPriceXX: aPriceList

	^ contents sum: [ :aProduct | aPriceList at: aProduct 
		ifAbsent: [ self error: 'Producto no en catalogo' ] ].! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'IAR 11/1/2021 20:36:26'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'IAR 11/1/2021 20:36:26'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'IAR 11/1/2021 20:36:26'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'IAR 11/1/2021 20:36:26'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'IAR 11/1/2021 20:36:26'!
PASSED!

!testRun: #CartTest #test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes stamp: 'IAR 11/1/2021 20:36:26'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithZeroQuantity stamp: 'IAR 11/1/2021 20:36:26'!
PASSED!

!testRun: #CartTest #test08CantAddBookWithNegativeQuantity stamp: 'IAR 11/1/2021 20:36:26'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'IAR 11/1/2021 20:36:29'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'IAR 11/1/2021 20:36:29'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'IAR 11/1/2021 20:36:29'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'IAR 11/1/2021 20:36:29'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'IAR 11/1/2021 20:36:29'!
PASSED!

!testRun: #CartTest #test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes stamp: 'IAR 11/1/2021 20:36:29'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithZeroQuantity stamp: 'IAR 11/1/2021 20:36:29'!
PASSED!

!testRun: #CartTest #test08CantAddBookWithNegativeQuantity stamp: 'IAR 11/1/2021 20:36:29'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'IAR 11/1/2021 20:36:29'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'IAR 11/1/2021 20:36:29'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'IAR 11/1/2021 20:36:29'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'IAR 11/1/2021 20:36:29'!
PASSED!

----QUIT----(1 November 2021 21:44:12) CuisUniversity-4913.image priorSource: 18661997!

----STARTUP---- (1 November 2021 23:34:07) as /home/mnpanic/Documents/dc/ing1/cuis/cuis-tuslibros/CuisUniversity-4913.image!


----End fileIn of /home/mnpanic/repos/uba/ing1-repos/isw1-ejs/20-TusLibros/it2/TusLibros-It2.st----!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/1/2021 23:37:25'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/1/2021 23:37:25'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/1/2021 23:37:25'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/1/2021 23:37:25'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/1/2021 23:37:25'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/1/2021 23:37:27'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/1/2021 23:37:27'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/1/2021 23:37:27'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/1/2021 23:37:27'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/1/2021 23:37:27'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/1/2021 23:37:27'!
PASSED!

!testRun: #CartTest #test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes stamp: 'MP 11/1/2021 23:37:27'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithZeroQuantity stamp: 'MP 11/1/2021 23:37:27'!
PASSED!

!testRun: #CartTest #test08CantAddBookWithNegativeQuantity stamp: 'MP 11/1/2021 23:37:27'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/1/2021 23:37:27'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/1/2021 23:37:27'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/1/2021 23:37:27'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/1/2021 23:37:27'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:38:52' prior: 50915049!
test04

	| cart cashier quantity |
	cart _ self createCart.
	cashier _ self createCashier.
	quantity _ 5.
	
	cart add: quantity of: self productSoldByTheStore.
	cart add: 1 of: self otherProductSoldByTheStore.

	
	self assert: 550 equals: (cashier checkout: cart).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:38:55' prior: 50915234!
test04

	| cart cashier quantity |
	cart _ self createCart.
	cashier _ self createCashier.
	quantity _ 5.
	
	cart add: quantity of: self productSoldByTheStore.
	cart add: 1 of: self otherProductSoldByTheStore.
	
	self assert: 550 equals: (cashier checkout: cart).! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:39:43' prior: 50915151!
checkout: aCart 
	
	aCart isEmpty ifTrue: [ self error: self class emptyCartErrorDescription ].
	^ aCart totalPrice.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:40:07'!
totalPrice

	^ contents sum: [ :aProduct | catalog at: aProduct 
		ifAbsent: [ self error: 'Producto no en catalogo' ] ].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:41:23' prior: 50915264!
totalPrice

	^ contents sum: [
		:aProduct | catalog at: aProduct ifAbsent: [ self error: 'Producto no en catalogo' ]
	].! !

!methodRemoval: Cart #totalPriceXX: stamp: 'MP 11/1/2021 23:41:38'!
totalPriceXX: aPriceList

	^ contents sum: [ :aProduct | aPriceList at: aProduct 
		ifAbsent: [ self error: 'Producto no en catalogo' ] ].!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/1/2021 23:41:46'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/1/2021 23:41:46'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/1/2021 23:41:46'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/1/2021 23:41:46'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/1/2021 23:41:46'!
PASSED!

!testRun: #CartTest #test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes stamp: 'MP 11/1/2021 23:41:46'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithZeroQuantity stamp: 'MP 11/1/2021 23:41:46'!
PASSED!

!testRun: #CartTest #test08CantAddBookWithNegativeQuantity stamp: 'MP 11/1/2021 23:41:46'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/1/2021 23:41:46'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/1/2021 23:41:46'!
ERROR!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/1/2021 23:41:46'!
ERROR!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/1/2021 23:41:46'!
ERROR!

Object subclass: #TestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!

!classDefinition: #TestObjectFactory category: 'TusLibros-It1' stamp: 'MP 11/1/2021 23:43:10'!
Object subclass: #TestObjectFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!
!TestObjectFactory methodsFor: 'nil' stamp: 'MP 11/1/2021 23:43:42'!
createCart

	^Cart acceptingProductsFrom: self defaultCatalog.! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:45:37'!
defaultCatalog

	^Dictionary new;
		at: self firstProductSoldByTheStore put: self firstProductSoldByTheStorePrice;
		at: self secondProductSoldByTheStore put: self secondProductSoldByTheStore;
		yourself.! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:45:40' prior: 50915335!
defaultCatalog

	^Dictionary new;
		at: self firstProductSoldByTheStore put: self firstProductSoldByTheStorePrice;
		at: self secondProductSoldByTheStore put: self secondProductSoldByTheStore;
		yourself.
! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:45:45' prior: 50915345!
defaultCatalog

	^ Dictionary new;
		at: self firstProductSoldByTheStore put: self firstProductSoldByTheStorePrice;
		at: self secondProductSoldByTheStore put: self secondProductSoldByTheStore;
		yourself.
! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:45:48' prior: 50915330!
createCart

	^ Cart acceptingProductsFrom: self defaultCatalog.! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:46:03'!
firstProductSoldByTheStore

	^ 'firstBook'
! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:46:12'!
firstProductSoldByTheStorePrice

	^ 100.! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:46:37'!
secondProductSoldByTheStorePrice

	^ 50.
! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:46:48'!
secondProductSoldByTheStore

	^ 'second book'.
! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:47:00' prior: 50915385!
secondProductSoldByTheStore

	^ 'da baibol'.
! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:47:08' prior: 50915390!
secondProductSoldByTheStore

	^ ''.
! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:47:10' prior: 50915395!
secondProductSoldByTheStore

	^ 'The Bible.'.
! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:47:10' prior: 50915400!
secondProductSoldByTheStore

	^ 'The Bible'.
! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:47:31' prior: 50915370!
firstProductSoldByTheStore

	^ ''
! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:47:57' prior: 50915410!
firstProductSoldByTheStore

	^ ''
! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:48:10' prior: 50915415!
firstProductSoldByTheStore

	^ 'growing object-oriented software guided by tests'
! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:48:12' prior: 50915420!
firstProductSoldByTheStore

	^ 'growing object-oriented software guided by tests'
! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:48:19' prior: 50915426!
firstProductSoldByTheStore

	"The one true way of designing systems."
	^ 'growing object-oriented software guided by tests'
! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:48:37' prior: 50915432!
firstProductSoldByTheStore

	"The one true way of designing systems."
	^ 'growing object-oriented software guided by tests'
! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:49:04'!
createCashier

	^ Cashier sourcingPricesFrom: self defaultCatalog.! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:53:01' prior: 50915447!
createCashier

	^ Cashier new.! !

!methodRemoval: Cashier class #sourcingPricesFrom: stamp: 'MP 11/1/2021 23:53:09'!
sourcingPricesFrom: aPriceList 

	^self new initializeSourcingPricesFrom: aPriceList !

!methodRemoval: Cashier #initializeSourcingPricesFrom: stamp: 'MP 11/1/2021 23:53:15'!
initializeSourcingPricesFrom: aPriceList 
	
	priceList := aPriceList.!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:53:28' prior: 50915258!
checkout: aCart 
	
	aCart isEmpty ifTrue: [ self error: self class emptyCartErrorDescription ].

	^ aCart totalPrice.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:53:30' prior: 50915468!
checkout: aCart 
	
	aCart isEmpty ifTrue: [ self error: self class emptyCartErrorDescription ].

	^ aCart totalPrice.
! !

!methodRemoval: CheckoutTest #createCart stamp: 'MP 11/1/2021 23:55:53'!
createCart
	
	^ Cart acceptingProductsFrom: self defaultCatalog.!

!methodRemoval: CheckoutTest #createCashier stamp: 'MP 11/1/2021 23:55:55'!
createCashier
	
	^ Cashier sourcingPricesFrom: self defaultPriceList.!

!classDefinition: #CheckoutTest category: 'TusLibros-It1' stamp: 'MP 11/1/2021 23:56:31'!
TestCase subclass: #CheckoutTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:56:29' overrides: 16927572!
setUp

	testObjectFactory _ TestObjectFactory new.! !

!methodRemoval: CheckoutTest #defaultPriceList stamp: 'MP 11/1/2021 23:59:25'!
defaultPriceList
	
	^ Dictionary new add: (self productSoldByTheStore -> self productSoldByTheStorePrice);
		add: (self otherProductSoldByTheStore -> self otherProductSoldByTheStorePrice); yourself!

!methodRemoval: CheckoutTest #defaultCatalog stamp: 'MP 11/1/2021 23:59:29'!
defaultCatalog
	
	^ Set
		with: self productSoldByTheStore
		with: self otherProductSoldByTheStore.!

!methodRemoval: CheckoutTest #otherProductSoldByTheStore stamp: 'MP 11/1/2021 23:59:34'!
otherProductSoldByTheStore

	^ 'Platero y Yo'.!

!methodRemoval: CheckoutTest #otherProductSoldByTheStorePrice stamp: 'MP 11/1/2021 23:59:36'!
otherProductSoldByTheStorePrice

	^ 50.!

!methodRemoval: CheckoutTest #productSoldByTheStore stamp: 'MP 11/1/2021 23:59:38'!
productSoldByTheStore
	
	^ 'validBook'.!

!methodRemoval: CheckoutTest #productSoldByTheStorePrice stamp: 'MP 11/1/2021 23:59:40'!
productSoldByTheStorePrice
	
	^ 100.!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:59:45' prior: 50915016!
test01

	| cart cashier |
	cart _ testObjectFactory createCart. 
	cashier _ self createCashier.
	
	self should: [ cashier checkout: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:59:47' prior: 50915535!
test01

	| cart cashier |
	cart _ testObjectFactory createCart. 
	cashier _ testObjectFactory createCashier.
	
	self should: [ cashier checkout: cart ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:59:54' prior: 50915028!
test02

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	
	cart add: 1 of: testObjectFactory productSoldByTheStore.
	
	self assert: testObjectFactory productSoldByTheStorePrice equals: (cashier checkout: cart).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/1/2021 23:59:58' prior: 50915561!
test02

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	
	cart add: 1 of: testObjectFactory firstProductSoldByTheStore.
	
	self assert: testObjectFactory productSoldByTheStorePrice equals: (cashier checkout: cart).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:00:02' prior: 50915573!
test02

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	
	cart add: 1 of: testObjectFactory firstProductSoldByTheStore.
	
	self assert: testObjectFactory firstProductSoldByTheStorePrice equals: (cashier checkout: cart).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:00:08' prior: 50915038!
test03

	| cart cashier quantity |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	
	self assert: (quantity * self productSoldByTheStorePrice) equals: (cashier checkout: cart).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:00:12' prior: 50915597!
test03

	| cart cashier quantity |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	
	self assert: (quantity * testObjectFactory firstProductSoldByTheStorePrice) equals: (cashier checkout: cart).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:00:20' prior: 50915246!
test04

	| cart cashier quantity |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: 1 of: testObjectFactory otherProductSoldByTheStore.
	
	self assert: 550 equals: (cashier checkout: cart).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:00:24' prior: 50915623!
test04

	| cart cashier quantity |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: 1 of: testObjectFactory secondProductSoldByTheStore.
	
	self assert: 550 equals: (cashier checkout: cart).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:03:46' prior: 50915637!
test04

	| cart cashier quantity expectedPrice |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: 1 of: testObjectFactory secondProductSoldByTheStore.
	
	expectedPrice _
		(quantity * testObjectFactory firstProductSoldByTheStorePrice) +
		(testObjectFactory secondProductSoldByTheStorePrice)
	
	self assert: expectedPrice equals: (cashier checkout: cart).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:04:00' prior: 50915651!
test04

	| cart cashier quantity expectedRecepit |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: 1 of: testObjectFactory secondProductSoldByTheStore.
	
	expectedRecepit _
		(quantity * testObjectFactory firstProductSoldByTheStorePrice) +
		(testObjectFactory secondProductSoldByTheStorePrice)
	
	self assert: expectedRecepit equals: (cashier checkout: cart).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:04:12' prior: 50915670!
test04

	| cart cashier quantity expectedRecepit |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: 1 of: testObjectFactory secondProductSoldByTheStore.
	
	expectedRecepit _
		(quantity * testObjectFactory firstProductSoldByTheStorePrice) +
		(testObjectFactory secondProductSoldByTheStorePrice).
	
	self assert: expectedRecepit equals: (cashier checkout: cart).! !

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:04:15'!
ERROR!
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:04:32' prior: 50915355!
defaultCatalog

	^ Dictionary new
		at: self firstProductSoldByTheStore put: self firstProductSoldByTheStorePrice;
		at: self secondProductSoldByTheStore put: self secondProductSoldByTheStore;
		yourself.
! !

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:04:35'!
ERROR!

d _ Dictionary new at: 'a' put: 1; at: 'b' put: 2;yourself.!

d includes: 'a'.!

d includes: 1.!

d includesKey: 'a'.!

----End fileIn of /home/mnpanic/Documents/dc/ing1/cuis/cuis-tuslibros/Packages/TerseGuide.pck.st----!
!Cart methodsFor: 'assertions' stamp: 'MP 11/2/2021 00:08:14' prior: 50915083!
assertBookIncludedInCatalog: aBook

	^ (catalog includesKey: aBook) ifFalse: [ self error: self class bookNotInCatalogErrorDescription ]! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:08:15'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:08:15'!
ERROR!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:08:15'!
ERROR!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:08:15'!
ERROR!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:08:15'!
ERROR!

!testRun: #CartTest #test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes stamp: 'MP 11/2/2021 00:08:15'!
ERROR!

!testRun: #CartTest #test07CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:08:15'!
ERROR!

!testRun: #CartTest #test08CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:08:15'!
ERROR!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:08:15'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 00:08:15'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 00:08:15'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:08:15'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'MP 11/2/2021 00:08:19' prior: 50918651!
assertBookIncludedInCatalog: aBook

	^ (catalog includesKey: aBook) ifFalse: [ self error: self class bookNotInCatalogErrorDescription ].! !

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:08:24'!
ERROR!
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:09:21' prior: 50915710!
defaultCatalog

	^ Dictionary new
		at: self firstProductSoldByTheStore put: self firstProductSoldByTheStorePrice;
		at: self secondProductSoldByTheStore put: self secondProductSoldByTheStorePrice;
		yourself.
! !

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:09:22'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 00:09:22'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 00:09:22'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:09:22'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:09:26'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:09:26'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 00:09:26'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 00:09:26'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:09:26'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:09:27'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:09:27'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:09:27'!
ERROR!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:09:27'!
ERROR!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:09:27'!
ERROR!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:09:27'!
ERROR!

!testRun: #CartTest #test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes stamp: 'MP 11/2/2021 00:09:27'!
ERROR!

!testRun: #CartTest #test07CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:09:27'!
ERROR!

!testRun: #CartTest #test08CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:09:27'!
ERROR!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:09:27'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 00:09:27'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 00:09:27'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:09:27'!
PASSED!

!classDefinition: #CartTest category: 'TusLibros-It1' stamp: 'MP 11/2/2021 00:10:19'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:10:17' overrides: 16927572!
setUp

	testObjectFactory _ TestObjectFactory new.! !
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:11:04' prior: 50914856!
test01NewCartIsEmpty

	| cart |

	cart _ testObjectFactory createCart.
	
	self assert: cart isEmpty.! !

!methodRemoval: CartTest #bookGrowingOOSoft stamp: 'MP 11/2/2021 00:11:16'!
bookGrowingOOSoft

	^'growing object-oriented software guided by tests'.!
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:11:28' prior: 50914863!
test02CartWithABookShouldNotBeEmpty

	| cart book catalog |
	
	cart _ testObjectFactory createCart.
	cart add: 1 of: book.
	
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:11:42' prior: 50918792!
test02CartWithABookShouldNotBeEmpty

	| cart book |
	
	cart _ testObjectFactory createCart.
	cart add: book.
	
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:11:59' prior: 50918800!
test02CartWithABookShouldNotBeEmpty

	| cart |
	
	cart _ testObjectFactory createCart.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self deny: cart isEmpty ! !

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:12:02'!
ERROR!
!Cart methodsFor: 'adding' stamp: 'MP 11/2/2021 00:12:15'!
add: aProduct 
	
	self assertBookIncludedInCatalog: aProduct.
	
	contents add: aProduct withOccurrences: 1 .! !
!Cart methodsFor: 'adding' stamp: 'MP 11/2/2021 00:12:23' prior: 50918818!
add: aProduct 
	
	self add: 1 of: aProduct.! !
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:12:49' prior: 50914873!
test03CartIncludesBookAfterAdding

	| cart book |

	cart _ testObjectFactory createCart.
	cart add: testObjectFactory firstProductSoldByTheStore .
	
	self assert: (cart includes: book).! !
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:13:01' prior: 50918828!
test03CartIncludesBookAfterAdding

	| cart |

	cart _ testObjectFactory createCart.
	cart add: testObjectFactory firstProductSoldByTheStore .
	
	self assert: (cart includes: testObjectFactory firstProductSoldByTheStore).! !

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:13:03'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:13:03'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:13:03'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:13:03'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:13:03'!
ERROR!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:13:03'!
ERROR!

!testRun: #CartTest #test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes stamp: 'MP 11/2/2021 00:13:03'!
ERROR!

!testRun: #CartTest #test07CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:13:03'!
ERROR!

!testRun: #CartTest #test08CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:13:03'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:13:10' prior: 50914883!
test04CantAddBookNotIncludedInCatalog

	| cart |
	
	cart _ testObjectFactory createCart.
	
	self assertAdding: self bookGrowingOOSoft 
		withQuantity: 1 
		to: cart 
		raises: Cart bookNotInCatalogErrorDescription.! !
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:14:06' prior: 50918875!
test04CantAddBookNotIncludedInCatalog

	| cart |
	
	cart _ testObjectFactory createCart.
	
	self assertAdding: testObjectFactory productNotSoldByTheStore
		withQuantity: 1 
		to: cart 
		raises: Cart bookNotInCatalogErrorDescription.! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:14:46'!
productNotSoldByTheStore

	^ 'El Cormen.'
! !

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:15:04'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:15:04'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:15:04'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:15:04'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:15:04'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:15:04'!
ERROR!

!testRun: #CartTest #test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes stamp: 'MP 11/2/2021 00:15:04'!
ERROR!

!testRun: #CartTest #test07CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:15:04'!
ERROR!

!testRun: #CartTest #test08CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:15:04'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:15:34' prior: 50914894!
test05CartIncludesAllOccurrencesOfBookAfterAdding

	| cart quantity |

	cart _ testObjectFactory createCart.
	quantity _ 5.
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	
	self assert: quantity equals: (cart occurrencesOf: testObjectFactory firstProductSoldByTheStore).! !
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:15:53' prior: 50914906!
test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes

	| cart book catalog quantity |
	
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with: book.
	quantity _ 5.
	
	cart _ Cart acceptingProductsFrom: catalog.
	cart add: quantity of: book.
	cart add: quantity of: book.
	
	self assert: (quantity*2) equals: (cart occurrencesOf: book).! !
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:16:15' prior: 50918941!
test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes

	| cart book quantity |
	
	quantity _ 5.
	
	cart _ testObjectFactory createCart.
	cart add: quantity of: book.
	cart add: quantity of: book.
	
	self assert: (quantity*2) equals: (cart occurrencesOf: book).! !

!methodRemoval: CartTest #test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes stamp: 'MP 11/2/2021 00:16:21'!
test06CartContainsTotalOccurrencesAfterAddingItMultipleTimes

	| cart book quantity |
	
	quantity _ 5.
	
	cart _ testObjectFactory createCart.
	cart add: quantity of: book.
	cart add: quantity of: book.
	
	self assert: (quantity*2) equals: (cart occurrencesOf: book).!
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:16:28'!
test06CantAddBookWithZeroQuantity

	| cart book catalog |
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with: book.
	cart _ Cart acceptingProductsFrom: catalog.
	
	self assertAdding: book 
		withQuantity: 0 
		to: cart 
		raises: Cart invalidQuantityErrorDescription.! !

!methodRemoval: CartTest #test07CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:16:28'!
test07CantAddBookWithZeroQuantity

	| cart book catalog |
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with: book.
	cart _ Cart acceptingProductsFrom: catalog.
	
	self assertAdding: book 
		withQuantity: 0 
		to: cart 
		raises: Cart invalidQuantityErrorDescription.!
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:16:34'!
test07CantAddBookWithNegativeQuantity

	| cart book catalog |
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with: book.
	cart _ Cart acceptingProductsFrom: catalog.
	
	self assertAdding: book 
		withQuantity: -1 
		to: cart 
		raises: Cart invalidQuantityErrorDescription.! !

!methodRemoval: CartTest #test08CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:16:34'!
test08CantAddBookWithNegativeQuantity

	| cart book catalog |
	book _ self bookGrowingOOSoft.
	catalog _ OrderedCollection with: book.
	cart _ Cart acceptingProductsFrom: catalog.
	
	self assertAdding: book 
		withQuantity: -1 
		to: cart 
		raises: Cart invalidQuantityErrorDescription.!
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:17:19' prior: 50919001!
test07CantAddBookWithNegativeQuantity

	| cart |
	cart _ testObjectFactory createCart.
	
	self assertAdding: testObjectFactory firstProductSoldByTheStore
		withQuantity: -1 
		to: cart 
		raises: Cart invalidQuantityErrorDescription.! !

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:17:23'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:17:23'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:17:23'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:17:23'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:17:23'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:17:23'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:17:23'!
ERROR!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:17:23'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:17:23'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:17:33' prior: 50919025!
test07CantAddBookWithNegativeQuantity

	| cart |
	cart _ testObjectFactory createCart.

	self assertAdding: testObjectFactory firstProductSoldByTheStore
		withQuantity: -1 
		to: cart 
		raises: Cart invalidQuantityErrorDescription.! !
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:17:55' prior: 50918978!
test06CantAddBookWithZeroQuantity

	| cart |
	cart _ testObjectFactory createCart.
	
	self assertAdding: testObjectFactory secondProductSoldByTheStore 
		withQuantity: 0 
		to: cart 
		raises: Cart invalidQuantityErrorDescription.! !

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:17:58'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:17:58'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:17:58'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:17:58'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:17:58'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:17:58'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:17:58'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:17:58'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:19:26' prior: 50919073!
test06CantAddBookWithZeroQuantity

	| cart |
	cart _ testObjectFactory createCart.
	
	self assertAdding: testObjectFactory secondProductSoldByTheStore 
		withQuantity: 0
		to: cart 
		raises: Cart invalidQuantityErrorDescription.! !
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:19:27' prior: 50919108!
test06CantAddBookWithZeroQuantity

	| cart |
	cart _ testObjectFactory createCart.
	
	self assertAdding: testObjectFactory secondProductSoldByTheStore 
		withQuantity: 0
		to: cart
		raises: Cart invalidQuantityErrorDescription.! !

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:19:27'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:19:27'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:19:27'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:19:27'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:19:27'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:19:27'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:19:27'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:19:27'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 00:19:33'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:19:33'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:19:33'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:19:34'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:19:34'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:19:34'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:19:34'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:19:34'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:19:34'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 00:19:34'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 00:19:34'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:19:34'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:20:36' prior: 50915689!
test04

	| cart cashier quantity expectedRecepit |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: testObjectFactory secondProductSoldByTheStore.
	
	expectedRecepit _
		(quantity * testObjectFactory firstProductSoldByTheStorePrice) +
		(testObjectFactory secondProductSoldByTheStorePrice).
	
	self assert: expectedRecepit equals: (cashier checkout: cart).! !

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:20:39'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:20:39'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 00:20:39'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 00:20:39'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:20:39'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:20:41'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:20:41'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:20:41'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:20:41'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:20:41'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:20:41'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:20:41'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:20:41'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:20:41'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 00:20:41'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 00:20:41'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:20:41'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:21:24'!
assertCartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue: [ self error: self class emptyCartErrorDescription ]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:21:24' prior: 50915475!
checkout: aCart 
	
	self assertCartIsNotEmpty: aCart.

	^ aCart totalPrice.
! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:22:57' prior: 50915271!
totalPrice

	^ contents sum: [
		:aProduct | catalog at: aProduct ifAbsent: [ self error: 'Producto no en catalogo' ]
	].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:23:54'!
priceOf: aProduct

	^ catalog at: aProduct ifAbsent: [ self error: 'Producto no en catalogo' ]! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:23:54' prior: 50919261!
totalPrice

	^ contents sum: [
		:aProduct | self priceOf: aProduct
	].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:24:00' prior: 50919274!
totalPrice

	^ contents sum: [ :aProduct | self priceOf: aProduct ].! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:24:21' prior: 50919268!
priceOf: aProduct

	^ catalog at: aProduct
		ifAbsent: [ self error: self class productNotInCatalogErrorDescription ]! !
!Cart class methodsFor: 'error descriptions' stamp: 'MP 11/2/2021 00:24:45'!
productNotInCatalogErrorDescription
	
	^ 'product not in catalog'! !
!Cart class methodsFor: 'error descriptions' stamp: 'MP 11/2/2021 00:24:48' prior: 50915134!
invalidQuantityErrorDescription
	
	^ 'cant add a book with less than 1 quantity'! !
!Cart class methodsFor: 'error descriptions' stamp: 'MP 11/2/2021 00:24:51' prior: 50915129!
bookNotInCatalogErrorDescription
	
	^ 'Book not in catalog'! !
!Cart class methodsFor: 'error descriptions' stamp: 'MP 11/2/2021 00:24:51' prior: 50919304!
bookNotInCatalogErrorDescription
	
	^ 'book not in catalog'! !

!methodRemoval: Cart class #bookNotInCatalogErrorDescription stamp: 'MP 11/2/2021 00:24:59'!
bookNotInCatalogErrorDescription
	
	^ 'book not in catalog'!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:25:06'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:25:06'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:25:06'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:25:06'!
ERROR!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:25:06'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:25:06'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:25:06'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:25:06'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 00:25:06'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 00:25:06'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:25:06'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:25:06'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'MP 11/2/2021 00:25:10' prior: 50918885!
test04CantAddBookNotIncludedInCatalog

	| cart |
	
	cart _ testObjectFactory createCart.
	
	self assertAdding: testObjectFactory productNotSoldByTheStore
		withQuantity: 1 
		to: cart 
		raises: Cart productNotInCatalogErrorDescription.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:25:14'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:25:14'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:25:14'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:25:14'!
ERROR!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:25:14'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:25:14'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:25:14'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:25:14'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 00:25:14'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 00:25:14'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:25:14'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:25:14'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'MP 11/2/2021 00:25:19' prior: 50918692!
assertBookIncludedInCatalog: aBook

	^ (catalog includesKey: aBook) ifFalse: [ self error: self class productNotInCatalogErrorDescription ].! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:25:21'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:25:21'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:25:21'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:25:21'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:25:21'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:25:21'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:25:21'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:25:21'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 00:25:21'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 00:25:21'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:25:21'!
PASSED!
!Cart methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:25:38' prior: 50919285!
priceOf: aProduct

	^ catalog at: aProduct! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:25:39'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:25:39'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:25:39'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:25:39'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:25:39'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:25:39'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:25:39'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:25:39'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 00:25:39'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 00:25:39'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:25:39'!
PASSED!

!classDefinition: #Cart category: 'TusLibros-It1' stamp: 'MP 11/2/2021 00:29:51'!
Object subclass: #Cart
	instanceVariableNames: 'contents catalog subTotal'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!
!Cart methodsFor: 'adding' stamp: 'MP 11/2/2021 00:29:48' prior: 50915075!
add: aQuantity of: aProduct 
	
	| productPrice |
	self assertQuantityIsPositive: aQuantity.
	
	productPrice _ catalog at: aProduct
		ifAbsent: [ self error: self class productNotInCatalogErrorDescription ].
	
	contents add: aProduct withOccurrences: aQuantity .
	subTotal _ subTotal + productPrice.! !

!methodRemoval: Cart #priceOf: stamp: 'MP 11/2/2021 00:30:11'!
priceOf: aProduct

	^ catalog at: aProduct!
!Cart methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:30:20' prior: 50919280!
totalPrice

	^ subTotal.! !

!classDefinition: #Cart category: 'TusLibros-It1' stamp: 'MP 11/2/2021 00:30:35'!
Object subclass: #Cart
	instanceVariableNames: 'contents catalog totalPrice'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!
!Cart methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:30:35' prior: 50919476!
add: aQuantity of: aProduct 
	
	| productPrice |
	self assertQuantityIsPositive: aQuantity.
	
	productPrice _ catalog at: aProduct
		ifAbsent: [ self error: self class productNotInCatalogErrorDescription ].
	
	contents add: aProduct withOccurrences: aQuantity .
	totalPrice _ totalPrice + productPrice.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:30:36' prior: 50919492!
totalPrice

	^ totalPrice.! !
!Cart methodsFor: 'accessing' stamp: 'MP 11/2/2021 00:30:46' prior: 50915071!
occurrencesOf: aBook

	^ contents occurrencesOf: aBook.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:30:48'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:30:48'!
ERROR!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:30:48'!
ERROR!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:30:48'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:30:48'!
ERROR!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:30:48'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:30:48'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:30:48'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 00:30:48'!
ERROR!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 00:30:48'!
ERROR!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:30:48'!
ERROR!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:30:58'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 'MP 11/2/2021 00:31:11' prior: 50915097!
initializeWith: aCatalog 
	
	catalog _ aCatalog.
	contents _ Bag new.
	totalPrice _ 0.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:31:14'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:31:14'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:31:14'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:31:14'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:31:14'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:31:14'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:31:14'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:31:14'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 00:31:14'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 00:31:14'!
FAILURE!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:31:14'!
FAILURE!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 00:31:18'!
FAILURE!
!Cart methodsFor: 'adding' stamp: 'MP 11/2/2021 00:31:38' prior: 50919503!
add: aQuantity of: aProduct 
	
	| productPrice |
	self assertQuantityIsPositive: aQuantity.
	
	productPrice _ catalog at: aProduct
		ifAbsent: [ self error: self class productNotInCatalogErrorDescription ].
	
	contents add: aProduct withOccurrences: aQuantity .
	totalPrice _ totalPrice + productPrice * aQuantity .! !
!Cart methodsFor: 'adding' stamp: 'MP 11/2/2021 00:31:39' prior: 50919597!
add: aQuantity of: aProduct 
	
	| productPrice |
	self assertQuantityIsPositive: aQuantity.
	
	productPrice _ catalog at: aProduct
		ifAbsent: [ self error: self class productNotInCatalogErrorDescription ].
	
	contents add: aProduct withOccurrences: aQuantity .
	totalPrice _ totalPrice + productPrice * aQuantity.! !
!Cart methodsFor: 'adding' stamp: 'MP 11/2/2021 00:31:44' prior: 50919610!
add: quantity of: aProduct 
	
	| productPrice |
	self assertQuantityIsPositive: quantity.
	
	productPrice _ catalog at: aProduct
		ifAbsent: [ self error: self class productNotInCatalogErrorDescription ].
	
	contents add: aProduct withOccurrences: quantity .
	totalPrice _ totalPrice + productPrice * quantity.! !
!Cart methodsFor: 'adding' stamp: 'MP 11/2/2021 00:31:48' prior: 50919623!
add: quantity of: product 
	
	| productPrice |
	self assertQuantityIsPositive: quantity.
	
	productPrice _ catalog at: product
		ifAbsent: [ self error: self class productNotInCatalogErrorDescription ].
	
	contents add: product withOccurrences: quantity .
	totalPrice _ totalPrice + productPrice * quantity.! !
!Cart methodsFor: 'adding' stamp: 'MP 11/2/2021 00:31:50' prior: 50919636!
add: quantity of: product 
	
	| productPrice |
	self assertQuantityIsPositive: quantity.
	
	productPrice _ catalog at: product
		ifAbsent: [ self error: self class productNotInCatalogErrorDescription ].
	
	contents add: product withOccurrences: quantity .

	totalPrice _ totalPrice + productPrice * quantity.! !
!Cart methodsFor: 'adding' stamp: 'MP 11/2/2021 00:34:02' prior: 50919649!
add: quantity of: product 
	
	| productPrice |
	self assertQuantityIsPositive: quantity.
	
	productPrice _ catalog at: product
		ifAbsent: [ self error: self class productNotInCatalogErrorDescription ].
	
	contents add: product withOccurrences: quantity .

	totalPrice _ totalPrice + productPrice * quantity.! !
!Cart methodsFor: 'adding' stamp: 'MP 11/2/2021 00:34:57'!
add2: quantity of: product 
	
	
	self assertProductInCatalog: product.
	self assertQuantityIsPositive: quantity.
	
	contents add: product withOccurrences: quantity .

	totalPrice _ totalPrice + (self priceOf: product)  * quantity.! !
!Cart methodsFor: 'adding' stamp: 'MP 11/2/2021 00:35:03' prior: 50919674!
add2: quantity of: product 

	self assertProductInCatalog: product.
	self assertQuantityIsPositive: quantity.
	
	contents add: product withOccurrences: quantity .

	totalPrice _ totalPrice + (self priceOf: product)  * quantity.! !
!Cart methodsFor: 'adding' stamp: 'MP 11/2/2021 00:36:52' prior: 50919662!
add: quantity of: product 
	
	| productPrice |
	self assertQuantityIsPositive: quantity.
	
	productPrice _ catalog at: product
		ifAbsent: [ self error: self class productNotInCatalogErrorDescription ].
	
	contents add: product withOccurrences: quantity .

	totalPrice _ totalPrice + productPrice * quantity.! !
!Cart methodsFor: 'adding' stamp: 'MP 11/2/2021 00:37:57' prior: 50919684!
add2: quantity of: product 

	self assertProductInCatalog: product.
	self assertQuantityIsPositive: quantity.
	
	contents add: product withOccurrences: quantity .

	totalPrice _ totalPrice + (self priceOf: product) * quantity.! !
!Cart methodsFor: 'adding' stamp: 'MP 11/2/2021 00:38:42' prior: 50919694!
add: quantity of: product 
	
	self assertProductInCatalog: product.
	self assertQuantityIsPositive: quantity.
	
	contents add: product withOccurrences: quantity .

	totalPrice _ totalPrice + (self priceOf: product) * quantity.! !
!Cart methodsFor: 'adding' stamp: 'MP 11/2/2021 00:38:45' prior: 50919717!
add: quantity of: product 
	
	self assertProductInCatalog: product.
	self assertQuantityIsPositive: quantity.

	contents add: product withOccurrences: quantity .

	totalPrice _ totalPrice + (self priceOf: product) * quantity.! !
!Cart methodsFor: 'assertions' stamp: 'MP 11/2/2021 00:39:00' prior: 50915090!
assertQuantityIsPositive: aQuantity

	^ aQuantity strictlyPositive ifFalse: [ self error: self class invalidQuantityErrorDescription ]! !

!methodRemoval: Cart #add2:of: stamp: 'MP 11/2/2021 00:39:13'!
add2: quantity of: product 

	self assertProductInCatalog: product.
	self assertQuantityIsPositive: quantity.
	
	contents add: product withOccurrences: quantity .

	totalPrice _ totalPrice + (self priceOf: product) * quantity.!
!Cart methodsFor: 'assertions' stamp: 'MP 11/2/2021 00:39:23'!
assertProductIncludedInCatalog: aBook

	^ (catalog includesKey: aBook) ifFalse: [ self error: self class productNotInCatalogErrorDescription ].! !

!methodRemoval: Cart #assertBookIncludedInCatalog: stamp: 'MP 11/2/2021 00:39:23'!
assertBookIncludedInCatalog: aBook

	^ (catalog includesKey: aBook) ifFalse: [ self error: self class productNotInCatalogErrorDescription ].!
!Cart methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:39:35' prior: 50919727!
add: quantity of: product 
	
	self assertProductIncludedInCatalog: product.
	self assertQuantityIsPositive: quantity.

	contents add: product withOccurrences: quantity .

	totalPrice _ totalPrice + (self priceOf: product) * quantity.! !
!Cart methodsFor: 'assertions' stamp: 'MP 11/2/2021 00:39:46' prior: 50919753!
assertProductIncludedInCatalog: aProduct

	^ (catalog includesKey: aProduct) ifFalse: [ self error: self class productNotInCatalogErrorDescription ].! !
!Cart methodsFor: 'adding' stamp: 'MP 11/2/2021 00:39:55' prior: 50918824!
add: product 
	
	self add: 1 of: product.! !
!Cart methodsFor: 'testing' stamp: 'MP 11/2/2021 00:40:05' prior: 50915102!
includes: product 
	
	^contents includes: product.! !
!Cart methodsFor: 'adding - private' stamp: 'MP 11/2/2021 00:40:53'!
priceOf: product

	^ catalog at: product.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:40:54'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:40:54'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:40:54'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:40:54'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:40:54'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:40:54'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:40:54'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:40:54'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 00:40:54'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 00:40:54'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:40:54'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:43:31'!
checkout: aCart charging: aCreditCard
	
	self assertCartIsNotEmpty: aCart.

	^ aCart totalPrice.
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:44:16'!
checkout: aCart charging: aCreditCard on: aDate
	
	self assertCartIsNotEmpty: aCart.
	aCreditCard isExpiredOn: aDate ifTrue: [ self error: self class expiredCardErrorDescription ].

	^ aCart totalPrice.
! !

!methodRemoval: Cashier #checkout:charging: stamp: 'MP 11/2/2021 00:44:19'!
checkout: aCart charging: aCreditCard
	
	self assertCartIsNotEmpty: aCart.

	^ aCart totalPrice.
!
!Cashier class methodsFor: 'error descriptions' stamp: 'MP 11/2/2021 00:44:36'!
expiredCardErrorDescription
	
	^ 'Cannot charge expired card'.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:44:48' prior: 50919835!
checkout: aCart charging: aCreditCard on: aDate
	
	self assertCartIsNotEmpty: aCart.
	(aCreditCard isExpiredOn: aDate) ifTrue: [ self error: self class expiredCardErrorDescription ].

	^ aCart totalPrice.
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:44:58' prior: 50919855!
checkout: aCart charging: aCreditCard on: aDate
	
	self assertCartIsNotEmpty: aCart.

	^ aCart totalPrice.
! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:48:12'!
test05

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier checkout: cart charging: testObjectFactory expiredCard on: testObjectFactory today ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier expiredCardErrorDescription equals: anException messageText ].! !

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 00:48:17'!
ERROR!
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:48:22'!
expiredCard
	self shouldBeImplemented.! !

!classDefinition: #Card category: 'TusLibros-It1' stamp: 'MP 11/2/2021 00:50:31'!
Object subclass: #Card
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:50:22' prior: 50919892!
expiredCard
	
	^ Card expiringAt: nil.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:50:37' prior: 50919871!
test05

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier checkout: cart charging: testObjectFactory expiredCard on: testObjectFactory today ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier expiredCardErrorDescription equals: anException messageText ].! !

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 00:50:37'!
ERROR!
!Card class methodsFor: 'instance creation' stamp: 'MP 11/2/2021 00:50:44'!
expiringAt: anUndefinedObject 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeExpiringAt: anUndefinedObject ! !
!Card class methodsFor: 'instance creation' stamp: 'MP 11/2/2021 00:50:47' prior: 50919928!
expiringAt: anUndefinedObject 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeExpiringAt: anUndefinedObject ! !
!Card class methodsFor: 'instance creation' stamp: 'MP 11/2/2021 00:50:54' prior: 50919937!
expiringAt: anUndefinedObject 

	^self new initializeExpiringAt: anUndefinedObject ! !
!Card class methodsFor: 'instance creation' stamp: 'MP 11/2/2021 00:51:02' prior: 50919945!
expiringAt: anExpiryDate 

	^self new initializeExpiringAt: anExpiryDate ! !

!classDefinition: #Card category: 'TusLibros-It1' stamp: 'MP 11/2/2021 00:51:26'!
Object subclass: #Card
	instanceVariableNames: 'expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!
!Card methodsFor: 'no messages' stamp: 'MP 11/2/2021 00:51:25'!
initializeExpiringAt: anExpirationDate

	expirationDate _ anExpirationDate! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:51:31'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:51:31'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:51:31'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:51:31'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:51:31'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:51:31'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:51:31'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:51:31'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 00:51:31'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 00:51:31'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:51:31'!
PASSED!

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 00:51:31'!
ERROR!

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 00:51:31'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:51:46' prior: 50919865!
checkout: aCart charging: aCreditCard on: aDate
	
	self assertCartIsNotEmpty: aCart.
		(aCreditCard isExpiredOn: aDate) ifTrue: [ self error: self class expiredCardErrorDescription ].


	^ aCart totalPrice.
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:51:47' prior: 50920004!
checkout: aCart charging: aCreditCard on: aDate
	
	self assertCartIsNotEmpty: aCart.
	(aCreditCard isExpiredOn: aDate) ifTrue: [ self error: self class expiredCardErrorDescription ].


	^ aCart totalPrice.
! !

!methodRemoval: Cashier #checkout: stamp: 'MP 11/2/2021 00:51:50'!
checkout: aCart 
	
	self assertCartIsNotEmpty: aCart.

	^ aCart totalPrice.
!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 00:51:52'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 00:51:52'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 00:51:52'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 00:51:52'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 00:51:52'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 00:51:52'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 00:51:52'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 00:51:52'!
ERROR!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 00:51:52'!
ERROR!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 00:51:52'!
ERROR!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 00:51:52'!
ERROR!

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 00:51:52'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:52:27'!
checkout: aCart
	
	self assertCartIsNotEmpty: aCart.


	^ aCart totalPrice.
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:52:30' prior: 50920014!
checkout: aCart charging: aCreditCard on: aDate
	
	self assertCartIsNotEmpty: aCart.
	(aCreditCard isExpiredOn: aDate) ifTrue: [ self error: self class expiredCardErrorDescription ].

	^ aCart totalPrice.
! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 00:52:46'!
today

	^ DateAndTime today.! !

Months!

September / 10!

September / 10!

September / 10 / 21!

September / 10 / 21!

September of: 2021!
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:07:39' prior: 50920077!
today

	^ November / 2 / 2021.! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:07:56' prior: 50919903!
expiredCard
	
	^ Card expiringAt: (September of: 2021).! !

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 01:08:33'!
ERROR!

aDate _ September / 10 / 2021.

anExpiryDate _ August of: 2021.

aDate > anExpiryDate!

aDate _ September / 10 / 2021.

anExpiryDate _ October of: 2021.

aDate > anExpiryDate!

aDate _ September / 10 / 2021.

anExpiryDate _ September of: 2021.

aDate > anExpiryDate!

aDate _ September / 10 / 2021.

anExpiryDate _ September of: 2021.

aDate >= anExpiryDate!

aDate _ September / 10 / 2021.

anExpiryDate _ September of: 2021.

aDate >= anExpiryDate!

aDate _ September / 10 / 2021.

anExpiryDate _ September of: 2021.

aDate > anExpiryDate!
!Card methodsFor: 'nil' stamp: 'MP 11/2/2021 01:10:31'!
isExpiredOn: aDate

	aDate > expirationDate ! !

!classDefinition: #Card category: 'TusLibros-It1' stamp: 'MP 11/2/2021 01:10:34'!
Object subclass: #Card
	instanceVariableNames: 'expirationDateOfMonth'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!
!Card methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:10:34' prior: 50920113!
isExpiredOn: aDate

	aDate > expirationDateOfMonth ! !
!Card methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:10:34' prior: 50919963!
initializeExpiringAt: anExpirationDate

	expirationDateOfMonth _ anExpirationDate! !

!classDefinition: #Card category: 'TusLibros-It1' stamp: 'MP 11/2/2021 01:10:40'!
Object subclass: #Card
	instanceVariableNames: 'expirationMonthOfYear'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It1'!
!Card methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:10:40' prior: 50920125!
isExpiredOn: aDate

	aDate > expirationMonthOfYear ! !
!Card methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:10:40' prior: 50920130!
initializeExpiringAt: anExpirationDate

	expirationMonthOfYear _ anExpirationDate! !
!Card methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:10:45' prior: 50920143!
isExpiredOn: aDate

	^aDate > expirationMonthOfYear ! !
!Card methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:10:49' prior: 50920154!
isExpiredOn: aDate

	^ aDate > expirationMonthOfYear ! !
!Card methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:10:52' prior: 50920159!
isExpiredOn: aDate

	^ aDate > expirationMonthOfYear! !
!Card methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:10:53' prior: 50920164!
isExpiredOn: aDate

	^ aDate > expirationMonthOfYear.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 01:10:55'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 01:10:55'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 01:10:55'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 01:10:55'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 01:10:55'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 01:10:55'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 01:10:55'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 01:10:55'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 01:10:55'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 01:10:55'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 01:10:55'!
PASSED!

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 01:10:55'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:11:44' prior: 50919908!
test05

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier checkout: cart 
				charging: testObjectFactory expiredCard 
				on: testObjectFactory today ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier expiredCardErrorDescription equals: anException messageText ].! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:12:50' prior: 50920207!
test05

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier checkout: cart 
				charging: testObjectFactory expiredCard 
				on: testObjectFactory today ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier expiredCardErrorDescription equals: anException messageText ].! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:12:56' prior: 50920226!
test05

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
			checkout: cart 
			charging: testObjectFactory expiredCard 
			on: testObjectFactory today ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier expiredCardErrorDescription equals: anException messageText ].! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:12:58' prior: 50920245!
test05

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory expiredCard 
				on: testObjectFactory today ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier expiredCardErrorDescription equals: anException messageText ].! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:13:17' prior: 50920264!
test05

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self 
should: [ cashier 
				checkout: cart 
				charging: testObjectFactory expiredCard 
				on: testObjectFactory today ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier expiredCardErrorDescription equals: anException messageText ].! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:13:18' prior: 50920283!
test05

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory expiredCard 
				on: testObjectFactory today ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier expiredCardErrorDescription equals: anException messageText ].! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:13:32'!
fixedDate

	^ November / 2 / 2021.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:13:32' prior: 50920302!
test05

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory expiredCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier expiredCardErrorDescription equals: anException messageText ].! !

!methodRemoval: TestObjectFactory #today stamp: 'MP 11/2/2021 01:13:32'!
today

	^ November / 2 / 2021.!

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 01:13:36'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 01:13:36'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 01:13:36'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 01:13:36'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 01:13:36'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 01:13:36'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 01:13:36'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 01:13:36'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 01:13:36'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 01:13:36'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 01:13:36'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 01:13:36'!
PASSED!

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 01:13:36'!
PASSED!

!methodRemoval: Cashier #checkout: stamp: 'MP 11/2/2021 01:13:54'!
checkout: aCart
	
	self assertCartIsNotEmpty: aCart.


	^ aCart totalPrice.
!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 01:14:02'!
ERROR!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:16:32' prior: 50919186!
test04

	| cart cashier quantity expectedRecepit |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: testObjectFactory secondProductSoldByTheStore.
	
	expectedRecepit _
		(quantity * testObjectFactory firstProductSoldByTheStorePrice) +
		(testObjectFactory secondProductSoldByTheStorePrice).
	
	self assert: expectedRecepit equals: (cashier checkout: cart charging: testObjectFactory validCard on: testObjectFactory fixedDate ).! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:16:46'!
validCard
	
	^ Card expiringAt: (December of: 2021).! !

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 01:16:54'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 01:16:54'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 01:16:54'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 01:16:54'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 01:16:54'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 01:16:54'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 01:16:54'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 01:16:54'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 01:16:54'!
ERROR!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 01:16:54'!
ERROR!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 01:16:54'!
ERROR!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 01:16:54'!
PASSED!

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 01:16:54'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:16:58' prior: 50920390!
test04

	| cart cashier quantity expectedRecepit |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: testObjectFactory secondProductSoldByTheStore.
	
	expectedRecepit _
		(quantity * testObjectFactory firstProductSoldByTheStorePrice) +
		(testObjectFactory secondProductSoldByTheStorePrice).
	
	self assert: expectedRecepit equals: (cashier checkout: cart charging: testObjectFactory validCard on: testObjectFactory fixedDate ).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:17:15' prior: 50920451!
test04

	| cart cashier quantity expectedRecepit |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: testObjectFactory secondProductSoldByTheStore.
	
	expectedRecepit _
		(quantity * testObjectFactory firstProductSoldByTheStorePrice) +
		(testObjectFactory secondProductSoldByTheStorePrice).
	
	self assert: expectedRecepit equals: (cashier checkout: cart charging: testObjectFactory validCard on: testObjectFactory fixedDate ).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:17:29' prior: 50920472!
test04

	| cart cashier quantity expectedRecepit |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: testObjectFactory secondProductSoldByTheStore.
	
	expectedRecepit _
		(quantity * testObjectFactory firstProductSoldByTheStorePrice) +
		(testObjectFactory secondProductSoldByTheStorePrice).
	
	self assert: expectedRecepit
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate ).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:17:52' prior: 50915610!
test03

	| cart cashier quantity |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	
	self assert: (quantity * testObjectFactory firstProductSoldByTheStorePrice)
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate )..! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:17:54' prior: 50920514!
test03

	| cart cashier quantity |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	
	self assert: (quantity * testObjectFactory firstProductSoldByTheStorePrice)
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate ).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:17:56' prior: 50920530!
test03

	| cart cashier quantity |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	
	self 
		assert: (quantity * testObjectFactory firstProductSoldByTheStorePrice)
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate ).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:18:04' prior: 50920493!
test04

	| cart cashier quantity expectedRecepit |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: testObjectFactory secondProductSoldByTheStore.
	
	expectedRecepit _
		(quantity * testObjectFactory firstProductSoldByTheStorePrice) +
		(testObjectFactory secondProductSoldByTheStorePrice).
	
	self 
		assert: expectedRecepit
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate ).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:18:13' prior: 50915585!
test02

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	
	cart add: 1 of: testObjectFactory firstProductSoldByTheStore.
	
	self
		assert: testObjectFactory firstProductSoldByTheStorePrice
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate ).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:18:18' prior: 50915548!
test01

	| cart cashier |
	cart _ testObjectFactory createCart. 
	cashier _ testObjectFactory createCashier.
	
	self should: [(cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate ). ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:18:24' prior: 50920599!
test01

	| cart cashier |
	cart _ testObjectFactory createCart. 
	cashier _ testObjectFactory createCashier.
	
	self should: [cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:18:26' prior: 50920615!
test01

	| cart cashier |
	cart _ testObjectFactory createCart. 
	cashier _ testObjectFactory createCashier.
	
	self should: [cashier 
				checkout: cart 
				charging: testObjectFactory validCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:18:30' prior: 50920630!
test01

	| cart cashier |
	cart _ testObjectFactory createCart. 
	cashier _ testObjectFactory createCashier.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory validCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:18:49' prior: 50920584!
test02

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	
	cart add: 1 of: testObjectFactory firstProductSoldByTheStore.
	
	self
		assert: testObjectFactory firstProductSoldByTheStorePrice
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:18:52' prior: 50920546!
test03

	| cart cashier quantity |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	
	self 
		assert: (quantity * testObjectFactory firstProductSoldByTheStorePrice)
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:18:55' prior: 50920562!
test04

	| cart cashier quantity expectedRecepit |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: testObjectFactory secondProductSoldByTheStore.
	
	expectedRecepit _
		(quantity * testObjectFactory firstProductSoldByTheStorePrice) +
		(testObjectFactory secondProductSoldByTheStorePrice).
	
	self 
		assert: expectedRecepit
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate).! !

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 01:19:00'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 01:19:00'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 01:19:00'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 01:19:00'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 01:19:00'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 01:19:00'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 01:19:00'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 01:19:00'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 01:19:00'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 01:19:00'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 01:19:00'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 01:19:00'!
PASSED!

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 01:19:00'!
PASSED!

----SNAPSHOT----(2 November 2021 01:19:03) CuisUniversity-4913.image priorSource: 18661997!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:25:51'!
test06

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory invalidNumberCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier invalidCardNumberErrorDescription equals: anException messageText ].! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 01:31:07'!
invalidNumberCard
	
	^ Card withNumber: '4509790000001234' expiringAt: (December of: 2021).! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 01:31:19' prior: 50920771!
invalidNumberCard
	
	^ Card withNumber: '450979000000' expiringAt: (December of: 2021).! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 01:31:25' prior: 50920411!
validCard
	
	^ Card withNumber: '4509790000001234' expiringAt: (December of: 2021).! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 01:31:31' prior: 50920090!
expiredCard
	
	^ Card withNumber: '4509790000001234' expiringAt: (September of: 2021).! !
!Card class methodsFor: 'instance creation' stamp: 'MP 11/2/2021 01:32:16'!
withNumber: aCardNumber expiringAt: anExpiryDate 

	^self new initializeWithNumber: aCardNumber expiringAt: anExpiryDate ! !

!methodRemoval: Card class #expiringAt: stamp: 'MP 11/2/2021 01:32:19'!
expiringAt: anExpiryDate 

	^self new initializeExpiringAt: anExpiryDate !

!classDefinition: #Card category: 'TusLibros-It2' stamp: 'MP 11/2/2021 01:32:47'!
Object subclass: #Card
	instanceVariableNames: 'expirationMonthOfYear number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It2'!
!Card methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:32:45'!
initializeWithNumber: aCardNumber expiringAt: anExpirationDate

	expirationMonthOfYear _ anExpirationDate.
	number _ aCardNumber.! !
!Card methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:36:16' prior: 50920814!
initializeWithNumber: aPAN expiringAt: anExpirationDate

	expirationMonthOfYear _ anExpirationDate.
	number _ aPAN.! !
!Card methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:36:22' prior: 50920821!
initializeWithNumber: aCardNumber expiringAt: anExpirationDate

	expirationMonthOfYear _ anExpirationDate.
	number _ aCardNumber.! !

!methodRemoval: Card #initializeExpiringAt: stamp: 'MP 11/2/2021 01:36:39'!
initializeExpiringAt: anExpirationDate

	expirationMonthOfYear _ anExpirationDate!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 01:36:41'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 01:36:41'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 01:36:41'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 01:36:41'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 01:36:41'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 01:36:41'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 01:36:41'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 01:36:41'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 01:36:41'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 01:36:41'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 01:36:41'!
PASSED!

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 01:36:41'!
PASSED!

!testRun: #CheckoutTest #test06 stamp: 'MP 11/2/2021 01:36:41'!
FAILURE!

!testRun: #CheckoutTest #test06 stamp: 'MP 11/2/2021 01:36:41'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:39:09' prior: 50920067!
checkout: aCart charging: aCreditCard on: aDate
	
	self assertCartIsNotEmpty: aCart.
	(aCreditCard isExpiredOn: aDate) ifTrue: [ self error: self class expiredCardErrorDescription ].
	(aCreditCard number length < 16) IfTrue: [ self error: self class ].

	^ aCart totalPrice.
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:39:25' prior: 50920878!
checkout: aCart charging: aCreditCard on: aDate
	
	self assertCartIsNotEmpty: aCart.
	(aCreditCard isExpiredOn: aDate) ifTrue: [ self error: self class expiredCardErrorDescription ].
	(aCreditCard number length < 16) ifTrue: [ self error: self class ].

	^ aCart totalPrice.
! !
!Cashier class methodsFor: 'error descriptions' stamp: 'MP 11/2/2021 01:39:49'!
invalidCardErrorDescription
	
	^ 'cannot charge a card with an invalid card number'.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'MP 11/2/2021 01:39:55'!
invalidCardNumberErrorDescription
	
	^ 'cannot charge a card with an invalid card number'.! !

!methodRemoval: Cashier class #invalidCardErrorDescription stamp: 'MP 11/2/2021 01:39:56'!
invalidCardErrorDescription
	
	^ 'cannot charge a card with an invalid card number'.!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:40:16' prior: 50920890!
checkout: aCart charging: aCreditCard on: aDate
	
	self assertCartIsNotEmpty: aCart.
	(aCreditCard isExpiredOn: aDate) ifTrue: [ self error: self class expiredCardErrorDescription ].
	(aCreditCard number length < 16) ifTrue: [ self error: self class invalidCardNumberErrorDescription ].

	^ aCart totalPrice.
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 01:40:18'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 01:40:18'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 01:40:18'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 01:40:18'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 01:40:18'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 01:40:18'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 01:40:18'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 01:40:18'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 01:40:18'!
ERROR!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 01:40:18'!
ERROR!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 01:40:18'!
ERROR!

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 01:40:18'!
PASSED!

!testRun: #CheckoutTest #test06 stamp: 'MP 11/2/2021 01:40:18'!
ERROR!
!Card methodsFor: 'nil' stamp: 'MP 11/2/2021 01:40:35'!
number

	^ number! !
!Card methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:40:36' prior: 50920967!
number

	^ number.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 01:40:37'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 01:40:37'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 01:40:37'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 01:40:37'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 01:40:37'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 01:40:37'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 01:40:37'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 01:40:37'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 01:40:37'!
ERROR!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 01:40:37'!
ERROR!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 01:40:37'!
ERROR!

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 01:40:37'!
PASSED!

!testRun: #CheckoutTest #test06 stamp: 'MP 11/2/2021 01:40:37'!
ERROR!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:40:45' prior: 50920662!
test02

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self
		assert: testObjectFactory firstProductSoldByTheStorePrice
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate).! !

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 01:41:00'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:41:26' prior: 50920920!
checkout: aCart charging: aCreditCard on: aDate
	
	self assertCartIsNotEmpty: aCart.
	(aCreditCard isExpiredOn: aDate) ifTrue: [ self error: self class expiredCardErrorDescription ].
	(aCreditCard number size < 16) ifTrue: [ self error: self class invalidCardNumberErrorDescription ].

	^ aCart totalPrice.
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 01:41:29'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 01:41:29'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 01:41:29'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 01:41:29'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 01:41:29'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 01:41:29'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 01:41:29'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 01:41:29'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 01:41:29'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 01:41:29'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 01:41:29'!
PASSED!

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 01:41:29'!
PASSED!

!testRun: #CheckoutTest #test06 stamp: 'MP 11/2/2021 01:41:29'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:41:46' prior: 50921027!
checkout: aCart charging: aCreditCard on: aDate
	
	self assertCartIsNotEmpty: aCart.
	(aCreditCard isExpiredOn: aDate) ifTrue: [ self error: self class expiredCardErrorDescription ].
	(aCreditCard number size < 16) ifTrue: [ self error: self class invalidCardNumberErrorDescription ].

	^ aCart totalPrice.
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:43:21'!
assertCard: aCreditCard isNotExpiredOn: aDate

	^ (aCreditCard isExpiredOn: aDate) ifTrue: [ self error: self class expiredCardErrorDescription ]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:43:21' prior: 50921075!
checkout: aCart charging: aCreditCard on: aDate
	
	self assertCartIsNotEmpty: aCart.
	self assertCard: aCreditCard isNotExpiredOn: aDate.
	(aCreditCard number size < 16) ifTrue: [ self error: self class invalidCardNumberErrorDescription ].

	^ aCart totalPrice.
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:43:57'!
assertCardNumberIsValid: aCreditCard

	^ (aCreditCard number size < 16) ifTrue: [ self error: self class invalidCardNumberErrorDescription ]! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:43:57' prior: 50921096!
checkout: aCart charging: aCreditCard on: aDate
	
	self assertCartIsNotEmpty: aCart.
	self assertCard: aCreditCard isNotExpiredOn: aDate.
	self assertCardNumberIsValid: aCreditCard.

	^ aCart totalPrice.
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 01:44:01'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 01:44:01'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 01:44:01'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 01:44:01'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 01:44:01'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 01:44:01'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 01:44:01'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 01:44:01'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 01:44:01'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 01:44:01'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 01:44:01'!
PASSED!

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 01:44:01'!
PASSED!

!testRun: #CheckoutTest #test06 stamp: 'MP 11/2/2021 01:44:01'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 01:44:04'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 01:44:04'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 01:44:04'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 01:44:04'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 01:44:04'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 01:44:04'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 01:44:04'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 01:44:04'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 01:44:04'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 01:44:04'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 01:44:04'!
PASSED!

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 01:44:04'!
PASSED!

!testRun: #CheckoutTest #test06 stamp: 'MP 11/2/2021 01:44:04'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:44:09'!
m1: aDate m2: aCreditCard

	self assertCard: aCreditCard isNotExpiredOn: aDate.
	self assertCardNumberIsValid: aCreditCard! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:44:09' prior: 50921115!
checkout: aCart charging: aCreditCard on: aDate
	
	self assertCartIsNotEmpty: aCart.
	self m1: aDate m2: aCreditCard.

	^ aCart totalPrice.
! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:44:13' prior: 50921202!
checkout: aCart charging: aCreditCard on: aDate
	
	self assertCartIsNotEmpty: aCart.
	self assertCard: aCreditCard isNotExpiredOn: aDate.
	self assertCardNumberIsValid: aCreditCard.

	^ aCart totalPrice.
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 01:44:15'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 01:44:15'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 01:44:15'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 01:44:15'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 01:44:15'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 01:44:15'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 01:44:15'!
PASSED!

!testRun: #CheckoutTest #test01 stamp: 'MP 11/2/2021 01:44:15'!
PASSED!

!testRun: #CheckoutTest #test02 stamp: 'MP 11/2/2021 01:44:15'!
PASSED!

!testRun: #CheckoutTest #test03 stamp: 'MP 11/2/2021 01:44:15'!
PASSED!

!testRun: #CheckoutTest #test04 stamp: 'MP 11/2/2021 01:44:15'!
PASSED!

!testRun: #CheckoutTest #test05 stamp: 'MP 11/2/2021 01:44:15'!
PASSED!

!testRun: #CheckoutTest #test06 stamp: 'MP 11/2/2021 01:44:15'!
PASSED!

!methodRemoval: Cashier #m1:m2: stamp: 'MP 11/2/2021 01:44:23'!
m1: aDate m2: aCreditCard

	self assertCard: aCreditCard isNotExpiredOn: aDate.
	self assertCardNumberIsValid: aCreditCard!
!Cashier methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:44:38'!
m1: asdf m2: asd

	self.
! !

!methodRemoval: Cashier #m1:m2: stamp: 'MP 11/2/2021 01:45:37'!
m1: asdf m2: asd

	self.
!

----SNAPSHOT----(2 November 2021 01:46:10) CuisUniversity-4913.image priorSource: 18851140!

----SNAPSHOT----(2 November 2021 01:46:26) CuisUniversity-4913.image priorSource: 18867704!
!Cashier methodsFor: 'checkout' stamp: 'MP 11/2/2021 01:51:09' prior: 50921210!
checkout: aCart charging: aCreditCard on: aDate

	self assertCartIsNotEmpty: aCart.
	self assertCard: aCreditCard isNotExpiredOn: aDate.
	self assertCardNumberIsValid: aCreditCard.

	^ aCart totalPrice.
! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:57:05'!
test07

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory invalidNumberCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier invalidCardNumberErrorDescription equals: anException messageText ].! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:57:22'!
test01CannotCheckoutWithEmptyCart

	| cart cashier |
	cart _ testObjectFactory createCart. 
	cashier _ testObjectFactory createCashier.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory validCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].! !

!methodRemoval: CheckoutTest #test01 stamp: 'MP 11/2/2021 01:57:22'!
test01

	| cart cashier |
	cart _ testObjectFactory createCart. 
	cashier _ testObjectFactory createCashier.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory validCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError | self assert: Cashier emptyCartErrorDescription equals: anError messageText ].!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:58:14'!
test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self
		assert: testObjectFactory firstProductSoldByTheStorePrice
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate).! !

!methodRemoval: CheckoutTest #test02 stamp: 'MP 11/2/2021 01:58:14'!
test02

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self
		assert: testObjectFactory firstProductSoldByTheStorePrice
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate).!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:58:42'!
test03CheckoutOfCartWithMultipleItemsReturnsAReceiptWithASumOfTheirPrices

	| cart cashier quantity |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	
	self 
		assert: (quantity * testObjectFactory firstProductSoldByTheStorePrice)
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate).! !

!methodRemoval: CheckoutTest #test03 stamp: 'MP 11/2/2021 01:58:42'!
test03

	| cart cashier quantity |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	
	self 
		assert: (quantity * testObjectFactory firstProductSoldByTheStorePrice)
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate).!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:59:20'!
test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice

	| cart cashier quantity |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	
	self 
		assert: (quantity * testObjectFactory firstProductSoldByTheStorePrice)
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate).! !

!methodRemoval: CheckoutTest #test03CheckoutOfCartWithMultipleItemsReturnsAReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 01:59:20'!
test03CheckoutOfCartWithMultipleItemsReturnsAReceiptWithASumOfTheirPrices

	| cart cashier quantity |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	
	self 
		assert: (quantity * testObjectFactory firstProductSoldByTheStorePrice)
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate).!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:59:31'!
test04CheckoutOfCartWithMultipleItemsReturnsAReceiptWithASumOfTheirPrices

	| cart cashier quantity expectedRecepit |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: testObjectFactory secondProductSoldByTheStore.
	
	expectedRecepit _
		(quantity * testObjectFactory firstProductSoldByTheStorePrice) +
		(testObjectFactory secondProductSoldByTheStorePrice).
	
	self 
		assert: expectedRecepit
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate).! !

!methodRemoval: CheckoutTest #test04 stamp: 'MP 11/2/2021 01:59:31'!
test04

	| cart cashier quantity expectedRecepit |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: testObjectFactory secondProductSoldByTheStore.
	
	expectedRecepit _
		(quantity * testObjectFactory firstProductSoldByTheStorePrice) +
		(testObjectFactory secondProductSoldByTheStorePrice).
	
	self 
		assert: expectedRecepit
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate).!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 01:59:35'!
test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices

	| cart cashier quantity expectedRecepit |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: testObjectFactory secondProductSoldByTheStore.
	
	expectedRecepit _
		(quantity * testObjectFactory firstProductSoldByTheStorePrice) +
		(testObjectFactory secondProductSoldByTheStorePrice).
	
	self 
		assert: expectedRecepit
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate).! !

!methodRemoval: CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsAReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 01:59:35'!
test04CheckoutOfCartWithMultipleItemsReturnsAReceiptWithASumOfTheirPrices

	| cart cashier quantity expectedRecepit |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: testObjectFactory secondProductSoldByTheStore.
	
	expectedRecepit _
		(quantity * testObjectFactory firstProductSoldByTheStorePrice) +
		(testObjectFactory secondProductSoldByTheStorePrice).
	
	self 
		assert: expectedRecepit
		equals: (cashier 
			checkout: cart 
			charging: testObjectFactory validCard 
			on: testObjectFactory fixedDate).!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:00:16'!
test05CannotCheckoutExpiredCard

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory expiredCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier expiredCardErrorDescription equals: anException messageText ].! !

!methodRemoval: CheckoutTest #test05 stamp: 'MP 11/2/2021 02:00:16'!
test05

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory expiredCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier expiredCardErrorDescription equals: anException messageText ].!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:00:21'!
test05CannotCheckoutWithExpiredCard

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory expiredCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier expiredCardErrorDescription equals: anException messageText ].! !

!methodRemoval: CheckoutTest #test05CannotCheckoutExpiredCard stamp: 'MP 11/2/2021 02:00:21'!
test05CannotCheckoutExpiredCard

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory expiredCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier expiredCardErrorDescription equals: anException messageText ].!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:00:29'!
test06CannotCheckoutWithInvalidNumberCard

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory invalidNumberCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier invalidCardNumberErrorDescription equals: anException messageText ].! !

!methodRemoval: CheckoutTest #test06 stamp: 'MP 11/2/2021 02:00:29'!
test06

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory invalidNumberCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier invalidCardNumberErrorDescription equals: anException messageText ].!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:02:51' prior: 50921282!
test07

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory cardWithoutFunds
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier invalidCardNumberErrorDescription equals: anException messageText ].! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:06:22'!
cardWithoutFunds
	
	^ Card withNumber: self cardNumberWithoutFunds expiringAt: (December of: 2021).! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:06:38'!
cardNumberWithoutFunds
	
	^ '4509790000006789'! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:08:03' prior: 50915453!
createCashier

	^ Cashier withMerchantProcessorXX: self defaultSimulatedMP.! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:08:07' prior: 50921662!
createCashier

	^ Cashier withMerchantProcessorXX: self defaultSimulatedMP.! !

!classDefinition: #SimulatedMP category: 'TusLibros-It2' stamp: 'MP 11/2/2021 02:12:58'!
Object subclass: #SimulatedMP
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It2'!
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:12:54'!
defaultSimulatedMP

	^ SimulatedMP .! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:15:38' prior: 50921681!
defaultSimulatedMP

	^ SimulatedMP withNoFundsCard: self cardWithoutFundsNumber.
! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:15:51'!
cardWithoutFundsNumber
	
	^ '4509790000006789'! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:15:51' prior: 50921651!
cardWithoutFunds
	
	^ Card withNumber: self cardWithoutFundsNumber expiringAt: (December of: 2021).! !

!methodRemoval: TestObjectFactory #cardNumberWithoutFunds stamp: 'MP 11/2/2021 02:15:51'!
cardNumberWithoutFunds
	
	^ '4509790000006789'!

!classDefinition: 'SimulatedMP class' category: 'TusLibros-It2' stamp: 'MP 11/2/2021 02:16:20'!
SimulatedMP class
	instanceVariableNames: 'noFundsCardNumber'!
!SimulatedMP class methodsFor: 'nil' stamp: 'MP 11/2/2021 02:16:19'!
withNoFundsCard: aNoFundsCardNumber

	noFundsCardNumber _ aNoFundsCardNumber! !
!SimulatedMP class methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:16:42' prior: 50921711!
withNoFundsCard: aNoFundsCardNumber

	^self new initializeWithNoFundsCard: aNoFundsCardNumber.! !

!classDefinition: #SimulatedMP category: 'TusLibros-It2' stamp: 'MP 11/2/2021 02:17:05'!
Object subclass: #SimulatedMP
	instanceVariableNames: 'noFundsCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It2'!
!SimulatedMP methodsFor: 'nil' stamp: 'MP 11/2/2021 02:17:04'!
initializeWithNoFundsCard: aNoFundsCardNumber

	noFundsCardNumber _ aNoFundsCardNumber! !
!SimulatedMP methodsFor: 'nil' stamp: 'MP 11/2/2021 02:19:44'!
charge: anAmount to: aCreditCard

	aCreditCard number = noFundsCardNumber ifTrue: [ self error: self class cardWithoutFundsErrorDescription ]! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:19:54' prior: 50921634!
test07

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory cardWithoutFunds
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier invalidCardNumberErrorDescription equals: anException messageText ].! !
!Cashier methodsFor: 'checkout' stamp: 'MP 11/2/2021 02:20:22' prior: 50921273!
checkout: aCart charging: aCreditCard on: aDate

	| totalPrice |
	self assertCartIsNotEmpty: aCart.
	self assertCard: aCreditCard isNotExpiredOn: aDate.
	self assertCardNumberIsValid: aCreditCard.

	totalPrice _ aCart totalPrice.
	
	
	
	^ totalPrice
! !

Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It2'!

!classDefinition: #Cashier category: 'TusLibros-It2' stamp: 'MP 11/2/2021 02:20:34'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It2'!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:20:49'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:20:49'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:20:49'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:20:49'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:20:49'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:20:49'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:20:49'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:20:49'!
ERROR!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:20:49'!
ERROR!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:20:49'!
ERROR!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:20:49'!
ERROR!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:20:49'!
ERROR!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:20:49'!
ERROR!

!testRun: #CheckoutTest #test07 stamp: 'MP 11/2/2021 02:20:49'!
ERROR!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:20:55'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'MP 11/2/2021 02:21:02'!
withMerchantProcessorXX: aSimulatedMP 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithMerchantProcessorXX: aSimulatedMP ! !
!Cashier class methodsFor: 'instance creation' stamp: 'MP 11/2/2021 02:21:14' prior: 50921832!
withMerchantProcessorXX: aMerchantProcessor 

	^self new initializeWithMerchantProcessorXX: aMerchantProcessor ! !

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:21:15'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros-It2' stamp: 'MP 11/2/2021 02:21:28'!
Object subclass: #Cashier
	instanceVariableNames: 'merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It2'!
!Cashier methodsFor: 'initialization' stamp: 'MP 11/2/2021 02:21:28'!
initializeWithMerchantProcessorXX: aMerchantProcessor 
	self shouldBeImplemented.
	merchantProcessor := aMerchantProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'MP 11/2/2021 02:21:31' prior: 50921859!
initializeWithMerchantProcessorXX: aMerchantProcessor 

	merchantProcessor := aMerchantProcessor.! !
!Cashier methodsFor: 'initialization' stamp: 'MP 11/2/2021 02:21:41' prior: 50921866!
initializeWithMerchantProcessorXX: aMerchantProcessor 

	merchantProcessor _ aMerchantProcessor.! !

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:21:42'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:21:45'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:21:46'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:21:46'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:21:46'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:21:46'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:21:46'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:21:46'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:21:46'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:21:46'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:21:46'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:21:46'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:21:46'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:21:46'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:21:46'!
PASSED!

!testRun: #CheckoutTest #test07 stamp: 'MP 11/2/2021 02:21:46'!
FAILURE!

!testRun: #CheckoutTest #test07 stamp: 'MP 11/2/2021 02:21:46'!
FAILURE!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:22:31' prior: 50921743!
test07

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory cardWithoutFunds
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: Cashier cardWithNoFundsErrorDescription equals: anException messageText ].! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:23:45' prior: 50921934!
test07

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory cardWithoutFunds
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: SimulatedMP  equals: anException messageText ].! !
!SimulatedMP class methodsFor: 'nil' stamp: 'MP 11/2/2021 02:24:33'!
cardWithoutFundsErrorDescription

	^ 'card has no funds'! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:24:42' prior: 50921952!
test07

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory cardWithoutFunds
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: SimulatedMP cardWithoutFundsErrorDescription equals: anException messageText ].! !

!testRun: #CheckoutTest #test07 stamp: 'MP 11/2/2021 02:24:43'!
FAILURE!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:25:06' prior: 50921973!
test07

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	cashier 
		checkout: cart 
		charging: testObjectFactory cardWithoutFunds
		on: testObjectFactory fixedDate.
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory cardWithoutFunds
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: SimulatedMP cardWithoutFundsErrorDescription equals: anException messageText ].! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:25:11' prior: 50921993!
test07

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	cashier 
		checkout: cart 
		charging: testObjectFactory cardWithoutFunds
		on: testObjectFactory fixedDate.
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory cardWithoutFunds
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: SimulatedMP cardWithoutFundsErrorDescription equals: anException messageText ].! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:25:22' prior: 50922015!
test07

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	cashier 
		checkout: cart 
		charging: testObjectFactory cardWithoutFunds
		on: testObjectFactory fixedDate.
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory cardWithoutFunds
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: SimulatedMP cardWithoutFundsErrorDescription equals: anException messageText ].! !
!Cashier methodsFor: 'checkout' stamp: 'MP 11/2/2021 02:26:00' prior: 50921761!
checkout: aCart charging: aCreditCard on: aDate

	| totalPrice |
	self assertCartIsNotEmpty: aCart.
	self assertCard: aCreditCard isNotExpiredOn: aDate.
	self assertCardNumberIsValid: aCreditCard.

	totalPrice _ aCart totalPrice.
	
	merchantProcessor charge: totalPrice to: aCreditCard.
	
	^ totalPrice
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:26:01'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:26:01'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:26:01'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:26:01'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:26:01'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:26:01'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:26:01'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:26:01'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:26:01'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:26:01'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:26:01'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:26:01'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:26:01'!
PASSED!

!testRun: #CheckoutTest #test07 stamp: 'MP 11/2/2021 02:26:01'!
ERROR!

!testRun: #CheckoutTest #test07 stamp: 'MP 11/2/2021 02:26:01'!
ERROR!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:26:11' prior: 50922037!
test07

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory cardWithoutFunds
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: SimulatedMP cardWithoutFundsErrorDescription equals: anException messageText ].! !

!testRun: #CheckoutTest #test07 stamp: 'MP 11/2/2021 02:26:12'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:26:14'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:26:14'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:26:14'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:26:14'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:26:14'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:26:14'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:26:14'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:26:14'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:26:14'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:26:14'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:26:14'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:26:14'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:26:14'!
PASSED!

!testRun: #CheckoutTest #test07 stamp: 'MP 11/2/2021 02:26:14'!
PASSED!
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:27:21'!
test08

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory startWizard
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: SimulatedMP stolenCardErrorDescription equals: anException messageText ].! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:27:28' prior: 50922185!
test08

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory stolenCard
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: SimulatedMP stolenCardErrorDescription equals: anException messageText ].! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:27:51'!
stolenCard
	
	^ Card withNumber: self stolenCardNumber expiringAt: (December of: 2021).! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:28:04'!
stolenCardNumber
	
	^ '450979000000000'! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:28:25' prior: 50921686!
defaultSimulatedMP

	^ SimulatedMP
		withNoFundsCard: self cardWithoutFundsNumber
		withStolenCard: self stolenCardNumber.
! !

!classDefinition: #SimulatedMP category: 'TusLibros-It2' stamp: 'MP 11/2/2021 02:28:49'!
Object subclass: #SimulatedMP
	instanceVariableNames: 'noFundsCardNumber stolenCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It2'!
!SimulatedMP methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:28:47'!
initializeWithNoFundsCard: aNoFundsCardNumber stolenCard: aStolenCardNumber

	noFundsCardNumber _ aNoFundsCardNumber.
	stolenCardNumber _ aStolenCardNumber.! !

!methodRemoval: SimulatedMP #initializeWithNoFundsCard: stamp: 'MP 11/2/2021 02:28:51'!
initializeWithNoFundsCard: aNoFundsCardNumber

	noFundsCardNumber _ aNoFundsCardNumber!
!SimulatedMP class methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:29:11'!
withNoFundsCard: aNoFundsCardNumber stolenCardNumber: aStolenCardNumber

	^self new initializeWithNoFundsCard: aNoFundsCardNumber stolenCard: aStolenCardNumber .! !

!methodRemoval: SimulatedMP class #withNoFundsCard: stamp: 'MP 11/2/2021 02:29:13'!
withNoFundsCard: aNoFundsCardNumber

	^self new initializeWithNoFundsCard: aNoFundsCardNumber.!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:29:16'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:29:16'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:29:16'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:29:16'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:29:16'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:29:16'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:29:16'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:29:16'!
ERROR!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:29:16'!
ERROR!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:29:16'!
ERROR!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:29:16'!
ERROR!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:29:16'!
ERROR!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:29:16'!
ERROR!

!testRun: #CheckoutTest #test07 stamp: 'MP 11/2/2021 02:29:16'!
ERROR!

!testRun: #CheckoutTest #test08 stamp: 'MP 11/2/2021 02:29:16'!
ERROR!
!SimulatedMP class methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:29:21' prior: 50922260!
withNoFundsCard: aNoFundsCardNumber stolenCardNumber: aStolenCardNumber

	^self new initializeWithNoFundsCard: aNoFundsCardNumber stolenCard: aStolenCardNumber.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:29:22'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:29:22'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:29:22'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:29:22'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:29:22'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:29:22'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:29:22'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:29:22'!
ERROR!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:29:23'!
ERROR!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:29:23'!
ERROR!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:29:23'!
ERROR!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:29:23'!
ERROR!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:29:23'!
ERROR!

!testRun: #CheckoutTest #test07 stamp: 'MP 11/2/2021 02:29:23'!
ERROR!

!testRun: #CheckoutTest #test08 stamp: 'MP 11/2/2021 02:29:23'!
ERROR!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:29:25'!
ERROR!
!SimulatedMP methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:29:44' prior: 50922246!
initializeWithNoFundsCard: aNoFundsCardNumber stolenCard: aStolenCardNumber

	noFundsCardNumber _ aNoFundsCardNumber.
	stolenCardNumber _ aStolenCardNumber.! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:30:11' prior: 50922231!
defaultSimulatedMP

	^ SimulatedMP
		withNoFundsCard: self cardWithoutFundsNumber
		stolenCard: self stolenCardNumber.
! !
!SimulatedMP class methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:30:27'!
withNoFundsCard: aNoFundsCardNumber stolenCard: aStolenCardNumber

	^self new initializeWithNoFundsCard: aNoFundsCardNumber stolenCard: aStolenCardNumber.! !

!methodRemoval: SimulatedMP class #withNoFundsCard:stolenCardNumber: stamp: 'MP 11/2/2021 02:30:27'!
withNoFundsCard: aNoFundsCardNumber stolenCardNumber: aStolenCardNumber

	^self new initializeWithNoFundsCard: aNoFundsCardNumber stolenCard: aStolenCardNumber.!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:30:36'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:30:36'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:30:36'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:30:36'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:30:36'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:30:36'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:30:36'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:30:36'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:30:36'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:30:36'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:30:36'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:30:36'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:30:36'!
PASSED!

!testRun: #CheckoutTest #test07 stamp: 'MP 11/2/2021 02:30:36'!
PASSED!

!testRun: #CheckoutTest #test08 stamp: 'MP 11/2/2021 02:30:36'!
ERROR!

!testRun: #CheckoutTest #test08 stamp: 'MP 11/2/2021 02:30:36'!
ERROR!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:30:44'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:30:44'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:30:44'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:30:44'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:30:44'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:30:44'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:30:44'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:30:44'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:30:44'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:30:44'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:30:44'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:30:44'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:30:44'!
PASSED!

!testRun: #CheckoutTest #test07 stamp: 'MP 11/2/2021 02:30:44'!
PASSED!

!testRun: #CheckoutTest #test08 stamp: 'MP 11/2/2021 02:30:44'!
ERROR!

!testRun: #CheckoutTest #test08 stamp: 'MP 11/2/2021 02:30:44'!
ERROR!
!SimulatedMP class methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:30:53'!
stolenCardErrorDescription
	self shouldBeImplemented.! !
!SimulatedMP class methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:31:00' prior: 50922517!
stolenCardErrorDescription
	
	^ 'stolen card'! !
!SimulatedMP class methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:31:01' prior: 50922522!
stolenCardErrorDescription
	
	^ 'stolen card'.! !

!testRun: #CheckoutTest #test08 stamp: 'MP 11/2/2021 02:31:02'!
FAILURE!

!testRun: #CheckoutTest #test08 stamp: 'MP 11/2/2021 02:31:21'!
FAILURE!
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:31:46' prior: 50922226!
stolenCardNumber
	
	^ '45097900000000'! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:31:47'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:31:47'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:31:47'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:31:47'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:31:47'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:31:47'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:31:47'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:31:47'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:31:47'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:31:47'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:31:47'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:31:47'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:31:47'!
PASSED!

!testRun: #CheckoutTest #test07 stamp: 'MP 11/2/2021 02:31:47'!
PASSED!

!testRun: #CheckoutTest #test08 stamp: 'MP 11/2/2021 02:31:47'!
FAILURE!

!testRun: #CheckoutTest #test08 stamp: 'MP 11/2/2021 02:31:47'!
FAILURE!
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:32:02' prior: 50922536!
stolenCardNumber
	
	^ '4509790000000000'! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:32:02'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:32:02'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:32:02'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:32:02'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:32:02'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:32:02'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:32:02'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:32:02'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:32:02'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:32:02'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:32:02'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:32:02'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:32:02'!
PASSED!

!testRun: #CheckoutTest #test07 stamp: 'MP 11/2/2021 02:32:02'!
PASSED!

!testRun: #CheckoutTest #test08 stamp: 'MP 11/2/2021 02:32:02'!
FAILURE!

!testRun: #CheckoutTest #test08 stamp: 'MP 11/2/2021 02:32:02'!
FAILURE!
!SimulatedMP methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:32:38' prior: 50921735!
charge: anAmount to: aCreditCard

	aCreditCard number = noFundsCardNumber ifTrue: [ self error: self class cardWithoutFundsErrorDescription ].
	aCreditCard number = stolenCardNumber ifTrue: [ self error: self class stolenCardErrorDescription ].! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:32:39'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:32:39'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:32:39'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:32:39'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:32:39'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:32:39'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:32:39'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:32:39'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:32:39'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:32:39'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:32:39'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:32:39'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:32:39'!
PASSED!

!testRun: #CheckoutTest #test07 stamp: 'MP 11/2/2021 02:32:39'!
PASSED!

!testRun: #CheckoutTest #test08 stamp: 'MP 11/2/2021 02:32:39'!
PASSED!
!SimulatedMP methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:33:06'!
assertCardHasFunds: aCreditCard

	^ aCreditCard number = noFundsCardNumber ifTrue: [ self error: self class cardWithoutFundsErrorDescription ]! !
!SimulatedMP methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:33:06' prior: 50922647!
charge: anAmount to: aCreditCard

	self assertCardHasFunds: aCreditCard.
	aCreditCard number = stolenCardNumber ifTrue: [ self error: self class stolenCardErrorDescription ].! !
!SimulatedMP methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:33:15'!
assertCardIsntStolen: aCreditCard

	^ aCreditCard number = stolenCardNumber ifTrue: [ self error: self class stolenCardErrorDescription ]! !
!SimulatedMP methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:33:15' prior: 50922714!
charge: anAmount to: aCreditCard

	self assertCardHasFunds: aCreditCard.
	self assertCardIsntStolen: aCreditCard.! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:36:03'!
notExpiredMonthOfYear

	^ December of: 2021! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:36:03' prior: 50922220!
stolenCard
	
	^ Card withNumber: self stolenCardNumber expiringAt: (self notExpiredMonthOfYear).! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:36:03' prior: 50920783!
validCard
	
	^ Card withNumber: '4509790000001234' expiringAt: (self notExpiredMonthOfYear).! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:36:03' prior: 50920777!
invalidNumberCard
	
	^ Card withNumber: '450979000000' expiringAt: (self notExpiredMonthOfYear).! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:36:03' prior: 50921696!
cardWithoutFunds
	
	^ Card withNumber: self cardWithoutFundsNumber expiringAt: (self notExpiredMonthOfYear).! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:36:10'!
expiredMonthOfYear

	^ September of: 2021! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:36:10' prior: 50920789!
expiredCard
	
	^ Card withNumber: '4509790000001234' expiringAt: (self expiredMonthOfYear).! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:36:15' prior: 50922771!
expiredCard
	
	^ Card withNumber: '4509790000001234' expiringAt: self expiredMonthOfYear.! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:36:21' prior: 50922760!
cardWithoutFunds
	
	^ Card withNumber: self cardWithoutFundsNumber expiringAt: self notExpiredMonthOfYear.! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:36:26' prior: 50922754!
invalidNumberCard
	
	^ Card withNumber: '450979000000' expiringAt: self notExpiredMonthOfYear.! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:36:31' prior: 50922742!
stolenCard
	
	^ Card withNumber: self stolenCardNumber expiringAt: self notExpiredMonthOfYear.! !
!TestObjectFactory methodsFor: 'cards' stamp: 'MP 11/2/2021 02:36:36' prior: 50922748!
validCard
	
	^ Card withNumber: '4509790000001234' expiringAt: self notExpiredMonthOfYear.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:38:08'!
test07CannotCheckoutCardWithoutFunds

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory cardWithoutFunds
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: SimulatedMP cardWithoutFundsErrorDescription equals: anException messageText ].! !

!methodRemoval: CheckoutTest #test07 stamp: 'MP 11/2/2021 02:38:08'!
test07

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory cardWithoutFunds
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: SimulatedMP cardWithoutFundsErrorDescription equals: anException messageText ].!
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:38:14'!
test08CannotcheckoutWithStolenCard

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory stolenCard
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: SimulatedMP stolenCardErrorDescription equals: anException messageText ].! !

!methodRemoval: CheckoutTest #test08 stamp: 'MP 11/2/2021 02:38:14'!
test08

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory stolenCard
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: SimulatedMP stolenCardErrorDescription equals: anException messageText ].!
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:38:20'!
test07CannotCheckoutWithCardWithoutFunds

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory cardWithoutFunds
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: SimulatedMP cardWithoutFundsErrorDescription equals: anException messageText ].! !

!methodRemoval: CheckoutTest #test07CannotCheckoutCardWithoutFunds stamp: 'MP 11/2/2021 02:38:20'!
test07CannotCheckoutCardWithoutFunds

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory cardWithoutFunds
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: SimulatedMP cardWithoutFundsErrorDescription equals: anException messageText ].!
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:38:23'!
test08CannotCheckoutWithStolenCard

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory stolenCard
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: SimulatedMP stolenCardErrorDescription equals: anException messageText ].! !

!methodRemoval: CheckoutTest #test08CannotcheckoutWithStolenCard stamp: 'MP 11/2/2021 02:38:23'!
test08CannotcheckoutWithStolenCard

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self should: [ cashier 
				checkout: cart 
				charging: testObjectFactory stolenCard
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: SimulatedMP stolenCardErrorDescription equals: anException messageText ].!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/2/2021 02:38:30'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:38:30'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:38:30'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:38:30'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:38:30'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:38:30'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:38:30'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:38:30'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:38:30'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:38:30'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:38:30'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:38:30'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:38:30'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:38:30'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/2/2021 02:38:30'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/2/2021 02:38:30'!
PASSED!

----SNAPSHOT----(2 November 2021 02:38:33) CuisUniversity-4913.image priorSource: 18867797!
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:41:55'!
assertCheckingOutCharging: aCard raises: anErrorMessage

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: cart 
				charging: aCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: anErrorMessage equals: anException messageText ].! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:41:58' prior: 50923005!
assertCheckingOutCharging: aCard raises: anErrorMessage

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: cart 
				charging: aCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: anErrorMessage equals: anException messageText ].! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:42:36' prior: 50921556!
test05CannotCheckoutWithExpiredCard

	
	self assertCheckingOutCharging: testObjectFactory expiredCard raises: Cashier expiredCardErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:42:43' prior: 50923043!
test05CannotCheckoutWithExpiredCard
	
	self assertCheckingOutCharging: testObjectFactory expiredCard raises: Cashier expiredCardErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:43:20'!
assertCheckoutCharging: aCard raises: anErrorMessage

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: cart 
				charging: aCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: anErrorMessage equals: anException messageText ].! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:43:20' prior: 50923051!
test05CannotCheckoutWithExpiredCard
	
	self assertCheckoutCharging: testObjectFactory expiredCard raises: Cashier expiredCardErrorDescription.! !

!methodRemoval: CheckoutTest #assertCheckingOutCharging:raises: stamp: 'MP 11/2/2021 02:43:20'!
assertCheckingOutCharging: aCard raises: anErrorMessage

	| cart cashier |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: cart 
				charging: aCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: anErrorMessage equals: anException messageText ].!
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:43:29' prior: 50923077!
test05CannotCheckoutWithExpiredCard
	
	self 
		assertCheckoutCharging: testObjectFactory expiredCard
		raises: Cashier expiredCardErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:43:31' prior: 50923103!
test05CannotCheckoutWithExpiredCard
	
	self assertCheckoutCharging: testObjectFactory expiredCard
		raises: Cashier expiredCardErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:43:46' prior: 50923111!
test05CannotCheckoutWithExpiredCard
	
	self assertCheckoutCharging: testObjectFactory expiredCard
		raises: Cashier expiredCardErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:43:49' prior: 50923119!
test05CannotCheckoutWithExpiredCard
	
	self
		assertCheckoutCharging: testObjectFactory expiredCard
		raises: Cashier expiredCardErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:43:50' prior: 50923127!
test05CannotCheckoutWithExpiredCard
	
	self
assertCheckoutCharging: testObjectFactory expiredCard
		raises: Cashier expiredCardErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:43:52' prior: 50923135!
test05CannotCheckoutWithExpiredCard
	
	self assertCheckoutCharging: testObjectFactory expiredCard
		raises: Cashier expiredCardErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:44:10' prior: 50921595!
test06CannotCheckoutWithInvalidNumberCard

	self assertCheckoutCharging: testObjectFactory invalidNumberCard
		raises: Cashier invalidCardNumberErrorDescription! !

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:44:11'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:44:11'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:44:11'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:44:11'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:44:11'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:44:11'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:44:11'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:44:11'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:44:11'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:44:11'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:44:11'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:44:11'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:44:11'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:44:11'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/2/2021 02:44:11'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/2/2021 02:44:11'!
PASSED!
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:44:32' prior: 50922876!
test07CannotCheckoutWithCardWithoutFunds

	self assertCheckoutCharging: testObjectFactory cardWithoutFunds
		raises: SimulatedMP cardWithoutFundsErrorDescription
! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:44:47' prior: 50922913!
test08CannotCheckoutWithStolenCard

	self assertCheckoutCharging: testObjectFactory stolenCard
		raises: SimulatedMP stolenCardErrorDescription.! !

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/2/2021 02:44:48'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:44:48'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:44:48'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:44:48'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:44:48'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:44:48'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:44:48'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:44:48'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:44:48'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:44:48'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:44:49'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:44:49'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:44:49'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:44:49'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/2/2021 02:44:49'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/2/2021 02:44:49'!
PASSED!
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:44:52' prior: 50923213!
test07CannotCheckoutWithCardWithoutFunds

	self assertCheckoutCharging: testObjectFactory cardWithoutFunds
		raises: SimulatedMP cardWithoutFundsErrorDescription.
! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:44:54' prior: 50923151!
test06CannotCheckoutWithInvalidNumberCard

	self assertCheckoutCharging: testObjectFactory invalidNumberCard
		raises: Cashier invalidCardNumberErrorDescription.! !

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:44:56'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:44:56'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:44:56'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:44:56'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:44:56'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:44:56'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:44:56'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:44:56'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:44:56'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:44:56'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:44:56'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:44:56'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:44:56'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:44:56'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/2/2021 02:44:56'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/2/2021 02:44:56'!
PASSED!
!CheckoutTest methodsFor: 'assertions' stamp: 'MP 11/2/2021 02:45:57'!
assertCashier: aCashier checkout: aCart charging: aCard raises: anErrorMessage
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ aCashier 
				checkout: aCart 
				charging: aCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: anErrorMessage equals: anException messageText ].! !
!CheckoutTest methodsFor: 'assertions' stamp: 'MP 11/2/2021 02:47:18' prior: 50923058!
assertCheckoutCharging: aCard raises: anErrorMessage

	| cart cashier |
	cart _ testObjectFactory createCart.
	cart add: testObjectFactory firstProductSoldByTheStore.

	cashier _ testObjectFactory createCashier.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: cart 
				charging: aCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: anErrorMessage equals: anException messageText ].! !
!CheckoutTest methodsFor: 'assertions' stamp: 'MP 11/2/2021 02:47:47'!
assertCheckout: aCart charging: aCard raises: anErrorMessage
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ | cashier | cashier 
				checkout: aCart 
				charging: aCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: anErrorMessage equals: anException messageText ].! !
!CheckoutTest methodsFor: 'assertions' stamp: 'MP 11/2/2021 02:47:58' prior: 50923366!
assertCheckoutCharging: aCard raises: anErrorMessage

	| cart cashier |
	cart _ testObjectFactory createCart.
	cart add: testObjectFactory firstProductSoldByTheStore.
	cashier _ testObjectFactory createCashier.

	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: cart 
				charging: aCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: anErrorMessage equals: anException messageText ].! !
!CheckoutTest methodsFor: 'assertions' stamp: 'MP 11/2/2021 02:48:16' prior: 50923385!
assertCheckout: aCart charging: aCard raises: anErrorMessage
	
		| cashier |
	cashier _ testObjectFactory createCashier.

	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: aCart 
				charging: aCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: anErrorMessage equals: anException messageText ].! !
!CheckoutTest methodsFor: 'assertions' stamp: 'MP 11/2/2021 02:48:19' prior: 50923419!
assertCheckout: aCart charging: aCard raises: anErrorMessage
	
	| cashier |
	cashier _ testObjectFactory createCashier.

	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: aCart 
				charging: aCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: anErrorMessage equals: anException messageText ].! !
!CheckoutTest methodsFor: 'assertions' stamp: 'MP 11/2/2021 02:48:21' prior: 50923435!
assertCheckout: aCart charging: aCard raises: anErrorMessage
	
	| cashier |
	cashier _ testObjectFactory createCashier.
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: aCart 
				charging: aCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: anErrorMessage equals: anException messageText ].! !

!methodRemoval: CheckoutTest #assertCheckoutCharging:raises: stamp: 'MP 11/2/2021 02:48:57'!
assertCheckoutCharging: aCard raises: anErrorMessage

	| cart cashier |
	cart _ testObjectFactory createCart.
	cart add: testObjectFactory firstProductSoldByTheStore.
	cashier _ testObjectFactory createCashier.

	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ cashier 
				checkout: cart 
				charging: aCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: anErrorMessage equals: anException messageText ].!
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:49:38' prior: 50921300!
test01CannotCheckoutWithEmptyCart

	| cart |
	cart _ testObjectFactory createCart. 

	self assertCheckout: cart charging: testObjectFactory validCard raises: Cashier emptyCartErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:49:55' prior: 50923486!
test01CannotCheckoutWithEmptyCart

	

	self assertCheckout: testObjectFactory createCart
		charging: testObjectFactory validCard
		raises: Cashier emptyCartErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:49:58' prior: 50923495!
test01CannotCheckoutWithEmptyCart


	self assertCheckout: testObjectFactory createCart
		charging: testObjectFactory validCard
		raises: Cashier emptyCartErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:49:58' prior: 50923504!
test01CannotCheckoutWithEmptyCart

	self assertCheckout: testObjectFactory createCart
		charging: testObjectFactory validCard
		raises: Cashier emptyCartErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:50:16' prior: 50923143!
test05CannotCheckoutWithExpiredCard
	
	
	| cart |
	cart _ testObjectFactory createCart.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self assertCheckoutCharging: testObjectFactory expiredCard
		raises: Cashier expiredCardErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:50:22' prior: 50923521!
test05CannotCheckoutWithExpiredCard
	
	
	| cart |
	cart _ testObjectFactory createCart.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self assertCheckout: cart charging: testObjectFactory expiredCard
		raises: Cashier expiredCardErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:50:43' prior: 50923532!
test05CannotCheckoutWithExpiredCard
	
	| cart |
	cart _ testObjectFactory createCart.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self assertCheckout: cart charging: testObjectFactory expiredCard
		raises: Cashier expiredCardErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:50:45' prior: 50923543!
test05CannotCheckoutWithExpiredCard

	| cart |
	cart _ testObjectFactory createCart.
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	self assertCheckout: cart charging: testObjectFactory expiredCard
		raises: Cashier expiredCardErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:50:49' prior: 50923554!
test05CannotCheckoutWithExpiredCard

	| cart |
	cart _ testObjectFactory createCart.
	cart add: testObjectFactory firstProductSoldByTheStore.

	self assertCheckout: cart charging: testObjectFactory expiredCard
		raises: Cashier expiredCardErrorDescription.! !
!TestObjectFactory methodsFor: 'store creation' stamp: 'MP 11/2/2021 02:51:36'!
createCartWithSingleProduct

	^self createCart
		add: self firstProductSoldByTheStore;
		yourself.! !
!TestObjectFactory methodsFor: 'store creation' stamp: 'MP 11/2/2021 02:51:39' prior: 50923576!
createCartWithSingleProduct

	^ self createCart
		add: self firstProductSoldByTheStore;
		yourself.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:52:01' prior: 50923565!
test05CannotCheckoutWithExpiredCard

	self assertCheckout: testObjectFactory createCartWithSingleProduct charging: testObjectFactory expiredCard
		raises: Cashier expiredCardErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:52:02' prior: 50923589!
test05CannotCheckoutWithExpiredCard

	self assertCheckout: testObjectFactory createCartWithSingleProduct 
		charging: testObjectFactory expiredCard
		raises: Cashier expiredCardErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:52:16' prior: 50923290!
test06CannotCheckoutWithInvalidNumberCard

	self assertCheckout: testObjectFactory createCartWithSingleProduct 
		charging: testObjectFactory invalidNumberCard
		raises: Cashier invalidCardNumberErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:52:24' prior: 50923282!
test07CannotCheckoutWithCardWithoutFunds

	self assertCheckout: testObjectFactory createCartWithSingleProduct 
		charging: testObjectFactory cardWithoutFunds
		raises: SimulatedMP cardWithoutFundsErrorDescription.
! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:52:25' prior: 50923617!
test07CannotCheckoutWithCardWithoutFunds

	self assertCheckout: testObjectFactory createCartWithSingleProduct
		charging: testObjectFactory cardWithoutFunds
		raises: SimulatedMP cardWithoutFundsErrorDescription.
! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:52:37' prior: 50923221!
test08CannotCheckoutWithStolenCard

	self assertCheckout: testObjectFactory createCartWithSingleProduct 
		charging: testObjectFactory stolenCard
		raises: SimulatedMP stolenCardErrorDescription.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/2/2021 02:52:39' prior: 50923637!
test08CannotCheckoutWithStolenCard

	self assertCheckout: testObjectFactory createCartWithSingleProduct
		charging: testObjectFactory stolenCard
		raises: SimulatedMP stolenCardErrorDescription.! !

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/2/2021 02:52:40'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:52:40'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:52:40'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:52:40'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:52:40'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:52:40'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:52:40'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:52:40'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:52:40'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:52:40'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:52:40'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:52:40'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:52:40'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:52:40'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/2/2021 02:52:40'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/2/2021 02:52:40'!
PASSED!

----SNAPSHOT----(2 November 2021 02:52:43) CuisUniversity-4913.image priorSource: 18923259!

!methodRemoval: CheckoutTest #assertCashier:checkout:charging:raises: stamp: 'MP 11/2/2021 02:52:57'!
assertCashier: aCashier checkout: aCart charging: aCard raises: anErrorMessage
	
	"TODO: assert de cosas que no tienen que pasar"
	self should: [ aCashier 
				checkout: aCart 
				charging: aCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: anErrorMessage equals: anException messageText ].!
!Cashier methodsFor: 'initialization' stamp: 'MP 11/2/2021 02:53:45'!
initializeWithMerchantProcessor: aMerchantProcessor 

	merchantProcessor _ aMerchantProcessor.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:53:45' prior: 50921842!
withMerchantProcessorXX: aMerchantProcessor 

	^self new initializeWithMerchantProcessor: aMerchantProcessor ! !

!methodRemoval: Cashier #initializeWithMerchantProcessorXX: stamp: 'MP 11/2/2021 02:53:45'!
initializeWithMerchantProcessorXX: aMerchantProcessor 

	merchantProcessor _ aMerchantProcessor.!
!Cashier class methodsFor: 'instance creation' stamp: 'MP 11/2/2021 02:54:11'!
withMerchantProcessor: aMerchantProcessor 

	^self new initializeWithMerchantProcessor: aMerchantProcessor ! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/2/2021 02:54:11' prior: 50921668!
createCashier

	^ Cashier withMerchantProcessor: self defaultSimulatedMP.! !

!methodRemoval: Cashier class #withMerchantProcessorXX: stamp: 'MP 11/2/2021 02:54:11'!
withMerchantProcessorXX: aMerchantProcessor 

	^self new initializeWithMerchantProcessor: aMerchantProcessor !
!Card class methodsFor: 'instance creation' stamp: 'MP 11/2/2021 02:55:31' prior: 50920795!
withNumber: aCardNumber expiringAt: anExpiryDate 

	^ self new initializeWithNumber: aCardNumber expiringAt: anExpiryDate .! !
!Card class methodsFor: 'instance creation' stamp: 'MP 11/2/2021 02:55:32' prior: 50923764!
withNumber: aCardNumber expiringAt: anExpiryDate 

	^ self new initializeWithNumber: aCardNumber expiringAt: anExpiryDate.! !
!Card class methodsFor: 'instance creation' stamp: 'MP 11/2/2021 02:55:36' prior: 50923771!
withNumber: aCardNumber expiringAt: anExpirationDAte 

	^ self new initializeWithNumber: aCardNumber expiringAt: anExpirationDAte.! !
!Card class methodsFor: 'instance creation' stamp: 'MP 11/2/2021 02:55:39' prior: 50923778!
withNumber: aCardNumber expiringAt: anExpirationDate 

	^ self new initializeWithNumber: aCardNumber expiringAt: anExpirationDate.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:55:41'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:55:41'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:55:41'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:55:41'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:55:41'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:55:41'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:55:41'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:55:41'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:55:41'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:55:41'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:55:41'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:55:41'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:55:41'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/2/2021 02:55:41'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/2/2021 02:55:41'!
PASSED!
!Cart class methodsFor: 'instance creation' stamp: 'MP 11/2/2021 02:55:49' prior: 50915124!
acceptingProductsFrom: aCatalog
	
	^ self new initializeWith: aCatalog.! !
!Cashier methodsFor: 'assertions' stamp: 'MP 11/2/2021 02:56:54'!
validCardNumberSize

	^ 16! !
!Cashier methodsFor: 'assertions' stamp: 'MP 11/2/2021 02:56:54' prior: 50921107!
assertCardNumberIsValid: aCreditCard

	^ (aCreditCard number size < self validCardNumberSize) ifTrue: [ self error: self class invalidCardNumberErrorDescription ]! !
!Cashier methodsFor: 'assertions' stamp: 'MP 11/2/2021 02:57:21' prior: 50923853!
assertCardNumberIsValid: aCreditCard

	^ (aCreditCard number size ~= self validCardNumberSize) ifTrue: [ self error: self class invalidCardNumberErrorDescription ]! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/2/2021 02:57:22'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/2/2021 02:57:22'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/2/2021 02:57:22'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/2/2021 02:57:22'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/2/2021 02:57:22'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/2/2021 02:57:22'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/2/2021 02:57:22'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/2/2021 02:57:22'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/2/2021 02:57:22'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/2/2021 02:57:22'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/2/2021 02:57:22'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/2/2021 02:57:22'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/2/2021 02:57:22'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/2/2021 02:57:22'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/2/2021 02:57:22'!
PASSED!
!SimulatedMP methodsFor: 'assertions' stamp: 'MP 11/2/2021 02:58:50'!
hasNoFunds: aCreditCard

	^ aCreditCard number = noFundsCardNumber! !
!SimulatedMP methodsFor: 'assertions' stamp: 'MP 11/2/2021 02:58:50' prior: 50922706!
assertCardHasFunds: aCreditCard

	^ (self hasNoFunds: aCreditCard) ifTrue: [ self error: self class cardWithoutFundsErrorDescription ]! !
!SimulatedMP methodsFor: 'assertions' stamp: 'MP 11/2/2021 02:59:09'!
isStolen: aCreditCard

	^ aCreditCard number = stolenCardNumber! !
!SimulatedMP methodsFor: 'assertions' stamp: 'MP 11/2/2021 02:59:09' prior: 50922723!
assertCardIsntStolen: aCreditCard

	^ (self isStolen: aCreditCard) ifTrue: [ self error: self class stolenCardErrorDescription ]! !
!SimulatedMP class methodsFor: 'instance creation' stamp: 'MP 11/2/2021 02:59:32' prior: 50922399!
withNoFundsCard: aNoFundsCardNumber stolenCard: aStolenCardNumber

	^ self new initializeWithNoFundsCard: aNoFundsCardNumber stolenCard: aStolenCardNumber.! !

----SNAPSHOT----(2 November 2021 02:59:42) CuisUniversity-4913.image priorSource: 18945847!
!SimulatedMP class methodsFor: 'instance creation' stamp: 'MP 11/2/2021 03:00:18' prior: 50923944!
withNoFundsCard: aNoFundsCardNumber stolenCard: aStolenCardNumber

	^ self new initializeWithNoFundsCard: aNoFundsCardNumber stolenCard: aStolenCardNumber.! !

----SNAPSHOT----(2 November 2021 03:01:28) CuisUniversity-4913.image priorSource: 18953630!

----STARTUP---- (3 November 2021 23:20:03) as /home/ignacio/Documents/Facultad/repos-isw1/isw1/vms/tus-libros-it2-vm/CuisUniversity-4913.image!


----End fileIn of /home/ignacio/Documents/Facultad/repos-isw1/isw1-ejs/20-TusLibros/it2/TusLibros-It2.st----!
!CheckoutTest methodsFor: 'assertions' stamp: 'IAR 11/3/2021 23:26:02' prior: 50919311!
assertCheckout: aCart charging: aCard raises: anErrorMessage
	
	| cashier |
	cashier _ testObjectFactory createCashier.
	
	self should: [ cashier 
				checkout: aCart 
				charging: aCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: anErrorMessage equals: anException messageText ].! !

----QUIT----(3 November 2021 23:35:43) CuisUniversity-4913.image priorSource: 18801479!

----STARTUP---- (4 November 2021 23:19:04) as /home/agus/Documents/inge1/linux64/CuisUniversity-4913.image!


----End fileIn of /home/agus/Documents/inge1/linux64/TusLibros-It2.st----!

Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It2'!

!classDefinition: #MerchantProcessor category: 'TusLibros-It2' stamp: 'AF 11/4/2021 23:21:32'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros-It2'!

MerchantProcessor subclass: #SimulatedMP
	instanceVariableNames: 'noFundsCardNumber stolenCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #SimulatedMP category: 'TusLibros' stamp: 'AF 11/4/2021 23:22:54'!
MerchantProcessor subclass: #SimulatedMP
	instanceVariableNames: 'noFundsCardNumber stolenCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MerchantProcessor class methodsFor: 'error descriptions' stamp: 'AF 11/4/2021 23:23:08'!
cardWithoutFundsErrorDescription

	^ 'card has no funds'! !

!methodRemoval: SimulatedMP class #cardWithoutFundsErrorDescription stamp: 'AF 11/4/2021 23:23:08'!
cardWithoutFundsErrorDescription

	^ 'card has no funds'!
!MerchantProcessor class methodsFor: 'error descriptions' stamp: 'AF 11/4/2021 23:23:13'!
stolenCardErrorDescription
	
	^ 'stolen card'.! !

!methodRemoval: SimulatedMP class #stolenCardErrorDescription stamp: 'AF 11/4/2021 23:23:13'!
stolenCardErrorDescription
	
	^ 'stolen card'.!
!MerchantProcessor methodsFor: 'nil' stamp: 'AF 11/4/2021 23:23:32'!
charge: anAmount to: aCreditCard

	self subclassResponsibility .! !
!MerchantProcessor methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:23:33' prior: 50915521!
charge: anAmount to: aCreditCard

	self subclassResponsibility.! !
!CheckoutTest methodsFor: 'tests' stamp: 'AF 11/4/2021 23:24:31' prior: 50915052!
test07CannotCheckoutWithCardWithoutFunds

	self assertCheckout: testObjectFactory createCartWithSingleProduct
		charging: testObjectFactory cardWithoutFunds
		raises: MerchantProcessor cardWithoutFundsErrorDescription.
! !
!CheckoutTest methodsFor: 'tests' stamp: 'AF 11/4/2021 23:24:38' prior: 50915061!
test08CannotCheckoutWithStolenCard

	self assertCheckout: testObjectFactory createCartWithSingleProduct
		charging: testObjectFactory stolenCard
		raises: MerchantProcessor stolenCardErrorDescription.! !

Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'AF 11/4/2021 23:26:07'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Object subclass: #TusLibrosSystemFacadeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosSystemFacadeTest category: 'TusLibros' stamp: 'AF 11/4/2021 23:26:13'!
Object subclass: #TusLibrosSystemFacadeTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosSystemFacadeTest category: 'TusLibros' stamp: 'AF 11/4/2021 23:35:10'!
Object subclass: #TusLibrosSystemFacadeTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacadeTest methodsFor: 'nil' stamp: 'AF 11/4/2021 23:35:04'!
test01

	| tusLibros |
	tusLibros _ TusLibrosSystemFacade authenticatingWith: testObjectFactory unsuccesfulAuthSystemXXX.
	self should: [ tusLibros createCartFor: testObjectFactory  ] raise: nil withMessageText: nil.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:37:06' prior: 50915583!
test01

	| tusLibros |
	tusLibros _ TusLibrosSystemFacade authenticatingWith: testObjectFactory unsuccesfulAuthSystemXXX.
	self should: [ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: nil.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:38:12' prior: 50915594!
test01

	| tusLibros |
	tusLibros _ TusLibrosSystemFacade authenticatingWith: testObjectFactory unsuccesfulAuthSystemXXX.
	self should: [ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosSystemFacade invalidCredentialsErrorDescription.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:38:43'!
setUp

	testObjectFactory _ TestObjectFactory new.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:40:18' prior: 50915608!
test01

	| tusLibros |
	
	tusLibros _ TusLibrosSystemFacade authenticatingWith: testObjectFactory unsuccesfulAuthSystemXXX.
	
	self should: [ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosSystemFacade invalidCredentialsErrorDescription.! !

TestCase subclass: #TusLibrosSystemFacadeTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosSystemFacadeTest category: 'TusLibros' stamp: 'AF 11/4/2021 23:40:33'!
TestCase subclass: #TusLibrosSystemFacadeTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/4/2021 23:40:36'!
ERROR!
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:40:48'!
unsuccesfulAuthSystemXXX
	self shouldBeImplemented.! !

----QUIT----(4 November 2021 23:44:00) CuisUniversity-4913.image priorSource: 18661997!

----STARTUP---- (4 November 2021 23:45:33) as /home/agus/Documents/inge1/cuis-tusLibros/CuisUniversity-4913.image!


!classDefinition: #SimulatedAuthenticationSystem category: 'TusLibros' stamp: 'AF 11/4/2021 23:46:50'!
Object subclass: #SimulatedAuthenticationSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:46:42' prior: 50915660!
unsuccesfulAuthSystemXXX
	
	^ SimulatedAuthenticationSystem withUnsuccesfulAuthentication.! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:48:33' prior: 50915680!
unsuccesfulAuthSystemXXX
	
	^ SimulatedAuthenticationSystem newUnsuccesful.! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:49:02'!
unsuccesfulAuthenticationSystem
	
	^ SimulatedAuthenticationSystem newUnsuccesful.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:49:02' prior: 50915629!
test01

	| tusLibros |
	
	tusLibros _ TusLibrosSystemFacade authenticatingWith: testObjectFactory unsuccesfulAuthenticationSystem.
	
	self should: [ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosSystemFacade invalidCredentialsErrorDescription.! !

!methodRemoval: TestObjectFactory #unsuccesfulAuthSystemXXX stamp: 'AF 11/4/2021 23:49:02'!
unsuccesfulAuthSystemXXX
	
	^ SimulatedAuthenticationSystem newUnsuccesful.!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'AF 11/4/2021 23:49:06'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'AF 11/4/2021 23:49:06'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'AF 11/4/2021 23:49:06'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'AF 11/4/2021 23:49:06'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'AF 11/4/2021 23:49:06'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'AF 11/4/2021 23:49:06'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'AF 11/4/2021 23:49:06'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'AF 11/4/2021 23:49:06'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'AF 11/4/2021 23:49:06'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'AF 11/4/2021 23:49:06'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'AF 11/4/2021 23:49:06'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'AF 11/4/2021 23:49:06'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'AF 11/4/2021 23:49:06'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'AF 11/4/2021 23:49:06'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'AF 11/4/2021 23:49:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/4/2021 23:49:06'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/4/2021 23:49:06'!
ERROR!
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:52:08'!
denyAllAuthenticationSystem
	
	^ SimulatedAuthenticationSystem newUnsuccesful.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:52:08' prior: 50915700!
test01

	| tusLibros |
	
	tusLibros _ TusLibrosSystemFacade authenticatingWith: testObjectFactory denyAllAuthenticationSystem.
	
	self should: [ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosSystemFacade invalidCredentialsErrorDescription.! !

!methodRemoval: TestObjectFactory #unsuccesfulAuthenticationSystem stamp: 'AF 11/4/2021 23:52:08'!
unsuccesfulAuthenticationSystem
	
	^ SimulatedAuthenticationSystem newUnsuccesful.!
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:53:22'!
authSystemDenyingAllxxx
	
	^ SimulatedAuthenticationSystem newUnsuccesful.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:53:22' prior: 50915782!
test01

	| tusLibros |
	
	tusLibros _ TusLibrosSystemFacade authenticatingWith: testObjectFactory authSystemDenyingAllxxx.
	
	self should: [ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosSystemFacade invalidCredentialsErrorDescription.! !

!methodRemoval: TestObjectFactory #denyAllAuthenticationSystem stamp: 'AF 11/4/2021 23:53:22'!
denyAllAuthenticationSystem
	
	^ SimulatedAuthenticationSystem newUnsuccesful.!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/4/2021 23:53:30'!
ERROR!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'AF 11/4/2021 23:53:30'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'AF 11/4/2021 23:53:30'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'AF 11/4/2021 23:53:30'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'AF 11/4/2021 23:53:30'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'AF 11/4/2021 23:53:30'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'AF 11/4/2021 23:53:30'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'AF 11/4/2021 23:53:30'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'AF 11/4/2021 23:53:30'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'AF 11/4/2021 23:53:30'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'AF 11/4/2021 23:53:30'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'AF 11/4/2021 23:53:30'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'AF 11/4/2021 23:53:30'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'AF 11/4/2021 23:53:30'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'AF 11/4/2021 23:53:30'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'AF 11/4/2021 23:53:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/4/2021 23:53:30'!
ERROR!
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:53:58'!
authSystemAllowingAllxxx
	
	^ SimulatedAuthenticationSystem newSuccesful.! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/4/2021 23:54:01'!
ERROR!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'AF 11/4/2021 23:54:01'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'AF 11/4/2021 23:54:01'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'AF 11/4/2021 23:54:01'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'AF 11/4/2021 23:54:01'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'AF 11/4/2021 23:54:01'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'AF 11/4/2021 23:54:01'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'AF 11/4/2021 23:54:01'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'AF 11/4/2021 23:54:01'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'AF 11/4/2021 23:54:01'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'AF 11/4/2021 23:54:01'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'AF 11/4/2021 23:54:01'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'AF 11/4/2021 23:54:01'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'AF 11/4/2021 23:54:01'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'AF 11/4/2021 23:54:01'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'AF 11/4/2021 23:54:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/4/2021 23:54:01'!
ERROR!
!SimulatedAuthenticationSystem class methodsFor: 'instance creation' stamp: 'AF 11/4/2021 23:54:10'!
newUnsuccesful
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNewUnsuccesful! !
!SimulatedAuthenticationSystem class methodsFor: 'instance creation' stamp: 'AF 11/4/2021 23:54:14' prior: 50915947!
newUnsuccesful

	^self new initializeNewUnsuccesful! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/4/2021 23:54:16'!
ERROR!
!SimulatedAuthenticationSystem methodsFor: 'initialization' stamp: 'AF 11/4/2021 23:54:24'!
initializeNewUnsuccesful
	self shouldBeImplemented.! !

!classDefinition: #SimulatedAuthenticationSystem category: 'TusLibros' stamp: 'AF 11/4/2021 23:54:40'!
Object subclass: #SimulatedAuthenticationSystem
	instanceVariableNames: 'result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!SimulatedAuthenticationSystem methodsFor: 'initialization' stamp: 'AF 11/4/2021 23:54:38' prior: 50915964!
initializeNewUnsuccesful
	
	result _ false.! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/4/2021 23:54:41'!
ERROR!
!TusLibrosSystemFacade class methodsFor: 'instance creation' stamp: 'AF 11/4/2021 23:55:12'!
authenticatingWith: aSimulatedAuthenticationSystem 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAuthenticatingWith: aSimulatedAuthenticationSystem ! !
!TusLibrosSystemFacade class methodsFor: 'instance creation' stamp: 'AF 11/4/2021 23:55:52' prior: 50915986!
authenticatingWith: anAuthenticationSystem 

	^self new initializeAuthenticatingWith: anAuthenticationSystem.! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/4/2021 23:55:52'!
ERROR!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'AF 11/4/2021 23:55:59'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'AF 11/4/2021 23:55:59'!
initializeAuthenticatingWith: anAuthenticationSystem 
	self shouldBeImplemented.
	authenticationSystem := anAuthenticationSystem.! !
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'AF 11/4/2021 23:56:04' prior: 50916014!
initializeAuthenticatingWith: anAuthenticationSystem 

	authenticationSystem := anAuthenticationSystem.! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/4/2021 23:56:05'!
ERROR!
!TusLibrosSystemFacade class methodsFor: 'error descriptions' stamp: 'AF 11/4/2021 23:56:43'!
invalidCredentialsErrorDescription
	self shouldBeImplemented.! !
!TusLibrosSystemFacade class methodsFor: 'error descriptions' stamp: 'AF 11/4/2021 23:57:17' prior: 50916031!
invalidCredentialsErrorDescription
	
	^'invalid credentials'! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/4/2021 23:57:19'!
ERROR!
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:57:31'!
defaultUser
	self shouldBeImplemented.! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:57:41' prior: 50916045!
defaultUser
	
	^'HAW'! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/4/2021 23:57:42'!
ERROR!
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:57:48'!
defaultPassword
	self shouldBeImplemented.! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:58:01' prior: 50916057!
defaultPassword
	
	^'hunter2'! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/4/2021 23:58:02'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/4/2021 23:58:18'!
createCartFor: aString authenticatedBy: aString2 
	self shouldBeImplemented.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:01:52' prior: 50916069!
createCartFor: aUser authenticatedBy: aPassword 

	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)  ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:01:59' prior: 50916075!
createCartFor: aUser authenticatedBy: aPassword 

	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)  
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:02:13' prior: 50916085!
createCartFor: aUser authenticatedBy: aPassword 

	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:02:17'!
ERROR!
!SimulatedAuthenticationSystem methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:02:29'!
can: aString beAuthenticatedBy: aString2 
	self shouldBeImplemented.! !
!SimulatedAuthenticationSystem methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:02:49' prior: 50916107!
can: aUser beAuthenticatedBy: aPassword 
	
	^result.! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:02:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:02:57'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'AF 11/5/2021 00:02:57'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'AF 11/5/2021 00:02:57'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'AF 11/5/2021 00:02:57'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'AF 11/5/2021 00:02:57'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'AF 11/5/2021 00:02:57'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'AF 11/5/2021 00:02:57'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'AF 11/5/2021 00:02:57'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'AF 11/5/2021 00:02:57'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'AF 11/5/2021 00:02:57'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'AF 11/5/2021 00:02:57'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'AF 11/5/2021 00:02:57'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'AF 11/5/2021 00:02:57'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'AF 11/5/2021 00:02:57'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'AF 11/5/2021 00:02:57'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'AF 11/5/2021 00:02:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:03:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:03:01'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:05:35'!
test02

	| tusLibros cartId |
	
	tusLibros _ TusLibrosSystemFacade authenticatingWith: testObjectFactory authSystemAllowingAllXXX.
	cartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	
	self assert: (tusLibros listCart: cartId) isEmpty.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:06:03' prior: 50916179!
test02

	| tusLibros cartId |
	
	tusLibros _ TusLibrosSystemFacade authenticatingWith: testObjectFactory authSystemAllowingAllxxx.
	cartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	
	self assert: (tusLibros listCart: cartId) isEmpty.! !

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:06:05'!
ERROR!
!SimulatedAuthenticationSystem class methodsFor: 'instance creation' stamp: 'AF 11/5/2021 00:06:17'!
newSuccesful
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNewSuccesful! !
!SimulatedAuthenticationSystem class methodsFor: 'instance creation' stamp: 'AF 11/5/2021 00:06:21' prior: 50916208!
newSuccesful
	
	^self new initializeNewSuccesful! !

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:06:22'!
ERROR!
!SimulatedAuthenticationSystem methodsFor: 'initialization' stamp: 'AF 11/5/2021 00:06:29'!
initializeNewSuccesful
	self shouldBeImplemented.! !
!SimulatedAuthenticationSystem methodsFor: 'initialization' stamp: 'AF 11/5/2021 00:06:41' prior: 50916225!
initializeNewSuccesful
	
	result _ true.! !

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:06:43'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:06:55'!
listCart: aTusLibrosSystemFacade 
	self shouldBeImplemented.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:07:14' prior: 50916238!
listCart: aCartId
	
	^OrderedCollection new.! !

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:07:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:07:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:07:15'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:07:46'!
test03

	| tusLibros cartId |
	
	tusLibros _ TusLibrosSystemFacade authenticatingWith: testObjectFactory authSystemAllowingAllxxx.
	cartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	
	
	
	self assert: (tusLibros listCart: cartId) isEmpty.! !

!methodRemoval: TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:07:54'!
test03

	| tusLibros cartId |
	
	tusLibros _ TusLibrosSystemFacade authenticatingWith: testObjectFactory authSystemAllowingAllxxx.
	cartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	
	
	
	self assert: (tusLibros listCart: cartId) isEmpty.!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:13:18'!
test03

	| tusLibros cartId expectedCartContents quantity |
	
	tusLibros _ TusLibrosSystemFacade authenticatingWith: testObjectFactory authSystemAllowingAllxxx.
	cartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: cartId.
	
	expectedCartContents _ OrderedCollection with: testObjectFactory firstProductSoldByTheStore.
	self assert: expectedCartContents equals: (tusLibros listCart: cartId).! !

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:13:38'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:13:46'!
add: aSmallInteger of: aString to: aTusLibrosSystemFacade 
	self shouldBeImplemented.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:16:19' prior: 50916095!
createCartFor: aUser authenticatedBy: aPassword 

	| cart |
	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].
	cart _ Cart .! !

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'AF 11/5/2021 00:17:53'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem cart2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'AF 11/5/2021 00:18:00'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem cart2 catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:17:59' prior: 50916312!
createCartFor: aUser authenticatedBy: aPassword 

	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].
	cart2 _ Cart acceptingProductsFrom: catalog.! !

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'AF 11/5/2021 00:18:03'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem cart catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:18:03' prior: 50916339!
createCartFor: aUser authenticatedBy: aPassword 

	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].
	cart _ Cart acceptingProductsFrom: catalog.! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:18:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:18:09'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:18:09'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:18:09'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:19:50' prior: 50916305!
add: aQuantity of: aProduct to: aCartId 
	
	cart add: aQuantity of: aProduct! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:20:03' prior: 50916381!
add: aQuantity of: aProduct to: aCartId 
	
	cart add: aQuantity of: aProduct.! !

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:20:12'!
ERROR!
!TusLibrosSystemFacade class methodsFor: 'instance creation' stamp: 'AF 11/5/2021 00:21:30'!
authenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog

	^self new initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog.! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:21:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:21:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:21:34'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:21:34'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:22:31' prior: 50916282!
test03

	| tusLibros cartId expectedCartContents quantity |
	
	tusLibros _ TusLibrosSystemFacade authenticatingWith: testObjectFactory authSystemAllowingAllxxx sourcingProductsFrom: testObjectFactory defaultCatalog .
	cartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: cartId.
	
	expectedCartContents _ OrderedCollection with: testObjectFactory firstProductSoldByTheStore.
	self assert: expectedCartContents equals: (tusLibros listCart: cartId).! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:22:37' prior: 50916416!
test03

	| tusLibros cartId expectedCartContents quantity |
	
	tusLibros _ TusLibrosSystemFacade authenticatingWith: testObjectFactory authSystemAllowingAllxxx sourcingProductsFrom: testObjectFactory defaultCatalog.
	cartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: cartId.
	
	expectedCartContents _ OrderedCollection with: testObjectFactory firstProductSoldByTheStore.
	self assert: expectedCartContents equals: (tusLibros listCart: cartId).! !

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:22:40'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:24:05' prior: 50916439!
test03

	| tusLibros cartId expectedCartContents quantity |
	
	tusLibros _ testObjectFactory defaultTusLibrosSystemFacade.
	cartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: cartId.
	
	expectedCartContents _ OrderedCollection with: testObjectFactory firstProductSoldByTheStore.
	self assert: expectedCartContents equals: (tusLibros listCart: cartId).! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:24:34' prior: 50916464!
test03

	| tusLibros cartId expectedCartContents quantity |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: cartId.
	
	expectedCartContents _ OrderedCollection with: testObjectFactory firstProductSoldByTheStore.
	self assert: expectedCartContents equals: (tusLibros listCart: cartId).! !

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:24:34'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:24:42'!
defaultTusLibrosSystemFacade
	self shouldBeImplemented.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:24:51' prior: 50916506!
defaultTusLibrosSystemFacade
	
	^TusLibrosSystemFacade authenticatingWith: testObjectFactory authSystemAllowingAllxxx sourcingProductsFrom: testObjectFactory defaultCatalog.! !

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:24:53'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'AF 11/5/2021 00:25:06'!
initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog 
	self shouldBeImplemented.
	authenticationSystem := anAuthenticationSystem.
	catalog := aCatalog.! !
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'AF 11/5/2021 00:25:20' prior: 50916523!
initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog 
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.! !

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:25:22'!
FAILURE!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:25:47' prior: 50916192!
test02

	| tusLibros cartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade .
	cartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	
	self assert: (tusLibros listCart: cartId) isEmpty.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:25:48' prior: 50916544!
test02

	| tusLibros cartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	
	self assert: (tusLibros listCart: cartId) isEmpty.! !

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:25:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:25:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:25:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:25:48'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:25:48'!
FAILURE!
!Cart methodsFor: 'accessing' stamp: 'AF 11/5/2021 00:29:58'!
contents

	^contents copy.! !

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:30:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:30:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:30:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:30:26'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:30:26'!
FAILURE!

----End fileIn of /home/agus/Documents/inge1/cuis-tusLibros/Packages/TerseGuide.pck.st----!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:32:30' prior: 50916484!
test03

	| tusLibros cartId expectedCartContents quantity |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: cartId.
	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity.
	self assert: expectedCartContents equals: (tusLibros listCart: cartId).! !

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:32:32'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:32:49' prior: 50916244!
listCart: aCartId
	
	^cart contents.! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:32:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:32:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:32:52'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:32:52'!
FAILURE!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:33:35' prior: 50919524!
test03

	| tusLibros cartId expectedCartContents quantity |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: cartId.
	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	self assert: expectedCartContents equals: (tusLibros listCart: cartId).! !

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:33:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:33:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:33:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:33:43'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:34:24' prior: 50919563!
test03

	| tusLibros cartId expectedCartContents quantity |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: cartId.
	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: cartId).! !

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:34:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:34:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:34:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:34:25'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:36:38' prior: 50919594!
test03

	| tusLibros expectedCartContents quantity firstCartId secondCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	secondCartId _ tusLibros createCartFor: 'nacho' authenticatedBy: 'pinga'.
	quantity _ 1.
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.

	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:37:22' prior: 50919625!
test03

	| tusLibros expectedCartContents quantity firstCartId secondCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	secondCartId _ tusLibros createCartFor: 'nacho' authenticatedBy: 'pinga'.
	quantity _ 1.
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.

	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).
	self assert: (secondCartId listCart: secondCartId) isEmpty.! !

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:40:13'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:40:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:40:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:40:13'!
FAILURE!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'AF 11/5/2021 00:43:01'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem cart catalog carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'AF 11/5/2021 00:44:03'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem cart catalog carts cartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:44:36' prior: 50916359!
createCartFor: aUser authenticatedBy: aPassword 

	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].
	
	cartId _ self nextCartId.
	carts at: cartId put: Cart acceptingProductsFrom: catalog.
	^cartId! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:44:58' prior: 50919703!
createCartFor: aUser authenticatedBy: aPassword 

	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].
	
	cartId _ self nextCartId.
	carts at: cartId put: (Cart acceptingProductsFrom: catalog).
	
	^cartId! !

Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem cart catalog carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'AF 11/5/2021 00:45:04'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem cart catalog carts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:45:17' prior: 50919716!
createCartFor: aUser authenticatedBy: aPassword 
	
	| cartId |
	
	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].
	
	cartId _ self nextCartId.
	carts at: cartId put: (Cart acceptingProductsFrom: catalog).
	
	^cartId! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:45:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:45:20'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:45:20'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:45:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:45:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:45:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:45:27'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:45:34'!
nextCartId
	self shouldBeImplemented.! !

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'AF 11/5/2021 00:46:22'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem cart catalog carts lastCartId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:46:19' prior: 50919775!
nextCartId
	
	lastCartId _ lastCartId + 1.
	^lastCartId! !

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:46:26'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'AF 11/5/2021 00:46:52' prior: 50916532!
initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog 
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	carts _ Dictionary new.! !
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'AF 11/5/2021 00:47:02' prior: 50919797!
initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog 
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	carts _ Dictionary new.
	lastCartId _ 0! !
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'AF 11/5/2021 00:47:04' prior: 50919806!
initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog 
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	carts _ Dictionary new.
	lastCartId _ 0.! !

!methodRemoval: TusLibrosSystemFacade #initializeAuthenticatingWith: stamp: 'AF 11/5/2021 00:47:23'!
initializeAuthenticatingWith: anAuthenticationSystem 

	authenticationSystem := anAuthenticationSystem.!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:47:58' prior: 50915809!
test01

	| tusLibros |
	
	tusLibros _ TusLibrosSystemFacade authenticatingWith: testObjectFactory authSystemDenyingAllxxx sourcingProductsFrom: testObjectFactory defaultCatalog.
	
	self should: [ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosSystemFacade invalidCredentialsErrorDescription.! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:47:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:47:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:47:59'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:47:59'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:48:03'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:48:45' prior: 50919547!
listCart: aCartId
	
	^(carts at: aCartId) contents.! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:48:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:48:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:48:47'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:48:47'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:49:12' prior: 50916387!
add: aQuantity of: aProduct to: aCartId 
	
	(carts at: aCartId) add: aQuantity of: aProduct.! !

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:49:13'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:50:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:50:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:50:11'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:50:11'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:51:42' prior: 50919649!
test03

	| tusLibros expectedCartContents quantity firstCartId secondCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	secondCartId _ tusLibros createCartFor: 'nacho' authenticatedBy: 'pinga'.
	quantity _ 1.
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.

	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).
	self assert: (tusLibros listCart: secondCartId) isEmpty.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:51:45' prior: 50919899!
test03

	| tusLibros expectedCartContents quantity firstCartId secondCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	secondCartId _ tusLibros createCartFor: 'nacho' authenticatedBy: 'pinga'.
	quantity _ 1.
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.

	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).
	self assert: (tusLibros listCart: secondCartId) isEmpty.! !

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:51:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 00:51:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 00:51:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 00:51:46'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:52:23' prior: 50919925!
test03

	| tusLibros expectedCartContents quantity firstCartId secondCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	secondCartId _ tusLibros createCartFor: 'nacho' authenticatedBy: 'elRetorico'.
	quantity _ 1.
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.

	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).
	self assert: (tusLibros listCart: secondCartId) isEmpty.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:56:54'!
test04

	| tusLibros quantity firstCartId secondCartId invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	invalidId _ 0.
	self should: (tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: invalidId)
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:57:21' prior: 50919987!
test04

	| tusLibros quantity invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	invalidId _ 0.
	self should: (tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: invalidId)
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:57:30' prior: 50920006!
test04

	| tusLibros quantity invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	quantity _ 1.
	invalidId _ 0.
	self should: (tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: invalidId)
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 00:57:50' prior: 50920024!
test04

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: (tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: invalidId)
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !

!testRun: #TusLibrosSystemFacadeTest #test04 stamp: 'AF 11/5/2021 00:57:53'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 01:00:13' prior: 50919879!
add: aQuantity of: aProduct to: aCartId 
	
	(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	(carts at: aCartId) add: aQuantity of: aProduct.! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 01:00:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 01:00:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 01:00:19'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04 stamp: 'AF 11/5/2021 01:00:19'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test04 stamp: 'AF 11/5/2021 01:00:19'!
ERROR!
!TusLibrosSystemFacade class methodsFor: 'error descriptions' stamp: 'AF 11/5/2021 01:00:27'!
invalidCartIdErrorDescription
	self shouldBeImplemented.! !
!TusLibrosSystemFacade class methodsFor: 'error descriptions' stamp: 'AF 11/5/2021 01:00:54' prior: 50920078!
invalidCartIdErrorDescription
	
	^ 'invalid cart id'.! !

!testRun: #TusLibrosSystemFacadeTest #test04 stamp: 'AF 11/5/2021 01:00:56'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 01:01:21' prior: 50920039!
test04

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: invalidId]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !

!testRun: #TusLibrosSystemFacadeTest #test04 stamp: 'AF 11/5/2021 01:01:22'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'AF 11/5/2021 01:01:30' prior: 50920092!
test04

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: invalidId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !

!testRun: #TusLibrosSystemFacadeTest #test04 stamp: 'AF 11/5/2021 01:01:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'AF 11/5/2021 01:01:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'AF 11/5/2021 01:01:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'AF 11/5/2021 01:01:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04 stamp: 'AF 11/5/2021 01:01:40'!
PASSED!

----SNAPSHOT----(5 November 2021 01:02:04) CuisUniversity-4913.image priorSource: 18688438!

----STARTUP---- (5 November 2021 23:25:03) as /home/ignacio/Documents/Facultad/repos-isw1/isw1/vms/tus-libros-it3/CuisUniversity-4913.image!


----End fileIn of /home/ignacio/Documents/Facultad/repos-isw1/isw1-ejs/20-TusLibros/it3/TusLibros.st----!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:37:22'!
test05

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros listCart: invalidId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !

!testRun: #TusLibrosSystemFacadeTest #test05 stamp: 'IAR 11/5/2021 23:37:25'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:38:53' prior: 50915712!
listCart: aCartId
	
	(carts includesKey: aCartId) ifFalse: [self error: self class invalidCartIdErrorDescription ].
	^(carts at: aCartId) contents.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:38:55' prior: 50915776!
listCart: aCartId
	
	(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^(carts at: aCartId) contents.! !

!testRun: #TusLibrosSystemFacadeTest #test05 stamp: 'IAR 11/5/2021 23:39:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'IAR 11/5/2021 23:39:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'IAR 11/5/2021 23:39:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'IAR 11/5/2021 23:39:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04 stamp: 'IAR 11/5/2021 23:39:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05 stamp: 'IAR 11/5/2021 23:39:03'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:40:31'!
findCart: aCartId

	^ (carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:40:31' prior: 50915785!
listCart: aCartId
	
	self findCart: aCartId.
	^(carts at: aCartId) contents.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:40:31' prior: 50915690!
add: aQuantity of: aProduct to: aCartId 
	
	self findCart: aCartId.
	(carts at: aCartId) add: aQuantity of: aProduct.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:40:42' prior: 50915823!
add: aQuantity of: aProduct to: aCartId 
	
	(self findCart: aCartId) add: aQuantity of: aProduct.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:41:28' prior: 50915817!
listCart: aCartId
	
	^ (self findCart: aCartId) contents.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:41:32' prior: 50915838!
listCart: aCartId
	
	^(self findCart: aCartId) contents.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'IAR 11/5/2021 23:41:36'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'IAR 11/5/2021 23:41:36'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test04 stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05 stamp: 'IAR 11/5/2021 23:41:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'IAR 11/5/2021 23:41:41'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:41:59' prior: 50915809!
findCart: aCartId

	(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ]
	! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:42:18' prior: 50915917!
findCart: aCartId

	(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ carts at: aCartId.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04 stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05 stamp: 'IAR 11/5/2021 23:42:20'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:43:07' prior: 50915925!
findCart: aCartId

	^ carts at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorDescription ]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:43:09' prior: 50915998!
findCart: aCartId

	^ carts at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'IAR 11/5/2021 23:45:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'IAR 11/5/2021 23:45:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'IAR 11/5/2021 23:45:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04 stamp: 'IAR 11/5/2021 23:45:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05 stamp: 'IAR 11/5/2021 23:45:30'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04 stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05 stamp: 'IAR 11/5/2021 23:45:33'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'IAR 11/5/2021 23:48:03' prior: 50915680!
initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog 
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	carts _ Dictionary new.
	lastCartId _ 0.! !
!Cashier class methodsFor: 'instance creation' stamp: 'IAR 11/5/2021 23:48:20' prior: 50915370!
withMerchantProcessor: aMerchantProcessor 

	^self new initializeWithMerchantProcessor: aMerchantProcessor.! !

!methodRemoval: TusLibrosSystemFacade class #authenticatingWith: stamp: 'IAR 11/5/2021 23:54:32'!
authenticatingWith: anAuthenticationSystem 

	^self new initializeAuthenticatingWith: anAuthenticationSystem.!
!TusLibrosSystemFacade class methodsFor: 'instance creation' stamp: 'IAR 11/5/2021 23:56:21'!
authenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog chargingTrough: aMerchantProcessor

	^self new initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog chargingThrough: aMerchantProcessor.! !

!methodRemoval: TusLibrosSystemFacade class #authenticatingWith:sourcingProductsFrom: stamp: 'IAR 11/5/2021 23:56:31'!
authenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog

	^self new initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog.!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:57:01' prior: 50915084!
defaultTusLibrosSystemFacade
	
	^TusLibrosSystemFacade authenticatingWith: testObjectFactory authSystemAllowingAllxxx sourcingProductsFrom: testObjectFactory defaultCatalog chargingTrough: testObjectFactory defaultSimulatedMP.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:57:49' prior: 50915099!
test01

	| tusLibros |
	
	tusLibros _ TusLibrosSystemFacade authenticatingWith: testObjectFactory authSystemDenyingAllxxx sourcingProductsFrom: testObjectFactory defaultCatalog chargingTrough: testObjectFactory defaultSimulatedMP.
	
	self should: [ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosSystemFacade invalidCredentialsErrorDescription.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:58:06' prior: 50916145!
test01

	| tusLibros |
	
	tusLibros _ TusLibrosSystemFacade
		authenticatingWith: testObjectFactory authSystemDenyingAllxxx
		sourcingProductsFrom: testObjectFactory defaultCatalog
		chargingTrough: testObjectFactory defaultSimulatedMP.
	
	self should: [ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosSystemFacade invalidCredentialsErrorDescription.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:58:20' prior: 50916134!
defaultTusLibrosSystemFacade
	
	^TusLibrosSystemFacade
		authenticatingWith: testObjectFactory authSystemAllowingAllxxx
		sourcingProductsFrom: testObjectFactory defaultCatalog
		chargingTrough: testObjectFactory defaultSimulatedMP.! !
!TusLibrosSystemFacade class methodsFor: 'instance creation' stamp: 'IAR 11/5/2021 23:58:33'!
authenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog chargingThrough: aMerchantProcessor

	^self new initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog chargingThrough: aMerchantProcessor.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:58:33' prior: 50916183!
defaultTusLibrosSystemFacade
	
	^TusLibrosSystemFacade
		authenticatingWith: testObjectFactory authSystemAllowingAllxxx
		sourcingProductsFrom: testObjectFactory defaultCatalog
		chargingThrough: testObjectFactory defaultSimulatedMP.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/5/2021 23:58:33' prior: 50916164!
test01

	| tusLibros |
	
	tusLibros _ TusLibrosSystemFacade
		authenticatingWith: testObjectFactory authSystemDenyingAllxxx
		sourcingProductsFrom: testObjectFactory defaultCatalog
		chargingThrough: testObjectFactory defaultSimulatedMP.
	
	self should: [ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosSystemFacade invalidCredentialsErrorDescription.! !

!methodRemoval: TusLibrosSystemFacade class #authenticatingWith:sourcingProductsFrom:chargingTrough: stamp: 'IAR 11/5/2021 23:58:33'!
authenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog chargingTrough: aMerchantProcessor

	^self new initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog chargingThrough: aMerchantProcessor.!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'IAR 11/5/2021 23:58:38'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'IAR 11/5/2021 23:58:38'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'IAR 11/5/2021 23:58:38'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test04 stamp: 'IAR 11/5/2021 23:58:38'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05 stamp: 'IAR 11/5/2021 23:58:38'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'IAR 11/5/2021 23:58:41'!
ERROR!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'IAR 11/5/2021 23:58:47'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem cart catalog carts lastCartId merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'IAR 11/5/2021 23:58:47'!
initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog chargingThrough: aMerchantProcessor 
	self shouldBeImplemented.
	authenticationSystem := anAuthenticationSystem.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.! !
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'IAR 11/5/2021 23:58:57' prior: 50916273!
initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog chargingThrough: aMerchantProcessor 
	
	authenticationSystem := anAuthenticationSystem.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.! !

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'IAR 11/5/2021 23:58:59'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'IAR 11/5/2021 23:59:31' prior: 50916285!
initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog chargingThrough: aMerchantProcessor 
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	carts _ Dictionary new.
	lastCartId _ 0.
	merchantProcessor _ aMerchantProcessor.! !

!methodRemoval: TusLibrosSystemFacade #initializeAuthenticatingWith:sourcingProductsFrom: stamp: 'IAR 11/5/2021 23:59:33'!
initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog 
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	carts _ Dictionary new.
	lastCartId _ 0.!

!testRun: #TusLibrosSystemFacadeTest #test01 stamp: 'IAR 11/5/2021 23:59:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02 stamp: 'IAR 11/5/2021 23:59:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03 stamp: 'IAR 11/5/2021 23:59:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04 stamp: 'IAR 11/5/2021 23:59:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05 stamp: 'IAR 11/5/2021 23:59:36'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:00:33'!
test01CannotCreateCartWithInvalidCredentials

	| tusLibros |
	
	tusLibros _ TusLibrosSystemFacade
		authenticatingWith: testObjectFactory authSystemDenyingAllxxx
		sourcingProductsFrom: testObjectFactory defaultCatalog
		chargingThrough: testObjectFactory defaultSimulatedMP.
	
	self should: [ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosSystemFacade invalidCredentialsErrorDescription.! !

!methodRemoval: TusLibrosSystemFacadeTest #test01 stamp: 'IAR 11/6/2021 00:00:33'!
test01

	| tusLibros |
	
	tusLibros _ TusLibrosSystemFacade
		authenticatingWith: testObjectFactory authSystemDenyingAllxxx
		sourcingProductsFrom: testObjectFactory defaultCatalog
		chargingThrough: testObjectFactory defaultSimulatedMP.
	
	self should: [ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosSystemFacade invalidCredentialsErrorDescription.!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:01:36'!
test02CartCreatedWithValidCredentialsIsEmpty

	| tusLibros cartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	
	self assert: (tusLibros listCart: cartId) isEmpty.! !

!methodRemoval: TusLibrosSystemFacadeTest #test02 stamp: 'IAR 11/6/2021 00:01:36'!
test02

	| tusLibros cartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	
	self assert: (tusLibros listCart: cartId) isEmpty.!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:05:12' prior: 50915127!
test03

	| tusLibros expectedCartContents quantity firstCartId secondCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	secondCartId _ tusLibros createCartFor: 'nacho' authenticatedBy: 'elRetorico'.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).
	self assert: (tusLibros listCart: secondCartId) isEmpty.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:08:23'!
test04CanListMultipleCarts

	| tusLibros expectedCartContents quantity firstCartId secondCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	secondCartId _ tusLibros createCartFor: 'nacho' authenticatedBy: 'elRetorico'.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).
	self assert: (tusLibros listCart: secondCartId) isEmpty.! !

!methodRemoval: TusLibrosSystemFacadeTest #test03 stamp: 'IAR 11/6/2021 00:08:23'!
test03

	| tusLibros expectedCartContents quantity firstCartId secondCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	secondCartId _ tusLibros createCartFor: 'nacho' authenticatedBy: 'elRetorico'.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).
	self assert: (tusLibros listCart: secondCartId) isEmpty.!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:08:32'!
test03

	| tusLibros expectedCartContents quantity firstCartId secondCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	secondCartId _ tusLibros createCartFor: 'nacho' authenticatedBy: 'elRetorico'.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).
	self assert: (tusLibros listCart: secondCartId) isEmpty.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:08:35' prior: 50916472!
test03

	| tusLibros expectedCartContents quantity firstCartId secondCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).
	self assert: (tusLibros listCart: secondCartId) isEmpty.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:08:40' prior: 50916498!
test03

	| tusLibros expectedCartContents quantity firstCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:08:58'!
test03CanAddMultipleItemsToACart

	| tusLibros expectedCartContents quantity firstCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).! !

!methodRemoval: TusLibrosSystemFacadeTest #test03 stamp: 'IAR 11/6/2021 00:08:58'!
test03

	| tusLibros expectedCartContents quantity firstCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:09:55'!
test06CannotListCartWithInvalidId

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros listCart: invalidId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !

!methodRemoval: TusLibrosSystemFacadeTest #test05 stamp: 'IAR 11/6/2021 00:09:55'!
test05

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros listCart: invalidId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:10:21'!
test05CannotAddProductToCartWithInvalidId

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: invalidId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !

!methodRemoval: TusLibrosSystemFacadeTest #test04 stamp: 'IAR 11/6/2021 00:10:21'!
test04

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: invalidId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:10:29'!
test03CanAddMultipleItemsToACartXXXXXx

	| tusLibros expectedCartContents quantity firstCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).! !

!methodRemoval: TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACart stamp: 'IAR 11/6/2021 00:10:29'!
test03CanAddMultipleItemsToACart

	| tusLibros expectedCartContents quantity firstCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:10:36'!
test04CanListMultipleCartsXXXXx

	| tusLibros expectedCartContents quantity firstCartId secondCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	secondCartId _ tusLibros createCartFor: 'nacho' authenticatedBy: 'elRetorico'.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).
	self assert: (tusLibros listCart: secondCartId) isEmpty.! !

!methodRemoval: TusLibrosSystemFacadeTest #test04CanListMultipleCarts stamp: 'IAR 11/6/2021 00:10:36'!
test04CanListMultipleCarts

	| tusLibros expectedCartContents quantity firstCartId secondCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	secondCartId _ tusLibros createCartFor: 'nacho' authenticatedBy: 'elRetorico'.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).
	self assert: (tusLibros listCart: secondCartId) isEmpty.!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:11:27'!
test07

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros listCart: invalidId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:12:55' prior: 50916728!
test07

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros checkout: invalidId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:13:35'!
test07CannotCheckoutCarWithInvalidId

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros checkout: invalidId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !

!methodRemoval: TusLibrosSystemFacadeTest #test07 stamp: 'IAR 11/6/2021 00:13:35'!
test07

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros checkout: invalidId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:13:56'!
test07CannotCheckoutInvalidCartId

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros checkout: invalidId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !

!methodRemoval: TusLibrosSystemFacadeTest #test07CannotCheckoutCarWithInvalidId stamp: 'IAR 11/6/2021 00:13:56'!
test07CannotCheckoutCarWithInvalidId

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros checkout: invalidId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'IAR 11/6/2021 00:14:15'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:14:25'!
checkout: aSmallInteger 
	self shouldBeImplemented.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:15:00' prior: 50916804!
checkout: aCartId 
	
	self error: self class invalidCartIdErrorDescription.! !

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'IAR 11/6/2021 00:15:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'IAR 11/6/2021 00:15:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'IAR 11/6/2021 00:15:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'IAR 11/6/2021 00:15:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'IAR 11/6/2021 00:15:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'IAR 11/6/2021 00:15:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'IAR 11/6/2021 00:15:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'IAR 11/6/2021 00:15:01'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:16:27'!
test08

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros checkout: invalidId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:21:51' prior: 50916845!
test08

	| tusLibros cartId firstTransactionId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros createCart. 
	
	firstTransactionId _ tusLibros checkout: cartId charging: testObjectFactory validCard on: testObjectFactory fixedDate.
! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:23:05' prior: 50916857!
test08

	| tusLibros cartId firstTransactionId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	
	firstTransactionId _ tusLibros checkout: cartId charging: testObjectFactory validCard on: testObjectFactory fixedDate.
! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:23:51' prior: 50916869!
test08

	| tusLibros cartId firstTransactionId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	
	firstTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:24:02' prior: 50916884!
test08

	| tusLibros cartId firstTransactionId secondTransactionId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	
	firstTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
	
	secondTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:24:41' prior: 50916899!
test08

	| tusLibros cartId firstTransactionId secondTransactionId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	firstTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
	
	secondTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
		
	self assert: firstTransactionId isNotEqualTo: secondTransactionId.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:25:10'!
test09

	| tusLibros cartId firstTransactionId secondTransactionId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	firstTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
	
	secondTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
		
	self assert: firstTransactionId isNotEqualTo: secondTransactionId.

! !

!methodRemoval: TusLibrosSystemFacadeTest #test08 stamp: 'IAR 11/6/2021 00:25:10'!
test08

	| tusLibros cartId firstTransactionId secondTransactionId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	firstTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
	
	secondTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
		
	self assert: firstTransactionId isNotEqualTo: secondTransactionId.

!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:25:40'!
test08

	| tusLibros cartId transactionId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	transactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.

	self assert: transactionId isNotNil

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:26:21' prior: 50916982!
test08

	| tusLibros cartId transactionId |
	
	"TODO: Assertar observando mediante listPurchases y no mediante
	isNotNil."
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	transactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.

	self assert: transactionId isNotNil

! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'IAR 11/6/2021 00:26:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'IAR 11/6/2021 00:26:53'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:27:58' prior: 50916775!
test07CannotCheckoutInvalidCartId

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros checkout: invalidId charging: testObjectFactory validCard on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:28:09' prior: 50917022!
test07CannotCheckoutInvalidCartId

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros
			checkout: invalidId
			charging: testObjectFactory validCard
			on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'IAR 11/6/2021 00:28:34'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'IAR 11/6/2021 00:28:34'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:28:45'!
checkout: aSmallInteger charging: aCard on: aFixedGregorianDate 
	self shouldBeImplemented.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:29:27' prior: 50917057!
checkout: aCartId charging: aCard on: aDate 
	
	self error: self class invalidCartIdErrorDescription.! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'IAR 11/6/2021 00:29:28'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'IAR 11/6/2021 00:29:37'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:32:10' prior: 50917064!
checkout: aCartId charging: aCard on: aDate 
	
	(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:32:42' prior: 50917076!
checkout: aCartId charging: aCard on: aDate 
	
	(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ 1.! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'IAR 11/6/2021 00:32:45'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:34:05' prior: 50916998!
test08

	| tusLibros cartId transactionId |
	
	"TODO: Assertar observando mediante listPurchases y no mediante
	isNotNil."
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	transactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.

	self deny: transactionId isNil. 

! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'IAR 11/6/2021 00:34:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'IAR 11/6/2021 00:34:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'IAR 11/6/2021 00:34:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'IAR 11/6/2021 00:34:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'IAR 11/6/2021 00:34:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'IAR 11/6/2021 00:34:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'IAR 11/6/2021 00:34:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'IAR 11/6/2021 00:34:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'IAR 11/6/2021 00:34:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'IAR 11/6/2021 00:34:08'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'IAR 11/6/2021 00:34:08'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:34:54' prior: 50916940!
test09

	| tusLibros cartId firstTransactionId secondTransactionId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	firstTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
	
	secondTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
		
	self assert: firstTransactionId equals: secondTransactionId.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:36:06' prior: 50917150!
test09

	| tusLibros cartId firstTransactionId secondTransactionId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	firstTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
	
	secondTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
		
	self deny: firstTransactionId = secondTransactionId.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:36:39' prior: 50917172!
test09

	| tusLibros cartId firstTransactionId secondTransactionId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	firstTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
	
	secondTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
		
	self assert: firstTransactionId isNotEqualTo: secondTransactionId.

! !

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'IAR 11/6/2021 00:36:44'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'assertions' stamp: 'IAR 11/6/2021 00:36:50'!
assert: aSmallInteger isNotEqualTo: aSmallInteger2 
	self shouldBeImplemented.! !
!TusLibrosSystemFacadeTest methodsFor: 'assertions' stamp: 'IAR 11/6/2021 00:37:44' prior: 50917217!
assert: expected isNotEqualTo: actual 
	
	self deny: expected = actual.! !

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'IAR 11/6/2021 00:37:45'!
FAILURE!

!methodRemoval: TusLibrosSystemFacade #checkout: stamp: 'IAR 11/6/2021 00:38:01'!
checkout: aCartId 
	
	self error: self class invalidCartIdErrorDescription.!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:38:17' prior: 50917084!
checkout: aCartId charging: aCard on: aDate 
	
	(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ self nextTransactionId.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'IAR 11/6/2021 00:38:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'IAR 11/6/2021 00:38:21'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'IAR 11/6/2021 00:38:21'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'IAR 11/6/2021 00:38:24'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:38:30'!
nextTransactionId
	self shouldBeImplemented.! !

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'IAR 11/6/2021 00:39:06'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem cart catalog carts lastCartId merchantProcessor transactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:39:05' prior: 50917331!
nextTransactionId

	transactionId _ transactionId + 1.
	^transactionId.! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'IAR 11/6/2021 00:39:23'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'IAR 11/6/2021 00:39:48' prior: 50916299!
initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog chargingThrough: aMerchantProcessor 
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	carts _ Dictionary new.
	lastCartId _ 0.
	transactionId _ 0.
	merchantProcessor _ aMerchantProcessor.! !

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'IAR 11/6/2021 00:39:59'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem cart catalog carts lastCartId merchantProcessor lastTransactionId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:39:59' prior: 50917355!
initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog chargingThrough: aMerchantProcessor 
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	carts _ Dictionary new.
	lastCartId _ 0.
	lastTransactionId _ 0.
	merchantProcessor _ aMerchantProcessor.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:39:59' prior: 50917346!
nextTransactionId

	lastTransactionId _ lastTransactionId + 1.
	^lastTransactionId.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'IAR 11/6/2021 00:40:17'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'IAR 11/6/2021 00:40:18'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:40:52' prior: 50917095!
test08

	| tusLibros cartId transactionId |
	
	"TODO: Assertar observando mediante listPurchases y no mediante isNotNil."
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	transactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.

	self deny: transactionId isNil. 

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'IAR 11/6/2021 00:41:37' prior: 50917193!
test09

	| tusLibros cartId firstTransactionId secondTransactionId |
	
	"TODO: Cambiar la generacion de las transactionIds."
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	firstTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
	
	secondTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
		
	self assert: firstTransactionId isNotEqualTo: secondTransactionId.

! !

----QUIT----(6 November 2021 00:42:13) CuisUniversity-4913.image priorSource: 18661997!

----STARTUP---- (8 November 2021 19:31:12) as /home/mnpanic/Documents/dc/ing1/cuis/cuis-tuslibros-it3/CuisUniversity-4913.image!


----End fileIn of /home/mnpanic/repos/uba/ing1-repos/isw1-ejs/20-TusLibros/it3/TusLibros.st----!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 19:36:53'!
test10

	| tusLibros cartId |
	
	"TODO: Cambiar la generacion de las transactionIds."
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	"pasan 30m"
		
	self should: [ tusLibros listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 19:36:59' prior: 50915883!
test10

	| tusLibros cartId |
	
	"TODO: Cambiar la generacion de las transactionIds."
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	"pasan 30m"
		
	self should: [ tusLibros listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 19:38:08' prior: 50915900!
test10

	| tusLibros cartId |
	
	"TODO: Cambiar la generacion de las transactionIds."
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	"pasan 30m"
	
	self should: [ tusLibros listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 19:38:09' prior: 50915917!
test10

	| tusLibros cartId |
	
	"TODO: Cambiar la generacion de las transactionIds."
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	"pasan 30m"

	self should: [ tusLibros listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'MP 11/8/2021 19:43:52'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem cart catalog carts lastCartId merchantProcessor lastTransactionId cartCreationStopwatch'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Stopwatch category: 'TusLibros' stamp: 'MP 11/8/2021 19:43:58'!
Object subclass: #Stopwatch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 19:43:49' prior: 50915814!
createCartFor: aUser authenticatedBy: aPassword 
	
	| cartId |
	
	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].
	
	cartId _ self nextCartId.
	carts at: cartId put: (Cart acceptingProductsFrom: catalog).
	
	cartCreationStopwatch _ Stopwatch start.
	
	^cartId! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 19:45:17' prior: 50915834!
listCart: aCartId

	cartCreationStopwatch elapsedThirtyMinutes ifTrue: [ self error: self class expiredCartErrorDescription ].
	
	^(self findCart: aCartId) contents.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 19:45:22'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 19:45:22'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 19:45:22'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 19:45:22'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 19:45:22'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 19:45:22'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 19:45:22'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 19:45:22'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 19:45:51' prior: 50915983!
listCart: aCartId

	cartCreationStopwatch ifNotNil: [ cartCreationStopwatch elapsedThirtyMinutes ifTrue: [ self error: self class expiredCartErrorDescription ] ].
	
	^(self findCart: aCartId) contents.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 19:45:53'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 19:45:53'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 19:45:53'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 19:45:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 19:45:53'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 19:45:53'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 19:45:53'!
ERROR!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 19:46:45'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 19:46:45'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 19:46:45'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 19:46:45'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 19:46:45'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 19:46:45'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 19:46:45'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 19:46:47'!
ERROR!
!Stopwatch class methodsFor: 'instance creation' stamp: 'MP 11/8/2021 19:46:59'!
start
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeStart! !
!Stopwatch class methodsFor: 'instance creation' stamp: 'MP 11/8/2021 19:47:25' prior: 50916257!
start

	^self subclassResponsibility ! !
!Stopwatch class methodsFor: 'instance creation' stamp: 'MP 11/8/2021 19:47:26' prior: 50916265!
start

	^self subclassResponsibility! !

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'MP 11/8/2021 19:48:32'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem cart catalog carts lastCartId merchantProcessor lastTransactionId cartCreationStopwatch stopwatch'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 19:48:31' prior: 50915968!
createCartFor: aUser authenticatedBy: aPassword 
	
	| cartId |
	
	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].
	
	cartId _ self nextCartId.
	carts at: cartId put: (Cart acceptingProductsFrom: catalog).
	
	cartCreationStopwatch _ stopwatch start.
	
	^cartId! !
!TusLibrosSystemFacade class methodsFor: 'instance creation' stamp: 'MP 11/8/2021 19:50:49'!
authenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
timingWith: aStopwatch

	^self new 
		initializeAuthenticatingWith: anAuthenticationSystem
		sourcingProductsFrom: aCatalog
		chargingThrough: aMerchantProcessor
		timingWith: aStopwatch.! !
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'MP 11/8/2021 19:51:22'!
initializeAuthenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
timingWith: aStopwatch
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	merchantProcessor _ aMerchantProcessor.
	stopwatch _ aStopwatch.
	
	carts _ Dictionary new.
	lastCartId _ 0.
	lastTransactionId _ 0.
! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 19:52:14' prior: 50915084!
defaultTusLibrosSystemFacade
	
	^TusLibrosSystemFacade
		authenticatingWith: testObjectFactory authSystemAllowingAllxxx
		sourcingProductsFrom: testObjectFactory defaultCatalog
		chargingThrough: testObjectFactory defaultSimulatedMP
		timingWith: self defaultStopwatch.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 19:52:31' prior: 50916329!
defaultTusLibrosSystemFacade
	
	^TusLibrosSystemFacade
		authenticatingWith: testObjectFactory authSystemAllowingAllxxx
		sourcingProductsFrom: testObjectFactory defaultCatalog
		chargingThrough: testObjectFactory defaultSimulatedMP
		timingWith: testObjectFactory defaultStopwatch.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 19:52:53' prior: 50916341!
defaultTusLibrosSystemFacade
	
	^TusLibrosSystemFacade
		authenticatingWith: testObjectFactory authSystemAllowingAllxxx
		sourcingProductsFrom: testObjectFactory defaultCatalog
		chargingThrough: testObjectFactory defaultSimulatedMP
		timingWith: testObjectFactory defaultStopwatch.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 19:58:22' prior: 50915934!
test10

	| tusLibros cartId |
	
	"TODO: Cambiar la generacion de las transactionIds."

	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	"pasan 30m"

	self should: [ tusLibros listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'MP 11/8/2021 19:59:02'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem cart catalog carts lastCartId merchantProcessor lastTransactionId cartCreationStopwatch stopwatch nowProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 19:59:01' prior: 50916286!
createCartFor: aUser authenticatedBy: aPassword 
	
	| cartId |
	
	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].
	
	cartId _ self nextCartId.
	carts at: cartId put: (Cart acceptingProductsFrom: catalog).
	
	cartCreationStopwatch _ nowProvider now.
	
	^cartId! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 19:59:37' prior: 50916076!
listCart: aCartId

	nowProvider now - cartCreationStopwatch > 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
	
	^(self findCart: aCartId) contents.! !

!classDefinition: #ManualClockXX category: 'TusLibros' stamp: 'MP 11/8/2021 20:03:28'!
Object subclass: #ManualClockXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:03:20' prior: 50916367!
test10

	| tusLibros cartId clock |
	
	"TODO: Cambiar la generacion de las transactionIds."

	clock _ ManualClockXX new.
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	"pasan 30m"
	self should: [ tusLibros listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:03:54'!
tusLibrosSystemFacadeWithClock: aClock
	
	^TusLibrosSystemFacade
		authenticatingWith: testObjectFactory authSystemAllowingAllxxx
		sourcingProductsFrom: testObjectFactory defaultCatalog
		chargingThrough: testObjectFactory defaultSimulatedMP
		timingWith: aClock.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:04:16' prior: 50916354!
defaultTusLibrosSystemFacade
	
	^self tusLibrosSystemFacadeWithClock: testObjectFactory defaultClock.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:04:40' prior: 50916457!
defaultTusLibrosSystemFacade
	
	^self tusLibrosSystemFacadeWithClock: ManualClockXX new.! !
!TusLibrosSystemFacade class methodsFor: 'instance creation' stamp: 'MP 11/8/2021 20:04:59' prior: 50916301!
authenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
timingWith: aClock

	^self new 
		initializeAuthenticatingWith: anAuthenticationSystem
		sourcingProductsFrom: aCatalog
		chargingThrough: aMerchantProcessor
		timingWith: aClock.! !
!TusLibrosSystemFacade class methodsFor: 'instance creation' stamp: 'MP 11/8/2021 20:05:22'!
authenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
withClock: aClock

	^self new 
		initializeAuthenticatingWith: anAuthenticationSystem
		sourcingProductsFrom: aCatalog
		chargingThrough: aMerchantProcessor
		timingWith: aClock.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:05:22' prior: 50916445!
tusLibrosSystemFacadeWithClock: aClock
	
	^TusLibrosSystemFacade
		authenticatingWith: testObjectFactory authSystemAllowingAllxxx
		sourcingProductsFrom: testObjectFactory defaultCatalog
		chargingThrough: testObjectFactory defaultSimulatedMP
		withClock: aClock.! !

!methodRemoval: TusLibrosSystemFacade class #authenticatingWith:sourcingProductsFrom:chargingThrough:timingWith: stamp: 'MP 11/8/2021 20:05:22'!
authenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
timingWith: aClock

	^self new 
		initializeAuthenticatingWith: anAuthenticationSystem
		sourcingProductsFrom: aCatalog
		chargingThrough: aMerchantProcessor
		timingWith: aClock.!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'MP 11/8/2021 20:05:33'!
initializeAuthenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
withClock: aStopwatch
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	merchantProcessor _ aMerchantProcessor.
	stopwatch _ aStopwatch.
	
	carts _ Dictionary new.
	lastCartId _ 0.
	lastTransactionId _ 0.
! !
!TusLibrosSystemFacade class methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:05:33' prior: 50916484!
authenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
withClock: aClock

	^self new 
		initializeAuthenticatingWith: anAuthenticationSystem
		sourcingProductsFrom: aCatalog
		chargingThrough: aMerchantProcessor
		withClock: aClock.! !

!methodRemoval: TusLibrosSystemFacade #initializeAuthenticatingWith:sourcingProductsFrom:chargingThrough:timingWith: stamp: 'MP 11/8/2021 20:05:33'!
initializeAuthenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
timingWith: aStopwatch
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	merchantProcessor _ aMerchantProcessor.
	stopwatch _ aStopwatch.
	
	carts _ Dictionary new.
	lastCartId _ 0.
	lastTransactionId _ 0.
!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'MP 11/8/2021 20:05:42' prior: 50916522!
initializeAuthenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
withClock: aClock
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	merchantProcessor _ aMerchantProcessor.
	stopwatch _ aClock.
	
	carts _ Dictionary new.
	lastCartId _ 0.
	lastTransactionId _ 0.
! !

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'MP 11/8/2021 20:05:44'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem cart catalog carts lastCartId merchantProcessor lastTransactionId cartCreationStopwatch clock nowProvider'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:05:44' prior: 50916565!
initializeAuthenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
withClock: aClock
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	merchantProcessor _ aMerchantProcessor.
	clock _ aClock.
	
	carts _ Dictionary new.
	lastCartId _ 0.
	lastTransactionId _ 0.
! !

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'MP 11/8/2021 20:05:57'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem cart catalog carts lastCartId merchantProcessor lastTransactionId cartCreationStopwatch clock nowProvider cartCreationTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:05:54' prior: 50916396!
createCartFor: aUser authenticatedBy: aPassword 
	
	| cartId |
	
	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].
	
	cartId _ self nextCartId.
	carts at: cartId put: (Cart acceptingProductsFrom: catalog).
	
	cartCreationTime _ clock now.
	
	^cartId! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:06:03' prior: 50916411!
listCart: aCartId

	clock now - cartCreationStopwatch > 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
	
	^(self findCart: aCartId) contents.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:06:44' prior: 50916632!
listCart: aCartId

	clock now - cartCreationTime >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
	
	^(self findCart: aCartId) contents.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:06:45' prior: 50916641!
listCart: aCartId

	clock now - cartCreationTime >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].

	^(self findCart: aCartId) contents.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 20:06:46'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 20:06:46'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 20:06:46'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 20:06:46'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 20:06:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 20:06:46'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 20:06:46'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 20:06:46'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 20:06:49'!
ERROR!
!ManualClockXX methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:06:55'!
now
	self shouldBeImplemented.! !

!classRemoval: #Stopwatch stamp: 'MP 11/8/2021 20:07:11'!
Object subclass: #Stopwatch
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:07:30' prior: 50916427!
test10

	| tusLibros cartId clock |
	
	"TODO: Cambiar la generacion de las transactionIds."

	clock _ ManualClockXX new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	"pasan 30m"
	self should: [ tusLibros listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !
!ManualClockXX methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:07:45' prior: 50916746!
now
	self time! !

!classDefinition: #ManualClockXX category: 'TusLibros' stamp: 'MP 11/8/2021 20:07:48'!
Object subclass: #ManualClockXX
	instanceVariableNames: 'time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ManualClockXX methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:07:47' prior: 50916775!
now
	time! !
!ManualClockXX methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:07:59' prior: 50916786!
now

	^time! !
!ManualClockXX methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:08:01' prior: 50916790!
now

	^ time! !
!ManualClockXX methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:10:02'!
incrementTimeBy: aNumber

	time _ time + aNumber.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:10:10' prior: 50916757!
test10

	| tusLibros cartId clock |
	
	clock _ ManualClockXX new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	"pasan 30m"
	self should: [ tusLibros listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:10:18' prior: 50916804!
test10

	| tusLibros cartId clock |
	
	clock _ ManualClockXX new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 30.

	self should: [ tusLibros listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 20:10:22'!
ERROR!
!ManualClockXX methodsFor: 'nil' stamp: 'MP 11/8/2021 20:10:36' overrides: 16896425!
initialize

	time _ 0.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 20:10:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 20:10:38'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 20:10:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 20:10:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 20:10:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 20:10:38'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:12:19' prior: 50916650!
listCart: aCartId


	"^(self findCart: aCartId) contents."
	
	carts at: aCartId
		ifPresent: [ :aCart |
			clock now - cartCreationTime >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			^ aCart contents.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 20:12:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 20:12:24'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 20:12:24'!
ERROR!
!TusLibrosSystemFacade class methodsFor: 'error descriptions' stamp: 'MP 11/8/2021 20:12:30'!
expiredCartErrorDescription
	self shouldBeImplemented.! !
!TusLibrosSystemFacade class methodsFor: 'error descriptions' stamp: 'MP 11/8/2021 20:12:39' prior: 50917029!
expiredCartErrorDescription
	
	^ 'expired cart'! !

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 20:12:41'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 20:12:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 20:12:43'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:15:42' prior: 50916617!
createCartFor: aUser authenticatedBy: aPassword 
	
	| cartId |
	
	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].
	
	cartId _ self nextCartId.
	carts at: cartId put: (Cart acceptingProductsFrom: catalog).
	
	cartCreationTime _ clock now.
	
	^cartId! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:16:51'!
test11

	| tusLibros cartId clock expiredCartId nonExpiredCartId |
	
	clock _ ManualClockXX new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	expiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	nonExpiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	self should: [ tusLibros listCart: expiredCartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:17:20' prior: 50917141!
test11

	| tusLibros clock expiredCartId nonExpiredCartId |
	
	clock _ ManualClockXX new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	expiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	nonExpiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	self should: [ tusLibros listCart: expiredCartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.
	
	self assert: (tusLibros listCart: nonExpiredCartId) isEmpty.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:17:26' prior: 50917165!
test11

	| tusLibros clock expiredCartId nonExpiredCartId |
	
	clock _ ManualClockXX new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	expiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	nonExpiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	self should: [ tusLibros listCart: expiredCartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.
	self assert: (tusLibros listCart: nonExpiredCartId) isEmpty.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:17:27' prior: 50917191!
test11

	| tusLibros clock expiredCartId nonExpiredCartId |
	
	clock _ ManualClockXX new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	expiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	nonExpiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	self should: [ tusLibros listCart: expiredCartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.
	
	self assert: (tusLibros listCart: nonExpiredCartId) isEmpty.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:17:28' prior: 50917217!
test11

	| tusLibros clock expiredCartId nonExpiredCartId |
	
	clock _ ManualClockXX new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	expiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	nonExpiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	self should: [ tusLibros listCart: expiredCartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

	self assert: (tusLibros listCart: nonExpiredCartId) isEmpty.

! !

!testRun: #TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/8/2021 20:17:58'!
FAILURE!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'MP 11/8/2021 20:18:58'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem cart catalog carts lastCartId merchantProcessor lastTransactionId cartCreationStopwatch clock nowProvider cartCreationTime cartCreationTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:18:56' prior: 50917127!
createCartFor: aUser authenticatedBy: aPassword 
	
	| cartId |
	
	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].
	
	cartId _ self nextCartId.
	carts at: cartId put: (Cart acceptingProductsFrom: catalog).
	cartCreationTimes at: cartId put: clock now.
	
	^cartId! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:19:27' prior: 50916929!
listCart: aCartId


	"^(self findCart: aCartId) contents."
	
	carts at: aCartId
		ifPresent: [ :aCart |
			clock now - (cartCreationTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			^ aCart contents.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 20:19:31'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 20:19:31'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 20:19:31'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 20:19:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 20:19:31'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 20:19:31'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 20:19:31'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/8/2021 20:19:31'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'MP 11/8/2021 20:19:45' prior: 50916591!
initializeAuthenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
withClock: aClock
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	merchantProcessor _ aMerchantProcessor.
	clock _ aClock.
	
	carts _ Dictionary new.
	cartCreationTimes _ Dictionary new.
	lastCartId _ 0.
	lastTransactionId _ 0.
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/8/2021 20:19:46'!
PASSED!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'MP 11/8/2021 20:19:51'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem catalog carts lastCartId merchantProcessor lastTransactionId cartCreationStopwatch clock nowProvider cartCreationTime cartCreationTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'MP 11/8/2021 20:19:51'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem catalog carts lastCartId merchantProcessor lastTransactionId clock nowProvider cartCreationTime cartCreationTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'MP 11/8/2021 20:19:51'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem catalog carts lastCartId merchantProcessor lastTransactionId clock cartCreationTime cartCreationTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'MP 11/8/2021 20:19:51'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem catalog carts lastCartId merchantProcessor lastTransactionId clock cartCreationTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:20:35' prior: 50915100!
test01CannotCreateCartWithInvalidCredentials

	| tusLibros |
	
	tusLibros _ TusLibrosSystemFacade
		authenticatingWith: testObjectFactory authSystemDenyingAllxxx
		sourcingProductsFrom: testObjectFactory defaultCatalog
		chargingThrough: testObjectFactory defaultSimulatedMP
		withClock: ManualClockXX new.
	
	self should: [ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosSystemFacade invalidCredentialsErrorDescription.! !

!methodRemoval: TusLibrosSystemFacade class #authenticatingWith:sourcingProductsFrom:chargingThrough: stamp: 'MP 11/8/2021 20:20:52'!
authenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog chargingThrough: aMerchantProcessor

	^self new initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog chargingThrough: aMerchantProcessor.!

!methodRemoval: TusLibrosSystemFacade #initializeAuthenticatingWith:sourcingProductsFrom:chargingThrough: stamp: 'MP 11/8/2021 20:20:55'!
initializeAuthenticatingWith: anAuthenticationSystem sourcingProductsFrom: aCatalog chargingThrough: aMerchantProcessor 
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	carts _ Dictionary new.
	lastCartId _ 0.
	lastTransactionId _ 0.
	merchantProcessor _ aMerchantProcessor.!

!testRun: #TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 20:20:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/8/2021 20:20:59'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:23:04'!
test12

	| tusLibros clock cartId |
	
	clock _ ManualClockXX new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	tusLibros listCart: cartId.

	clock incrementTimeBy: 15.

	self assert: (tusLibros listCart: cartId) isEmpty.

! !

!testRun: #TusLibrosSystemFacadeTest #test12 stamp: 'MP 11/8/2021 20:23:07'!
ERROR!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'MP 11/8/2021 20:23:38'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem catalog carts lastCartId merchantProcessor lastTransactionId clock cartLastModifiedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:23:38' prior: 50917399!
initializeAuthenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
withClock: aClock
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	merchantProcessor _ aMerchantProcessor.
	clock _ aClock.
	
	carts _ Dictionary new.
	cartLastModifiedTimes _ Dictionary new.
	lastCartId _ 0.
	lastTransactionId _ 0.
! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:23:38' prior: 50917284!
createCartFor: aUser authenticatedBy: aPassword 
	
	| cartId |
	
	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].
	
	cartId _ self nextCartId.
	carts at: cartId put: (Cart acceptingProductsFrom: catalog).
	cartLastModifiedTimes at: cartId put: clock now.
	
	^cartId! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:23:38' prior: 50917299!
listCart: aCartId


	"^(self findCart: aCartId) contents."
	
	carts at: aCartId
		ifPresent: [ :aCart |
			clock now - (cartLastModifiedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			^ aCart contents.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:24:05' prior: 50917743!
listCart: aCartId


	"^(self findCart: aCartId) contents."
	
	carts at: aCartId
		ifPresent: [ :aCart |
			clock now - (cartLastModifiedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			cartLastModifiedTimes at: aCartId put: clock now.
			^ aCart contents.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12 stamp: 'MP 11/8/2021 20:24:07'!
PASSED!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'MP 11/8/2021 20:24:12'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem catalog carts lastCartId merchantProcessor lastTransactionId clock cartLastAccessedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:24:12' prior: 50917712!
initializeAuthenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
withClock: aClock
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	merchantProcessor _ aMerchantProcessor.
	clock _ aClock.
	
	carts _ Dictionary new.
	cartLastAccessedTimes _ Dictionary new.
	lastCartId _ 0.
	lastTransactionId _ 0.
! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:24:12' prior: 50917728!
createCartFor: aUser authenticatedBy: aPassword 
	
	| cartId |
	
	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].
	
	cartId _ self nextCartId.
	carts at: cartId put: (Cart acceptingProductsFrom: catalog).
	cartLastAccessedTimes at: cartId put: clock now.
	
	^cartId! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:24:12' prior: 50917757!
listCart: aCartId


	"^(self findCart: aCartId) contents."
	
	carts at: aCartId
		ifPresent: [ :aCart |
			clock now - (cartLastAccessedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			cartLastAccessedTimes at: aCartId put: clock now.
			^ aCart contents.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:25:59'!
test13

	| tusLibros clock cartId |
	
	clock _ ManualClockXX new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 30.

	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	self assert: (tusLibros listCart: cartId) isEmpty.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:26:06' prior: 50917919!
test13

	| tusLibros clock cartId |
	
	clock _ ManualClockXX new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 30.

	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	self should: [ tusLibros listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:26:49' prior: 50917683!
test12

	| tusLibros clock cartId |
	
	clock _ ManualClockXX new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	tusLibros listCart: cartId.

	clock incrementTimeBy: 15.

	self shouldnt: [ tusLibros listCart: cartId ] raise: Error.

! !

!testRun: #TusLibrosSystemFacadeTest #test13 stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12 stamp: 'MP 11/8/2021 20:26:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13 stamp: 'MP 11/8/2021 20:26:56'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:27:32' prior: 50917936!
test13

	| tusLibros clock cartId |
	
	clock _ ManualClockXX new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 30.

	self should: [ tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !

!testRun: #TusLibrosSystemFacadeTest #test13 stamp: 'MP 11/8/2021 20:27:35'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:28:21' prior: 50915799!
add: aQuantity of: aProduct to: aCartId 
	
	(self findCart: aCartId) add: aQuantity of: aProduct.
	
	carts at: aCartId
		ifPresent: [ :aCart |
			clock now - (cartLastAccessedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			aCart add: aQuantity of: aProduct.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 20:28:29'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 20:28:29'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12 stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13 stamp: 'MP 11/8/2021 20:28:29'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 20:28:40'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 20:28:40'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12 stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13 stamp: 'MP 11/8/2021 20:28:40'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 20:28:44'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:29:11' prior: 50918089!
add: aQuantity of: aProduct to: aCartId 
	
	"(self findCart: aCartId) add: aQuantity of: aProduct."
	
	carts at: aCartId
		ifPresent: [ :aCart |
			clock now - (cartLastAccessedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			aCart add: aQuantity of: aProduct.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12 stamp: 'MP 11/8/2021 20:29:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13 stamp: 'MP 11/8/2021 20:29:12'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:30:28'!
test14

	| tusLibros clock cartId |
	
	clock _ ManualClockXX new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 30.

	self should: [ tusLibros checkout: cartId charging: testObjectFactory validCard on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !

!testRun: #TusLibrosSystemFacadeTest #test14 stamp: 'MP 11/8/2021 20:30:30'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 20:31:25' prior: 50915805!
checkout: aCartId charging: aCard on: aDate 
	
	"(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ self nextTransactionId."
	
	carts at: aCartId
		ifPresent: [ :aCart |
			clock now - (cartLastAccessedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			^ self nextTransactionId.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12 stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13 stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14 stamp: 'MP 11/8/2021 20:31:26'!
PASSED!

----SNAPSHOT----(8 November 2021 20:32:23) CuisUniversity-4913.image priorSource: 18661997!

----SNAPSHOT----(8 November 2021 21:05:49) CuisUniversity-4913.image priorSource: 18780283!

----STARTUP---- (8 November 2021 23:13:54) as /home/mnpanic/Documents/dc/ing1/cuis/cuis-tuslibros-it3/CuisUniversity-4913.image!

!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:26:00'!
test15

	| tusLibros clock cartId |
	
	clock _ ManualClockXX new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	clock incrementTimeBy: 15.

	self shouldnt: [ tusLibros listCart: cartId ] raise: Error.

! !

!testRun: #TusLibrosSystemFacadeTest #test15 stamp: 'MP 11/8/2021 23:26:03'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:26:17' prior: 50918293!
add: aQuantity of: aProduct to: aCartId 
	
	"(self findCart: aCartId) add: aQuantity of: aProduct."
	
	carts at: aCartId
		ifPresent: [ :aCart |
			clock now - (cartLastAccessedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			cartLastAccessedTimes at: aCartId put: clock now.
			aCart add: aQuantity of: aProduct.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:26:18' prior: 50918566!
add: aQuantity of: aProduct to: aCartId 
	
	"(self findCart: aCartId) add: aQuantity of: aProduct."
	
	carts at: aCartId
		ifPresent: [ :aCart |
			clock now - (cartLastAccessedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			cartLastAccessedTimes at: aCartId put: clock now.
		
			aCart add: aQuantity of: aProduct.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:26:19' prior: 50918583!
add: aQuantity of: aProduct to: aCartId 
	
	"(self findCart: aCartId) add: aQuantity of: aProduct."
	
	carts at: aCartId
		ifPresent: [ :aCart |
			clock now - (cartLastAccessedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			cartLastAccessedTimes at: aCartId put: clock now.
	
			aCart add: aQuantity of: aProduct.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:26:20' prior: 50918600!
add: aQuantity of: aProduct to: aCartId 
	
	"(self findCart: aCartId) add: aQuantity of: aProduct."
	
	carts at: aCartId
		ifPresent: [ :aCart |
			clock now - (cartLastAccessedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			cartLastAccessedTimes at: aCartId put: clock now.

			aCart add: aQuantity of: aProduct.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !

!testRun: #TusLibrosSystemFacadeTest #test15 stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12 stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13 stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14 stamp: 'MP 11/8/2021 23:26:24'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15 stamp: 'MP 11/8/2021 23:26:24'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:26:53'!
test16

	| tusLibros clock cartId |
	
	clock _ ManualClockXX new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	tusLibros checkout: cartId charging: testObjectFactory validCard on: testObjectFactory fixedDate.

	clock incrementTimeBy: 15.

	self shouldnt: [ tusLibros listCart: cartId ] raise: Error.

! !

!testRun: #TusLibrosSystemFacadeTest #test16 stamp: 'MP 11/8/2021 23:26:54'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:27:07' prior: 50918423!
checkout: aCartId charging: aCard on: aDate 
	
	"(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ self nextTransactionId."
	
	carts at: aCartId
		ifPresent: [ :aCart |
			clock now - (cartLastAccessedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			cartLastAccessedTimes at: aCartId put: clock now.
			
			^ self nextTransactionId.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12 stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13 stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14 stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15 stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16 stamp: 'MP 11/8/2021 23:27:31'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12 stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13 stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14 stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15 stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16 stamp: 'MP 11/8/2021 23:28:47'!
PASSED!

Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Clock category: 'TusLibros' stamp: 'MP 11/8/2021 23:39:42'!
Object subclass: #Clock
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Clock methodsFor: 'nil' stamp: 'MP 11/8/2021 23:39:53'!
now

	self subclassResponsibility.! !

Clock subclass: #ManualClockXX
	instanceVariableNames: 'time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ManualClockXX category: 'TusLibros' stamp: 'MP 11/8/2021 23:39:57'!
Clock subclass: #ManualClockXX
	instanceVariableNames: 'time'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

Undeclared!

!classRenamed: #ManualClockXX as: #ManualClock stamp: 'MP 11/8/2021 23:42:43'!
Smalltalk renameClassNamed: #ManualClockXX as: #ManualClock!
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:42:43' prior: 50918734!
test16

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	tusLibros checkout: cartId charging: testObjectFactory validCard on: testObjectFactory fixedDate.

	clock incrementTimeBy: 15.

	self shouldnt: [ tusLibros listCart: cartId ] raise: Error.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:42:43' prior: 50916464!
defaultTusLibrosSystemFacade
	
	^self tusLibrosSystemFacadeWithClock: ManualClock new.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:42:43' prior: 50918067!
test13

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 30.

	self should: [ tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:42:43' prior: 50917243!
test11

	| tusLibros clock expiredCartId nonExpiredCartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	expiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	nonExpiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	self should: [ tusLibros listCart: expiredCartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

	self assert: (tusLibros listCart: nonExpiredCartId) isEmpty.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:42:43' prior: 50918401!
test14

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 30.

	self should: [ tusLibros checkout: cartId charging: testObjectFactory validCard on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:42:43' prior: 50917956!
test12

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	tusLibros listCart: cartId.

	clock incrementTimeBy: 15.

	self shouldnt: [ tusLibros listCart: cartId ] raise: Error.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:42:43' prior: 50916821!
test10

	| tusLibros cartId clock |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 30.

	self should: [ tusLibros listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:42:44' prior: 50918545!
test15

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	clock incrementTimeBy: 15.

	self shouldnt: [ tusLibros listCart: cartId ] raise: Error.

! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:42:44' prior: 50917547!
test01CannotCreateCartWithInvalidCredentials

	| tusLibros |
	
	tusLibros _ TusLibrosSystemFacade
		authenticatingWith: testObjectFactory authSystemDenyingAllxxx
		sourcingProductsFrom: testObjectFactory defaultCatalog
		chargingThrough: testObjectFactory defaultSimulatedMP
		withClock: ManualClock new.
	
	self should: [ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosSystemFacade invalidCredentialsErrorDescription.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12 stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13 stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14 stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15 stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16 stamp: 'MP 11/8/2021 23:43:03'!
PASSED!

Object subclass: #ActiveCart
	instanceVariableNames: 'cart lastAccessedTime id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ActiveCart category: 'TusLibros' stamp: 'MP 11/8/2021 23:43:32'!
Object subclass: #ActiveCart
	instanceVariableNames: 'cart lastAccessedTime id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ActiveCart category: 'TusLibros' stamp: 'MP 11/8/2021 23:43:37'!
Object subclass: #ActiveCart
	instanceVariableNames: 'cart lastAccessedAt id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'MP 11/8/2021 23:44:49'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem catalog activeCarts lastCartId merchantProcessor lastTransactionId clock cartLastAccessedTimes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:44:49' prior: 50917904!
listCart: aCartId


	"^(self findCart: aCartId) contents."
	
	activeCarts at: aCartId
		ifPresent: [ :aCart |
			clock now - (cartLastAccessedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			cartLastAccessedTimes at: aCartId put: clock now.
			^ aCart contents.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:44:49' prior: 50918755!
checkout: aCartId charging: aCard on: aDate 
	
	"(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ self nextTransactionId."
	
	activeCarts at: aCartId
		ifPresent: [ :aCart |
			clock now - (cartLastAccessedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			cartLastAccessedTimes at: aCartId put: clock now.
			
			^ self nextTransactionId.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:44:49' prior: 50915827!
findCart: aCartId

	^ activeCarts at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:44:49' prior: 50917873!
initializeAuthenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
withClock: aClock
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	merchantProcessor _ aMerchantProcessor.
	clock _ aClock.
	
	activeCarts _ Dictionary new.
	cartLastAccessedTimes _ Dictionary new.
	lastCartId _ 0.
	lastTransactionId _ 0.
! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:44:49' prior: 50918617!
add: aQuantity of: aProduct to: aCartId 
	
	"(self findCart: aCartId) add: aQuantity of: aProduct."
	
	activeCarts at: aCartId
		ifPresent: [ :aCart |
			clock now - (cartLastAccessedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			cartLastAccessedTimes at: aCartId put: clock now.

			aCart add: aQuantity of: aProduct.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:44:49' prior: 50917889!
createCartFor: aUser authenticatedBy: aPassword 
	
	| cartId |
	
	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].
	
	cartId _ self nextCartId.
	activeCarts at: cartId put: (Cart acceptingProductsFrom: catalog).
	cartLastAccessedTimes at: cartId put: clock now.
	
	^cartId! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:49:39' prior: 50919376!
createCartFor: aUser authenticatedBy: aPassword 
	
	| cartId |
	
	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].
	
	cartId _ self nextCartId.

	activeCarts at: cartId put: (ActiveCart
		acceptingProductsFrom: catalog
		keepingTimeWith: clock
		identifiedBy: cartId).

	^cartId! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:50:09' prior: 50919391!
createCartFor: aUser authenticatedBy: aPassword 
	
	| cartId activeCart |
	
	(authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ].
	
	cartId _ self nextCartId.

	activeCart _ ActiveCart
		acceptingProductsFrom: catalog
		keepingTimeWith: clock
		identifiedBy: cartId.

	activeCarts at: cartId put: activeCart.

	^cartId! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:53:59' prior: 50919299!
listCart: aCartId


	"^(self findCart: aCartId) contents."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart |
			clock now - (cartLastAccessedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			cartLastAccessedTimes at: aCartId put: clock now.
			^ anActiveCart cart contents.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:55:17' prior: 50919424!
listCart: aCartId


	"^(self findCart: aCartId) contents."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart |
			clock now - (cartLastAccessedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			cartLastAccessedTimes at: aCartId put: clock now.
			^ anActiveCart contents.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:55:29' prior: 50919315!
checkout: aCartId charging: aCard on: aDate 
	
	"(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ self nextTransactionId."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart |
			clock now - (cartLastAccessedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			cartLastAccessedTimes at: aCartId put: clock now.
			
			^ self nextTransactionId.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:55:38' prior: 50919358!
add: aQuantity of: aProduct to: aCartId 
	
	"(self findCart: aCartId) add: aQuantity of: aProduct."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart |
			clock now - (cartLastAccessedTimes at: aCartId) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			cartLastAccessedTimes at: aCartId put: clock now.

			anActiveCart add: aQuantity of: aProduct.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !
!ActiveCart methodsFor: 'cart protocol' stamp: 'MP 11/8/2021 23:57:37'!
add: aQuantity of: aProduct

	cart add: aQuantity of: aProduct ! !
!ActiveCart methodsFor: 'cart protocol' stamp: 'MP 11/8/2021 23:57:44'!
contents

	^cart contents! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:58:43' prior: 50919440!
listCart: aCartId


	"^(self findCart: aCartId) contents."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart |
			clock now - (anActiveCart lastAccessedAt) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			cartLastAccessedTimes at: aCartId put: clock now.
			^ anActiveCart contents.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:58:49' prior: 50919456!
checkout: aCartId charging: aCard on: aDate 
	
	"(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ self nextTransactionId."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart |
			clock now - (anActiveCart lastAccessedAt) >= 30 ifTrue: [ self error: self class expiredCartErrorDescription ].
			cartLastAccessedTimes at: aCartId put: clock now.
			
			^ self nextTransactionId.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/8/2021 23:59:44' prior: 50919519!
checkout: aCartId charging: aCard on: aDate 
	
	"(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ self nextTransactionId."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart |
			anActiveCart isExpired ifTrue: [ self error: self class expiredCartErrorDescription ].			
			^ self nextTransactionId.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 00:00:07' prior: 50919539!
checkout: aCartId charging: aCard on: aDate 
	
	"(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ self nextTransactionId."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart |
			anActiveCart isExpired ifTrue: [ self error: self class expiredCartErrorDescription ].
			anActiveCart refreshX.
			^ self nextTransactionId.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 00:00:29' prior: 50919503!
listCart: aCartId


	"^(self findCart: aCartId) contents."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart |
			anActiveCart isExpired ifTrue: [ self error: self class expiredCartErrorDescription ].
			^ anActiveCart contents.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 00:01:52' prior: 50919556!
checkout: aCartId charging: aCard on: aDate 
	
	"(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ self nextTransactionId."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart |
			anActiveCart isExpired ifTrue: [ self error: self class expiredCartErrorDescription ].
			^ self nextTransactionId.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !

!methodRemoval: TusLibrosSystemFacadeTest #test16 stamp: 'MP 11/9/2021 00:02:02'!
test16

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	tusLibros checkout: cartId charging: testObjectFactory validCard on: testObjectFactory fixedDate.

	clock incrementTimeBy: 15.

	self shouldnt: [ tusLibros listCart: cartId ] raise: Error.

!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 00:02:29' prior: 50919476!
add: aQuantity of: aProduct to: aCartId 
	
	"(self findCart: aCartId) add: aQuantity of: aProduct."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart |
			anActiveCart isExpired ifTrue: [ self error: self class expiredCartErrorDescription ].

			anActiveCart add: aQuantity of: aProduct.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !

!classDefinition: #ActiveCart category: 'TusLibros' stamp: 'MP 11/9/2021 00:02:49'!
Object subclass: #ActiveCart
	instanceVariableNames: 'cart lastAccessedAt id clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ActiveCart category: 'TusLibros' stamp: 'MP 11/9/2021 00:02:50'!
Object subclass: #ActiveCart
	instanceVariableNames: 'cart lastAccessedAt id clock lastModifiedAt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ActiveCart methodsFor: 'nil' stamp: 'MP 11/9/2021 00:02:46'!
isExpired

	^ clock now - (lastModifiedAt) >= 30 ! !
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 00:02:54' prior: 50919651!
isExpired

	^ clock now - lastModifiedAt >= 30 ! !
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 00:03:18' prior: 50919656!
isExpired

	^ clock now - lastAccessedAt >= 30 ! !

!classDefinition: #ActiveCart category: 'TusLibros' stamp: 'MP 11/9/2021 00:03:40'!
Object subclass: #ActiveCart
	instanceVariableNames: 'cart lastAccessedAt clock lastModifiedAt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ActiveCart category: 'TusLibros' stamp: 'MP 11/9/2021 00:03:40'!
Object subclass: #ActiveCart
	instanceVariableNames: 'cart lastAccessedAt clock'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ActiveCart methodsFor: 'cart protocol' stamp: 'MP 11/9/2021 00:03:53' prior: 50919498!
contents

	^ cart contents! !
!ActiveCart methodsFor: 'cart protocol' stamp: 'MP 11/9/2021 00:04:06' prior: 50919493!
add: aQuantity of: aProduct

	cart add: aQuantity of: aProduct.
	self refreshX.! !
!ActiveCart methodsFor: 'cart protocol' stamp: 'MP 11/9/2021 00:04:13' prior: 50919681!
contents

	self refreshX.
	^ cart contents! !
!ActiveCart methodsFor: 'cart protocol' stamp: 'MP 11/9/2021 00:04:33'!
refreshX

	lastAccessedAt _ clock now.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 00:04:35'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 00:04:35'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 00:04:35'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 00:04:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 00:04:35'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 00:04:35'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/9/2021 00:04:35'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/9/2021 00:04:35'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test12 stamp: 'MP 11/9/2021 00:04:35'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13 stamp: 'MP 11/9/2021 00:04:35'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14 stamp: 'MP 11/9/2021 00:04:35'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15 stamp: 'MP 11/9/2021 00:04:35'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 00:04:37'!
ERROR!
!ActiveCart class methodsFor: 'instance creation' stamp: 'MP 11/9/2021 00:04:42'!
acceptingProductsFrom: aDictionary keepingTimeWith: aManualClock identifiedBy: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAcceptingProductsFrom: aDictionary keepingTimeWith: aManualClock identifiedBy: aSmallInteger ! !
!ActiveCart class methodsFor: 'instance creation' stamp: 'MP 11/9/2021 00:05:08' prior: 50919801!
acceptingProductsFrom: aCatalog keepingTimeWith: aClock identifiedBy: anId 

	^self new initializeAcceptingProductsFrom: aCatalog keepingTimeWith: aClock identifiedBy: anId ! !

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 00:05:09'!
ERROR!

!classDefinition: #ActiveCart category: 'TusLibros' stamp: 'MP 11/9/2021 00:05:15'!
Object subclass: #ActiveCart
	instanceVariableNames: 'cart lastAccessedAt clock catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #ActiveCart category: 'TusLibros' stamp: 'MP 11/9/2021 00:05:15'!
Object subclass: #ActiveCart
	instanceVariableNames: 'cart lastAccessedAt clock catalog id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ActiveCart methodsFor: 'initialization' stamp: 'MP 11/9/2021 00:05:15'!
initializeAcceptingProductsFrom: aCatalog keepingTimeWith: aClock identifiedBy: anId 
	self shouldBeImplemented.
	catalog := aCatalog.
	clock := aClock.
	id := anId.! !
!ActiveCart methodsFor: 'initialization' stamp: 'MP 11/9/2021 00:05:31' prior: 50919841!
initializeAcceptingProductsFrom: aCatalog keepingTimeWith: aClock identifiedBy: anId

	cart := Cart acceptingProductsFrom: aCatalog.
	clock := aClock.
	id := anId.! !
!ActiveCart methodsFor: 'initialization' stamp: 'MP 11/9/2021 00:05:41' prior: 50919850!
initializeAcceptingProductsFrom: aCatalog keepingTimeWith: aClock identifiedBy: anId

	cart := Cart acceptingProductsFrom: aCatalog.
	clock := aClock.
	id := anId.
	lastAccessedAt _ clock now.! !
!ActiveCart methodsFor: 'initialization' stamp: 'MP 11/9/2021 00:05:42' prior: 50919858!
initializeAcceptingProductsFrom: aCatalog keepingTimeWith: aClock identifiedBy: anId

	cart := Cart acceptingProductsFrom: aCatalog.
	clock := aClock.
	id := anId.

	lastAccessedAt _ clock now.! !
!ActiveCart methodsFor: 'initialization' stamp: 'MP 11/9/2021 00:05:44' prior: 50919867!
initializeAcceptingProductsFrom: aCatalog keepingTimeWith: aClock identifiedBy: anId

	clock := aClock.
	id := anId.

	cart := Cart acceptingProductsFrom: aCatalog.

	lastAccessedAt _ clock now.! !
!ActiveCart methodsFor: 'initialization' stamp: 'MP 11/9/2021 00:05:45' prior: 50919876!
initializeAcceptingProductsFrom: aCatalog keepingTimeWith: aClock identifiedBy: anId

	clock := aClock.
	id := anId.

	cart := Cart acceptingProductsFrom: aCatalog.
	lastAccessedAt _ clock now.! !
!ActiveCart methodsFor: 'initialization' stamp: 'MP 11/9/2021 00:05:50' prior: 50919885!
initializeAcceptingProductsFrom: aCatalog keepingTimeWith: aClock identifiedBy: anId

	clock _ aClock.
	id _ anId.

	cart _ Cart acceptingProductsFrom: aCatalog.
	lastAccessedAt _ clock now.! !

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 00:05:51'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12 stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13 stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14 stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15 stamp: 'MP 11/9/2021 00:05:53'!
PASSED!

!classDefinition: #ActiveCart category: 'TusLibros' stamp: 'MP 11/9/2021 00:05:57'!
Object subclass: #ActiveCart
	instanceVariableNames: 'cart lastAccessedAt clock id'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ActiveCart methodsFor: 'initialization' stamp: 'MP 11/9/2021 00:06:16' prior: 50919894!
initializeAcceptingProductsFrom: aCatalog
keepingTimeWith: aClock
identifiedBy: anId

	clock _ aClock.
	id _ anId.

	cart _ Cart acceptingProductsFrom: aCatalog.
	lastAccessedAt _ clock now.! !

----SNAPSHOT----(9 November 2021 00:07:56) CuisUniversity-4913.image priorSource: 18780376!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 00:09:10'!
test15AddingProductsRefreshesCart

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	clock incrementTimeBy: 15.

	self shouldnt: [ tusLibros listCart: cartId ] raise: Error.

! !

!methodRemoval: TusLibrosSystemFacadeTest #test15 stamp: 'MP 11/9/2021 00:09:10'!
test15

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	clock incrementTimeBy: 15.

	self shouldnt: [ tusLibros listCart: cartId ] raise: Error.

!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 00:09:23'!
test14CannotCheckoutExpiredCart

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 30.

	self should: [ tusLibros checkout: cartId charging: testObjectFactory validCard on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !

!methodRemoval: TusLibrosSystemFacadeTest #test14 stamp: 'MP 11/9/2021 00:09:23'!
test14

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 30.

	self should: [ tusLibros checkout: cartId charging: testObjectFactory validCard on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 00:09:31'!
test13CannotAddProductsToExpiredCart

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 30.

	self should: [ tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !

!methodRemoval: TusLibrosSystemFacadeTest #test13 stamp: 'MP 11/9/2021 00:09:31'!
test13

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 30.

	self should: [ tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 00:09:39'!
test12ListingRefreshesCart

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	tusLibros listCart: cartId.

	clock incrementTimeBy: 15.

	self shouldnt: [ tusLibros listCart: cartId ] raise: Error.

! !

!methodRemoval: TusLibrosSystemFacadeTest #test12 stamp: 'MP 11/9/2021 00:09:39'!
test12

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	tusLibros listCart: cartId.

	clock incrementTimeBy: 15.

	self shouldnt: [ tusLibros listCart: cartId ] raise: Error.

!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 00:10:02'!
test11CartsExpireAfterThirtyMinutes

	| tusLibros clock expiredCartId nonExpiredCartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	expiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	nonExpiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	self should: [ tusLibros listCart: expiredCartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

	self assert: (tusLibros listCart: nonExpiredCartId) isEmpty.

! !

!methodRemoval: TusLibrosSystemFacadeTest #test11 stamp: 'MP 11/9/2021 00:10:02'!
test11

	| tusLibros clock expiredCartId nonExpiredCartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	expiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	nonExpiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	self should: [ tusLibros listCart: expiredCartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

	self assert: (tusLibros listCart: nonExpiredCartId) isEmpty.

!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 00:10:10'!
test11CartsExpireOnlyAfterThirtyMinutes

	| tusLibros clock expiredCartId nonExpiredCartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	expiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	nonExpiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	self should: [ tusLibros listCart: expiredCartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

	self assert: (tusLibros listCart: nonExpiredCartId) isEmpty.

! !

!methodRemoval: TusLibrosSystemFacadeTest #test11CartsExpireAfterThirtyMinutes stamp: 'MP 11/9/2021 00:10:10'!
test11CartsExpireAfterThirtyMinutes

	| tusLibros clock expiredCartId nonExpiredCartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	expiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	nonExpiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	self should: [ tusLibros listCart: expiredCartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

	self assert: (tusLibros listCart: nonExpiredCartId) isEmpty.

!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 00:10:48'!
test10CannotListExpiredCart

	| tusLibros cartId clock |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 30.

	self should: [ tusLibros listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !

!methodRemoval: TusLibrosSystemFacadeTest #test10 stamp: 'MP 11/9/2021 00:10:48'!
test10

	| tusLibros cartId clock |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 30.

	self should: [ tusLibros listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 00:11:12' prior: 50915240!
test09

	| tusLibros cartId firstTransactionId secondTransactionId |
		
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	firstTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
	
	secondTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
		
	self assert: firstTransactionId isNotEqualTo: secondTransactionId.

! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 00:11:13' prior: 50920300!
test09

	| tusLibros cartId firstTransactionId secondTransactionId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	firstTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
	
	secondTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
		
	self assert: firstTransactionId isNotEqualTo: secondTransactionId.

! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 00:11:59' prior: 50915133!
test03CanAddMultipleItemsToACartXXXXXx

	| tusLibros expectedCartContents quantity firstCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	"TODO: cambiar esto por algo que no se fije la estructura"
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 00:12:02' prior: 50915155!
test04CanListMultipleCartsXXXXx

	| tusLibros expectedCartContents quantity firstCartId secondCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	secondCartId _ tusLibros createCartFor: 'nacho' authenticatedBy: 'elRetorico'.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	"TODO: cambiar esto por algo que no se fije la estructura"
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).
	self assert: (tusLibros listCart: secondCartId) isEmpty.! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 00:12:27' prior: 50920214!
test11CartsExpireOnlyAfterThirtyMinutes

	| tusLibros clock expiredCartId nonExpiredCartId |

	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	expiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	nonExpiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	self should: [ tusLibros listCart: expiredCartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

	self assert: (tusLibros listCart: nonExpiredCartId) isEmpty.

! !
!Cashier methodsFor: 'checkout' stamp: 'MP 11/9/2021 00:13:43' prior: 50915433!
checkout: aCart charging: aCreditCard on: aDate

	| totalPrice |
	self assertCartIsNotEmpty: aCart.
	self assertCard: aCreditCard isNotExpiredOn: aDate.
	self assertCardNumberIsValid: aCreditCard.

	totalPrice _ aCart totalPrice.
	
	merchantProcessor charge: totalPrice to: aCreditCard.
	
	^ totalPrice
! !
!Cashier methodsFor: 'checkout' stamp: 'MP 11/9/2021 00:23:42' prior: 50920420!
checkout: aCart charging: aCreditCard on: aDate

	| totalPrice |
	self assertCartIsNotEmpty: aCart.
	self assertCard: aCreditCard isNotExpiredOn: aDate.
	self assertCardNumberIsValid: aCreditCard.

	totalPrice _ aCart totalPrice.
	
	merchantProcessor charge: totalPrice to: aCreditCard.
	
	^ totalPrice
! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'MP 11/9/2021 00:27:08'!
Object subclass: #Sale
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/9/2021 00:28:11' prior: 50914977!
test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice

	| cart cashier expectedSale receipt salesBook |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	salesBook _ OrderedCollection new.
	
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	receipt _ cashier 
		checkout: cart 
		charging: testObjectFactory validCard 
		on: testObjectFactory fixedDate
		registeringOn: salesBook.
	
	expectedSale _ Sale 
		of: cart contents
		totalling: testObjectFactory firstProductSoldByTheStorePrice.

	self assert: testObjectFactory firstProductSoldByTheStorePrice equals: receipt.
	self assert: salesBook includes: expectedSale.! !

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:28:32'!
ERROR!
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/9/2021 00:34:28' prior: 50920452!
test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice

	| cart cashier expectedSale receipt salesBook |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	salesBook _ OrderedCollection new.
	
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	receipt _ cashier 
		checkout: cart 
		charging: testObjectFactory validCard 
		on: testObjectFactory fixedDate
		registeringOn: salesBook.
	
	expectedSale _ Sale
		of: cart contents
		totalling: testObjectFactory firstProductSoldByTheStorePrice.

	self assert: testObjectFactory firstProductSoldByTheStorePrice equals: receipt.
	self assert: salesBook includes: expectedSale.! !
!Cashier methodsFor: 'checkout' stamp: 'MP 11/9/2021 00:44:21'!
checkout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook

	| totalPrice |
	self assertCartIsNotEmpty: aCart.
	self assertCard: aCreditCard isNotExpiredOn: aDate.
	self assertCardNumberIsValid: aCreditCard.

	totalPrice _ aCart totalPrice.
	
	merchantProcessor charge: totalPrice to: aCreditCard.
	
	aSalesBook add: Sale of: aCart contents totalling: totalPrice.
	
	^ totalPrice
! !
!Cashier methodsFor: 'checkout' stamp: 'MP 11/9/2021 00:44:25' prior: 50920503!
checkout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook

	| totalPrice |
	self assertCartIsNotEmpty: aCart.
	self assertCard: aCreditCard isNotExpiredOn: aDate.
	self assertCardNumberIsValid: aCreditCard.

	totalPrice _ aCart totalPrice.
	
	merchantProcessor charge: totalPrice to: aCreditCard.
	
	aSalesBook add: (Sale of: aCart contents totalling: totalPrice).
	
	^ totalPrice
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:44:56'!
ERROR!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 00:44:56'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:44:56'!
ERROR!
!Sale class methodsFor: 'instance creation' stamp: 'MP 11/9/2021 00:45:00'!
of: aBag totalling: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOf: aBag totalling: aSmallInteger ! !
!Sale class methodsFor: 'instance creation' stamp: 'MP 11/9/2021 00:45:25' prior: 50920640!
of: aCollectionOfContents totalling: anAmount 

	^self new initializeOf: aCollectionOfContents totalling: anAmount ! !

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:45:25'!
ERROR!

!classDefinition: #Sale category: 'TusLibros' stamp: 'MP 11/9/2021 00:45:31'!
Object subclass: #Sale
	instanceVariableNames: 'collectionOfContents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'MP 11/9/2021 00:45:31'!
Object subclass: #Sale
	instanceVariableNames: 'collectionOfContents amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'MP 11/9/2021 00:45:31'!
initializeOf: aCollectionOfContents totalling: anAmount 
	self shouldBeImplemented.
	collectionOfContents := aCollectionOfContents.
	amount := anAmount.! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'MP 11/9/2021 00:45:42'!
Object subclass: #Sale
	instanceVariableNames: 'collectionOfContents amount contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'MP 11/9/2021 00:45:41' prior: 50920673!
initializeOf: aCollectionOfContents totalling: anAmount

	contents := aCollectionOfContents.
	amount := anAmount.! !

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:45:44'!
FAILURE!

salesBook!

Sale!

self first!
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/9/2021 00:48:22' prior: 50920480!
test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice

	| cart cashier expectedSale receipt salesBook |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	salesBook _ OrderedCollection new.
	
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	receipt _ cashier 
		checkout: cart 
		charging: testObjectFactory validCard 
		on: testObjectFactory fixedDate
		registeringOn: salesBook.
	
	expectedSale _ Sale
		of: cart contents
		totalling: testObjectFactory firstProductSoldByTheStorePrice.

	self assert: testObjectFactory firstProductSoldByTheStorePrice equals: receipt.
	self assert: (salesBook includes: expectedSale).! !

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:48:25'!
FAILURE!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:48:30'!
FAILURE!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 00:48:30'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:48:30'!
FAILURE!

self at: i!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:51:02'!
FAILURE!

salesBook first!

expectedSale!

salesBook first = expectedSale!

salesBook first == expectedSale!

----End fileIn of /home/mnpanic/Documents/dc/ing1/cuis/cuis-tuslibros-it3/Packages/TerseGuide.pck.st----!
!Sale methodsFor: 'comparing' stamp: 'MP 11/9/2021 00:56:09' overrides: 50758320!
= otherSale

	^ contents = otherSale contents and: [ nil = otherSale totalPrice ].

	! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'MP 11/9/2021 00:56:18'!
Object subclass: #Sale
	instanceVariableNames: 'collectionOfContents totalPrice contents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 00:56:18' prior: 50920688!
initializeOf: aCollectionOfContents totalling: anAmount

	contents := aCollectionOfContents.
	totalPrice := anAmount.! !
!Sale methodsFor: 'comparing' stamp: 'MP 11/9/2021 00:56:23' prior: 50923768 overrides: 50758320!
= otherSale

	^ contents = otherSale contents and: [ totalPrice = otherSale totalPrice ].

	! !
!Sale methodsFor: 'nil' stamp: 'MP 11/9/2021 00:56:30'!
contents

	^ contents! !
!Sale methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 00:56:34'!
totalPrice

	^ totalPrice.! !

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 00:56:42'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 00:56:44'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 00:56:57'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 00:56:57'!
PASSED!
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/9/2021 00:59:08' prior: 50914992!
test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice

	| cart cashier quantity expectedSale receipt salesBook |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	salesBook _ OrderedCollection new.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	
	receipt _ cashier 
		checkout: cart 
		charging: testObjectFactory validCard 
		on: testObjectFactory fixedDate
		registeringOn: salesBook.
	
	expectedSale _ Sale
		of: cart contents
		totalling: testObjectFactory firstProductSoldByTheStorePrice.
	
	self 
		assert: (quantity * testObjectFactory firstProductSoldByTheStorePrice)
		equals: receipt.
	
	self assert: salesBook includes: expectedSale.! !

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 00:59:13'!
FAILURE!
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/9/2021 00:59:23' prior: 50924120!
test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice

	| cart cashier quantity expectedSale receipt salesBook |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	salesBook _ OrderedCollection new.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	
	receipt _ cashier 
		checkout: cart 
		charging: testObjectFactory validCard 
		on: testObjectFactory fixedDate
		registeringOn: salesBook.
	
	expectedSale _ Sale
		of: cart contents
		totalling: quantity * testObjectFactory firstProductSoldByTheStorePrice.
	
	self 
		assert: (quantity * testObjectFactory firstProductSoldByTheStorePrice)
		equals: receipt.
	
	self assert: salesBook includes: expectedSale.! !

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 00:59:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 00:59:29'!
PASSED!
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:00:55' prior: 50915010!
test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices

	| cart cashier quantity expectedRecepit expectedSale receipt salesBook |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	salesBook _ OrderedCollection new.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: testObjectFactory secondProductSoldByTheStore.
	
	receipt _ cashier 
		checkout: cart 
		charging: testObjectFactory validCard 
		on: testObjectFactory fixedDate
		registeringOn: salesBook.
	
	expectedRecepit _
		(quantity * testObjectFactory firstProductSoldByTheStorePrice) +
		(testObjectFactory secondProductSoldByTheStorePrice).
	
	expectedSale _ Sale
		of: cart contents
		totalling: expectedRecepit.

	self 
		assert: expectedRecepit
		equals: (receipt).
	
	self assert: salesBook includes: expectedSale.! !

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:00:59'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:00:59'!
PASSED!
!CheckoutTest methodsFor: 'assertions' stamp: 'MP 11/9/2021 01:01:18' prior: 50914950!
assertCheckout: aCart charging: aCard raises: anErrorMessage
	
	| cashier salesBook |
	cashier _ testObjectFactory createCashier.
	salesBook _ OrderedCollection new.
	
	self should: [ cashier 
				checkout: aCart 
				charging: aCard 
				on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: anErrorMessage equals: anException messageText ].! !
!CheckoutTest methodsFor: 'assertions' stamp: 'MP 11/9/2021 01:01:28' prior: 50924423!
assertCheckout: aCart charging: aCard raises: anErrorMessage
	
	| cashier salesBook |
	cashier _ testObjectFactory createCashier.
	salesBook _ OrderedCollection new.
	
	self should: [ cashier 
				checkout: aCart 
				charging: aCard 
				on: testObjectFactory fixedDate 
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | self assert: anErrorMessage equals: anException messageText ].! !
!CheckoutTest methodsFor: 'assertions' stamp: 'MP 11/9/2021 01:01:46' prior: 50924439!
assertCheckout: aCart charging: aCard raises: anErrorMessage
	
	| cashier salesBook |
	cashier _ testObjectFactory createCashier.
	salesBook _ OrderedCollection new.
	
	self should: [ cashier 
				checkout: aCart 
				charging: aCard 
				on: testObjectFactory fixedDate 
				registeringOn: salesBook ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | 
			self assert: anErrorMessage equals: anException messageText.
			self assert: 	salesBook isEmpty.
		].! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:01:48'!
PASSED!

!methodRemoval: Cashier #checkout:charging:on: stamp: 'MP 11/9/2021 01:02:21'!
checkout: aCart charging: aCreditCard on: aDate

	| totalPrice |
	self assertCartIsNotEmpty: aCart.
	self assertCard: aCreditCard isNotExpiredOn: aDate.
	self assertCardNumberIsValid: aCreditCard.

	totalPrice _ aCart totalPrice.
	
	merchantProcessor charge: totalPrice to: aCreditCard.
	
	^ totalPrice
!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:02:25'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:02:33'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:02:33'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:02:33'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:02:33'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:02:33'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:02:33'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:02:33'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:02:33'!
PASSED!

----SNAPSHOT----(9 November 2021 01:02:35) CuisUniversity-4913.image priorSource: 18827841!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:04:03' prior: 50915207!
test07CannotCheckoutInvalidCartId

	| tusLibros invalidId |
	
	"TODO: list purchases y que no haya pasado nada"
		tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros
			checkout: invalidId
			charging: testObjectFactory validCard
			on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:04:04' prior: 50924753!
test07CannotCheckoutInvalidCartId

	| tusLibros invalidId |
	
	"TODO: list purchases y que no haya pasado nada"
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros
			checkout: invalidId
			charging: testObjectFactory validCard
			on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:09:06' prior: 50915222!
test08

	| tusLibros cartId |
	
	"TODO: Assertar observando mediante listPurchases y no mediante isNotNil."
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.

	self assert: (tusLibros listPurchasesOf: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword) isEmpty! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:09:17'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:09:22'!
listPurchasesOf: aString authenticatedBy: aString2 
	self shouldBeImplemented.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:09:43' prior: 50924809!
listPurchasesOf: aUser authenticatedBy: aPassword

	! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:10:26'!
assert: aPassword canBeAuthenticatedBy: aUser

	^ (authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:10:26' prior: 50919407!
createCartFor: aUser authenticatedBy: aPassword 
	
	| cartId activeCart |
	
	self assert: aPassword canBeAuthenticatedBy: aUser.
	
	cartId _ self nextCartId.

	activeCart _ ActiveCart
		acceptingProductsFrom: catalog
		keepingTimeWith: clock
		identifiedBy: cartId.

	activeCarts at: cartId put: activeCart.

	^cartId! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:10:40' prior: 50924830!
createCartFor: aUser authenticatedBy: aPassword 
	
	| cartId activeCart |
	
	self assert: aUser canBeAuthenticatedBy: aPassword.
	
	cartId _ self nextCartId.

	activeCart _ ActiveCart
		acceptingProductsFrom: catalog
		keepingTimeWith: clock
		identifiedBy: cartId.

	activeCarts at: cartId put: activeCart.

	^cartId! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:10:50' prior: 50924820!
assert: aUser canBeAuthenticatedBy: aPassword

	^ (authenticationSystem can: aUser beAuthenticatedBy: aPassword)
		ifFalse: [ self error: TusLibrosSystemFacade invalidCredentialsErrorDescription ]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:11:09' prior: 50924815!
listPurchasesOf: aUser authenticatedBy: aPassword

	self assert: aUser canBeAuthenticatedBy: aPassword.
	^ OrderedCollection new.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:11:12'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:11:12'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:12:41' prior: 50924787!
test08

	| tusLibros cartId |
	
	"TODO: Assertar observando mediante listPurchases y no mediante isNotNil."
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword.
	
	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.

	self assert: (tusLibros listPurchasesOf: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword) isEmpty! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:14:38' prior: 50924978!
test08

	| tusLibros cartId expectedSale userPurchases |
	
	"TODO: Assertar observando mediante listPurchases y no mediante isNotNil."
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword.
	
	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.

	userPurchases _ (tusLibros listPurchasesOf: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword).
	expectedSale _ Sale
		of: (Bag with: testObjectFactory firstProductSoldByTheStore)
		totalling: testObjectFactory firstProductSoldByTheStorePrice.

	self assert: userPurchases includes: expectedSale.
	! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:14:42'!
FAILURE!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'MP 11/9/2021 01:23:27'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem catalog activeCarts lastCartId merchantProcessor lastTransactionId clock cartLastAccessedTimes salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:23:26' prior: 50924868!
listPurchasesOf: aUser authenticatedBy: aPassword

	self assert: aUser canBeAuthenticatedBy: aPassword.
	
	^salesBook select: [ :aUserSale | aUserSale user = aUser ]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:23:50' prior: 50925044!
listPurchasesOf: aUser authenticatedBy: aPassword

	self assert: aUser canBeAuthenticatedBy: aPassword.
	
	^ salesBook select: [ :aUserSale | aUserSale user = aUser ]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:25:20' prior: 50919588!
checkout: aCartId charging: aCard on: aDate 
	
	"(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ self nextTransactionId."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart |
			anActiveCart isExpired ifTrue: [ self error: self class expiredCartErrorDescription ].
			
			^ self nextTransactionId.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'MP 11/9/2021 01:26:03'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem catalog activeCarts lastCartId merchantProcessor lastTransactionId clock cartLastAccessedTimes salesBook cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'MP 11/9/2021 01:26:02' prior: 50919342!
initializeAuthenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
withClock: aClock
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	cashier _ Cashier withMerchantProcessor: aMerchantProcessor.
	clock _ aClock.
	
	activeCarts _ Dictionary new.
	cartLastAccessedTimes _ Dictionary new.
	lastCartId _ 0.
	lastTransactionId _ 0.
! !
!Cashier class methodsFor: 'instance creation' stamp: 'MP 11/9/2021 01:26:12'!
chargingThrough: aMerchantProcessor 

	^self new initializeWithMerchantProcessor: aMerchantProcessor.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:26:12' prior: 50925091!
initializeAuthenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
withClock: aClock
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	cashier _ Cashier chargingThrough: aMerchantProcessor.
	clock _ aClock.
	
	activeCarts _ Dictionary new.
	cartLastAccessedTimes _ Dictionary new.
	lastCartId _ 0.
	lastTransactionId _ 0.
! !
!TestObjectFactory methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:26:12' prior: 50915737!
createCashier

	^ Cashier chargingThrough: self defaultSimulatedMP.! !

!methodRemoval: Cashier class #withMerchantProcessor: stamp: 'MP 11/9/2021 01:26:12'!
withMerchantProcessor: aMerchantProcessor 

	^self new initializeWithMerchantProcessor: aMerchantProcessor.!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'MP 11/9/2021 01:26:35' prior: 50925114!
initializeAuthenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
withClock: aClock
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	cashier _ Cashier chargingThrough: aMerchantProcessor.
	clock _ aClock.
	
	activeCarts _ Dictionary new.
	cartLastAccessedTimes _ Dictionary new.
	lastCartId _ 0.
	lastTransactionId _ 0.
! !
!Cashier methodsFor: 'initialization' stamp: 'MP 11/9/2021 01:26:54'!
initializeChargingThrough: aMerchantProcessor 

	merchantProcessor _ aMerchantProcessor.! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:26:54' prior: 50925107!
chargingThrough: aMerchantProcessor 

	^self new initializeChargingThrough: aMerchantProcessor.! !

!methodRemoval: Cashier #initializeWithMerchantProcessor: stamp: 'MP 11/9/2021 01:26:54'!
initializeWithMerchantProcessor: aMerchantProcessor 

	merchantProcessor _ aMerchantProcessor.!

!classDefinition: #TusLibrosSystemFacade category: 'TusLibros' stamp: 'MP 11/9/2021 01:27:10'!
Object subclass: #TusLibrosSystemFacade
	instanceVariableNames: 'authenticationSystem catalog activeCarts lastCartId lastTransactionId clock cartLastAccessedTimes salesBook cashier'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:28:32' prior: 50925062!
checkout: aCartId charging: aCard on: aDate 
	
	"(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ self nextTransactionId."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart | | receipt |
			anActiveCart isExpired ifTrue: [ self error: self class expiredCartErrorDescription ].
			
			receipt _ cashier checkout: anActiveCart charging: nil on: nil registeringOn: nil.
			
			^ self nextTransactionId.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:29:24' prior: 50925187!
checkout: aCartId charging: aCard on: aDate 
	
	"(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ self nextTransactionId."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart | | receipt |
			anActiveCart isExpired ifTrue: [ self error: self class expiredCartErrorDescription ].
			
			receipt _ cashier checkout: anActiveCart cart charging: nil on: nil registeringOn: nil.
			
			^ self nextTransactionId.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:29:33' prior: 50919574!
listCart: aCartId


	"^(self findCart: aCartId) contents."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart |
			anActiveCart isExpired ifTrue: [ self error: self class expiredCartErrorDescription ].
			^ anActiveCart cart contents.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:29:38' prior: 50919622!
add: aQuantity of: aProduct to: aCartId 
	
	"(self findCart: aCartId) add: aQuantity of: aProduct."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart |
			anActiveCart isExpired ifTrue: [ self error: self class expiredCartErrorDescription ].

			anActiveCart cart add: aQuantity of: aProduct.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].
! !
!ActiveCart methodsFor: 'cart protocol' stamp: 'MP 11/9/2021 01:31:07'!
cart

	self refreshX.
	^ cart.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:32:16' prior: 50925207!
checkout: aCartId charging: aCard on: aDate 
	
	"(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ self nextTransactionId."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart | | receipt |
			anActiveCart isExpired ifTrue: [ self error: self class expiredCartErrorDescription ].
			
			receipt _ cashier checkout: anActiveCart cart charging: aCard on: clock now.
			
			^ self nextTransactionId.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:33:12' prior: 50925262!
checkout: aCartId charging: aCard on: aDate 
	
	"(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ self nextTransactionId."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart | | receipt |
			anActiveCart isExpired ifTrue: [ self error: self class expiredCartErrorDescription ].
			
			receipt _ cashier checkout: anActiveCart cart charging: aCard on: clock now.
			
			salesBook add: Sale
				by: anActiveCart userId
				of: anActiveCart cart contents
				totalling: receipt.
			
			^ self nextTransactionId.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:33:22' prior: 50925282!
checkout: aCartId charging: aCard on: aDate 
	
	"(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ self nextTransactionId."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart | | receipt |
			anActiveCart isExpired ifTrue: [ self error: self class expiredCartErrorDescription ].
			
			receipt _ cashier checkout: anActiveCart cart charging: aCard on: clock now.
			
			salesBook add: (Sale
				by: anActiveCart userId
				of: anActiveCart cart contents
				totalling: receipt).
			
			^ self nextTransactionId.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !
!Cashier methodsFor: 'checkout' stamp: 'MP 11/9/2021 01:33:39' prior: 50920518!
checkout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook

	| totalPrice |
	self assertCartIsNotEmpty: aCart.
	self assertCard: aCreditCard isNotExpiredOn: aDate.
	self assertCardNumberIsValid: aCreditCard.

	totalPrice _ aCart totalPrice.
	
	merchantProcessor charge: totalPrice to: aCreditCard.

	^ totalPrice
! !
!Cashier methodsFor: 'checkout' stamp: 'MP 11/9/2021 01:33:47'!
checkout: aCart charging: aCreditCard on: aDate 

	| totalPrice |
	self assertCartIsNotEmpty: aCart.
	self assertCard: aCreditCard isNotExpiredOn: aDate.
	self assertCardNumberIsValid: aCreditCard.

	totalPrice _ aCart totalPrice.
	
	merchantProcessor charge: totalPrice to: aCreditCard.

	^ totalPrice
! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:33:47' prior: 50924151!
test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice

	| cart cashier quantity expectedSale receipt salesBook |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	salesBook _ OrderedCollection new.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	
	receipt _ cashier 
		checkout: cart 
		charging: testObjectFactory validCard 
		on: testObjectFactory fixedDate
		.
	
	expectedSale _ Sale
		of: cart contents
		totalling: quantity * testObjectFactory firstProductSoldByTheStorePrice.
	
	self 
		assert: (quantity * testObjectFactory firstProductSoldByTheStorePrice)
		equals: receipt.
	
	self assert: salesBook includes: expectedSale.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:33:47' prior: 50920700!
test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice

	| cart cashier expectedSale receipt salesBook |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	salesBook _ OrderedCollection new.
	
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	receipt _ cashier 
		checkout: cart 
		charging: testObjectFactory validCard 
		on: testObjectFactory fixedDate
		.
	
	expectedSale _ Sale
		of: cart contents
		totalling: testObjectFactory firstProductSoldByTheStorePrice.

	self assert: testObjectFactory firstProductSoldByTheStorePrice equals: receipt.
	self assert: (salesBook includes: expectedSale).! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:33:47' prior: 50924285!
test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices

	| cart cashier quantity expectedRecepit expectedSale receipt salesBook |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	salesBook _ OrderedCollection new.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: testObjectFactory secondProductSoldByTheStore.
	
	receipt _ cashier 
		checkout: cart 
		charging: testObjectFactory validCard 
		on: testObjectFactory fixedDate
		.
	
	expectedRecepit _
		(quantity * testObjectFactory firstProductSoldByTheStorePrice) +
		(testObjectFactory secondProductSoldByTheStorePrice).
	
	expectedSale _ Sale
		of: cart contents
		totalling: expectedRecepit.

	self 
		assert: expectedRecepit
		equals: (receipt).
	
	self assert: salesBook includes: expectedSale.! !
!CheckoutTest methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:33:47' prior: 50924456!
assertCheckout: aCart charging: aCard raises: anErrorMessage
	
	| cashier salesBook |
	cashier _ testObjectFactory createCashier.
	salesBook _ OrderedCollection new.
	
	self should: [ cashier 
				checkout: aCart 
				charging: aCard 
				on: testObjectFactory fixedDate 
				]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | 
			self assert: anErrorMessage equals: anException messageText.
			self assert: 	salesBook isEmpty.
		].! !

!methodRemoval: Cashier #checkout:charging:on:registeringOn: stamp: 'MP 11/9/2021 01:33:47'!
checkout: aCart charging: aCreditCard on: aDate registeringOn: aSalesBook

	| totalPrice |
	self assertCartIsNotEmpty: aCart.
	self assertCard: aCreditCard isNotExpiredOn: aDate.
	self assertCardNumberIsValid: aCreditCard.

	totalPrice _ aCart totalPrice.
	
	merchantProcessor charge: totalPrice to: aCreditCard.

	^ totalPrice
!
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:34:07' prior: 50925381!
test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice

	| cart cashier expectedSale receipt salesBook |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	receipt _ cashier 
		checkout: cart 
		charging: testObjectFactory validCard 
		on: testObjectFactory fixedDate.

	self assert: testObjectFactory firstProductSoldByTheStorePrice equals: receipt.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:34:12' prior: 50925466!
test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice

	| cart cashier receipt |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	
	cart add: testObjectFactory firstProductSoldByTheStore.
	
	receipt _ cashier 
		checkout: cart 
		charging: testObjectFactory validCard 
		on: testObjectFactory fixedDate.

	self assert: testObjectFactory firstProductSoldByTheStorePrice equals: receipt.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:34:28' prior: 50925355!
test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice

	| cart cashier quantity receipt |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	
	receipt _ cashier 
		checkout: cart 
		charging: testObjectFactory validCard 
		on: testObjectFactory fixedDate.

	self 
		assert: (quantity * testObjectFactory firstProductSoldByTheStorePrice)
		equals: receipt.! !
!CheckoutTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:34:48' prior: 50925405!
test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices

	| cart cashier quantity expectedRecepit receipt |
	cart _ testObjectFactory createCart.
	cashier _ testObjectFactory createCashier.
	quantity _ 5.
	
	cart add: quantity of: testObjectFactory firstProductSoldByTheStore.
	cart add: testObjectFactory secondProductSoldByTheStore.
	
	receipt _ cashier 
		checkout: cart 
		charging: testObjectFactory validCard 
		on: testObjectFactory fixedDate.
	
	expectedRecepit _
		(quantity * testObjectFactory firstProductSoldByTheStorePrice) +
		(testObjectFactory secondProductSoldByTheStorePrice).

	self 
		assert: expectedRecepit
		equals: receipt.! !
!CheckoutTest methodsFor: 'assertions' stamp: 'MP 11/9/2021 01:34:55' prior: 50925435!
assertCheckout: aCart charging: aCard raises: anErrorMessage
	
	| cashier |
	cashier _ testObjectFactory createCashier.
	
	self should: [ cashier 
				checkout: aCart 
				charging: aCard 
				on: testObjectFactory fixedDate 
				]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anException | 
			self assert: anErrorMessage equals: anException messageText.
		].! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:34:58'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:34:58'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:34:58'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:34:58'!
PASSED!
!Sale class methodsFor: 'instance creation' stamp: 'MP 11/9/2021 01:36:13'!
by: aUser of: aCollectionOfContents totalling: anAmount 

	^self new initializeBy: aUser of: aCollectionOfContents totalling: anAmount ! !

!methodRemoval: Sale class #of:totalling: stamp: 'MP 11/9/2021 01:36:16'!
of: aCollectionOfContents totalling: anAmount 

	^self new initializeOf: aCollectionOfContents totalling: anAmount !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:36:25'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:36:25'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:36:26'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:36:26'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:36:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:36:27'!
ERROR!
!ManualClock methodsFor: 'initialization' stamp: 'MP 11/9/2021 01:37:05' prior: 50916840 overrides: 16896425!
initialize

	time _ GregorianDateTime now .! !
!ManualClock methodsFor: 'initialization' stamp: 'MP 11/9/2021 01:37:06' prior: 50925778 overrides: 16896425!
initialize

	time _ GregorianDateTime now.! !
!ManualClock methodsFor: 'time manipulation' stamp: 'MP 11/9/2021 01:37:20' prior: 50916798!
incrementTimeBy: aNumberOfMinutes

	time _ time + aNumberOfMinutes.! !
!ManualClock methodsFor: 'time manipulation' stamp: 'MP 11/9/2021 01:37:36' prior: 50925788!
incrementTimeBy: aNumberOfMinutes

	time _ time + nil.! !
!ManualClock methodsFor: 'time manipulation' stamp: 'MP 11/9/2021 01:41:35' prior: 50925794!
incrementTimeBy: aNumberOfMinutes

	time _ time + aNumberOfMinutes * minute.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:41:37'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:41:37'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:41:37'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:41:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:41:37'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:41:37'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:41:37'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:41:37'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:41:37'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:41:37'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:41:37'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:41:37'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:41:41'!
ERROR!
!ManualClock methodsFor: 'time manipulation' stamp: 'MP 11/9/2021 01:42:08' prior: 50925799!
incrementTimeBy: aNumberOfMinutes

	time _ time + aNumberOfMinutes * minute.! !
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:42:22' prior: 50919661!
isExpired

	^ clock now distanceTo: lastAccessedAt >= 30 * minute! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:42:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:42:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:42:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:42:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:42:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:42:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:42:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:42:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:42:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:42:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:42:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:42:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:42:27'!
ERROR!
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:42:42' prior: 50925917!
isExpired

	^ clock now distanceTo: lastAccessedAt > 30 * minute! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:42:43'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:42:43'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:42:43'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:42:43'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:42:43'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:42:43'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:42:43'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:42:43'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:42:43'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:42:43'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:42:43'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:42:43'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:42:45'!
ERROR!
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:42:52' prior: 50926029!
isExpired

	^ clock now distanceTo: lastAccessedAt > (30 * minute)! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:42:53'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:42:53'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:42:53'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:42:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:42:53'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:42:53'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:42:53'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:42:53'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:42:53'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:42:53'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:42:53'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:42:53'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:42:55'!
ERROR!

clock now distanceTo: lastAccessedAt!
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:43:34' prior: 50926141!
isExpired

	^ (clock now distanceTo: lastAccessedAt) > (30 * minute)! !

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:43:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:43:37'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:43:38'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:43:39'!
ERROR!
!Card methodsFor: 'testing' stamp: 'MP 11/9/2021 01:44:09' prior: 50915290!
isExpiredOn: aDate

	^ aDate monthOfYear > expirationMonthOfYear.! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:44:10'!
ERROR!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:44:51'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:44:51'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:44:51'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:44:51'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:44:51'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:44:51'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:44:51'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:44:51'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:44:51'!
ERROR!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:44:53'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:44:53'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:44:53'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:44:53'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:44:53'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:44:53'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:44:53'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:44:53'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:44:53'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:44:53'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:44:54'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:44:54'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:44:54'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:44:54'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:44:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:44:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:44:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:44:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:44:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:44:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:44:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:44:54'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:44:54'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:44:54'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:44:54'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:44:54'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:44:54'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:44:54'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:44:54'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:44:54'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:44:55'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:45:49' prior: 50924844!
createCartFor: aUser authenticatedBy: aPassword 
	
	| cartId activeCart |
	
	self assert: aUser canBeAuthenticatedBy: aPassword.
	
	cartId _ self nextCartId.

	activeCart _ ActiveCart
		acceptingProductsFrom: catalog
		keepingTimeWith: clock
		createdBy: aUser
		identifiedBy: cartId.

	activeCarts at: cartId put: activeCart.

	^cartId! !

!classDefinition: #ActiveCart category: 'TusLibros' stamp: 'MP 11/9/2021 01:46:06'!
Object subclass: #ActiveCart
	instanceVariableNames: 'cart lastAccessedAt clock id user'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ActiveCart methodsFor: 'initialization' stamp: 'MP 11/9/2021 01:46:05'!
initializeAcceptingProductsFrom: aCatalog
keepingTimeWith: aClock
createdBy: aUser
identifiedBy: anId

	clock _ aClock.
	id _ anId.
	user _ aUser.

	cart _ Cart acceptingProductsFrom: aCatalog.
	lastAccessedAt _ clock now.! !

!methodRemoval: ActiveCart #initializeAcceptingProductsFrom:keepingTimeWith:identifiedBy: stamp: 'MP 11/9/2021 01:46:08'!
initializeAcceptingProductsFrom: aCatalog
keepingTimeWith: aClock
identifiedBy: anId

	clock _ aClock.
	id _ anId.

	cart _ Cart acceptingProductsFrom: aCatalog.
	lastAccessedAt _ clock now.!
!ActiveCart class methodsFor: 'instance creation' stamp: 'MP 11/9/2021 01:46:49'!
acceptingProductsFrom: aCatalog
keepingTimeWith: aClock
createdBy: aUser
identifiedBy: anId 

	^self new 
		initializeAcceptingProductsFrom: aCatalog
		keepingTimeWith: aClock
		createdBy: aUser
		identifiedBy: anId.! !

!methodRemoval: ActiveCart class #acceptingProductsFrom:keepingTimeWith:identifiedBy: stamp: 'MP 11/9/2021 01:46:52'!
acceptingProductsFrom: aCatalog keepingTimeWith: aClock identifiedBy: anId 

	^self new initializeAcceptingProductsFrom: aCatalog keepingTimeWith: aClock identifiedBy: anId !
!ActiveCart methodsFor: 'initialization' stamp: 'MP 11/9/2021 01:47:04'!
userId

	^ user.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:47:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:47:06'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:47:06'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:47:06'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:47:06'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:47:06'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:47:06'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:47:06'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:47:06'!
ERROR!
!ActiveCart methodsFor: 'initialization' stamp: 'MP 11/9/2021 01:47:16'!
user

	^ user.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:47:16' prior: 50925306!
checkout: aCartId charging: aCard on: aDate 
	
	"(carts includesKey: aCartId) ifFalse: [ self error: self class invalidCartIdErrorDescription ].
	^ self nextTransactionId."
	
	activeCarts at: aCartId
		ifPresent: [ :anActiveCart | | receipt |
			anActiveCart isExpired ifTrue: [ self error: self class expiredCartErrorDescription ].
			
			receipt _ cashier checkout: anActiveCart cart charging: aCard on: clock now.
			
			salesBook add: (Sale
				by: anActiveCart user
				of: anActiveCart cart contents
				totalling: receipt).
			
			^ self nextTransactionId.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !

!methodRemoval: ActiveCart #userId stamp: 'MP 11/9/2021 01:47:16'!
userId

	^ user.!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:47:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:47:18'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:47:18'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:47:18'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:47:18'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:47:18'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:47:18'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:47:18'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:47:18'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:47:20'!
ERROR!

!classDefinition: #Sale category: 'TusLibros' stamp: 'MP 11/9/2021 01:47:41'!
Object subclass: #Sale
	instanceVariableNames: 'collectionOfContents totalPrice contents user'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Sale category: 'TusLibros' stamp: 'MP 11/9/2021 01:47:41'!
Object subclass: #Sale
	instanceVariableNames: 'collectionOfContents totalPrice contents user amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'MP 11/9/2021 01:47:41'!
initializeBy: aUser of: aCollectionOfContents totalling: anAmount 
	self shouldBeImplemented.
	user := aUser.
	collectionOfContents := aCollectionOfContents.
	amount := anAmount.! !
!Sale methodsFor: 'initialization' stamp: 'MP 11/9/2021 01:47:47' prior: 50926805!
initializeBy: aUser of: aCollectionOfContents totalling: anAmount 

	user := aUser.
	collectionOfContents := aCollectionOfContents.
	amount := anAmount.! !
!Sale methodsFor: 'initialization' stamp: 'MP 11/9/2021 01:48:17' prior: 50926814!
initializeBy: aUser of: aCollectionOfContents totalling: anAmount

	contents _ aCollectionOfContents.
	totalPrice _ anAmount.
	user _ aUser.! !

!methodRemoval: Sale #initializeOf:totalling: stamp: 'MP 11/9/2021 01:48:23'!
initializeOf: aCollectionOfContents totalling: anAmount

	contents := aCollectionOfContents.
	totalPrice := anAmount.!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:48:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:48:29'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:48:29'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:48:29'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:48:29'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:48:29'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:48:29'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:48:29'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:48:29'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:48:41'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'initialization' stamp: 'MP 11/9/2021 01:49:00' prior: 50925142!
initializeAuthenticatingWith: anAuthenticationSystem
sourcingProductsFrom: aCatalog
chargingThrough: aMerchantProcessor
withClock: aClock
	
	authenticationSystem _ anAuthenticationSystem.
	catalog _ aCatalog.
	cashier _ Cashier chargingThrough: aMerchantProcessor.
	clock _ aClock.
	
	activeCarts _ Dictionary new.
	cartLastAccessedTimes _ Dictionary new.
	salesBook _ OrderedCollection new.

	lastCartId _ 0.
	lastTransactionId _ 0.
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:49:01'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:49:01'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:49:01'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:49:01'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:49:01'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:49:01'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:49:01'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:49:01'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:49:01'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:49:02'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:49:07'!
ERROR!
!Sale methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:49:11'!
user
	self shouldBeImplemented.
	^user! !
!Sale methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:49:14' prior: 50927065!
user

	^user! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:49:15'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:50:01' prior: 50925000!
test08

	| tusLibros cartId expectedSale userPurchases |
	
	"TODO: Assertar observando mediante listPurchases y no mediante isNotNil."
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword.
	
	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.

	userPurchases _ (tusLibros listPurchasesOf: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword).
	expectedSale _ Sale
		by: testObjectFactory defaultUser
		of: (Bag with: testObjectFactory firstProductSoldByTheStore)
		totalling: testObjectFactory firstProductSoldByTheStorePrice.

	self assert: userPurchases includes: expectedSale.
	! !

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:50:03'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:50:03'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:50:03'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:50:03'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:50:03'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:50:03'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:50:03'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:50:03'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:51:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:51:13'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:51:13'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:51:13'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:51:13'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:51:13'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:51:13'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:51:13'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:51:16'!
ERROR!
!ManualClock methodsFor: 'time manipulation' stamp: 'MP 11/9/2021 01:51:30' prior: 50925911!
incrementTimeBy: aNumberOfMinutes

	time _ time next: aNumberOfMinutes * minute.! !

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:51:31'!
FAILURE!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:51:35'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:51:35'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:51:35'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:51:35'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:51:35'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:51:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:51:38'!
FAILURE!

time next: aNumberOfMinutes * minute!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:52:13' prior: 50920266!
test10CannotListExpiredCart

	| tusLibros cartId clock |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 31.

	self should: [ tusLibros listCart: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:52:16' prior: 50920394!
test11CartsExpireOnlyAfterThirtyMinutes

	| tusLibros clock expiredCartId nonExpiredCartId |

	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	expiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	nonExpiredCartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 16.

	self should: [ tusLibros listCart: expiredCartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

	self assert: (tusLibros listCart: nonExpiredCartId) isEmpty.

! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:52:19' prior: 50920133!
test12ListingRefreshesCart

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	tusLibros listCart: cartId.

	clock incrementTimeBy: 16.

	self shouldnt: [ tusLibros listCart: cartId ] raise: Error.

! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:52:22' prior: 50920096!
test13CannotAddProductsToExpiredCart

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 31.

	self should: [ tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:52:25' prior: 50920058!
test14CannotCheckoutExpiredCart

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 31.

	self should: [ tusLibros checkout: cartId charging: testObjectFactory validCard on: testObjectFactory fixedDate ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:52:28' prior: 50920024!
test15AddingProductsRefreshesCart

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 15.

	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	clock incrementTimeBy: 16.

	self shouldnt: [ tusLibros listCart: cartId ] raise: Error.

! !

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:52:29'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:52:29'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:52:29'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:52:29'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:52:29'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:52:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:52:32'!
FAILURE!

clock now!

lastAccessedAt!

clock now distanceTo: lastAccessedAt!

(clock now distanceTo: lastAccessedAt) minutes!

lastAccessedAt distanceTo: clock now!

(lastAccessedAt distanceTo: clock now) > (30 * minute)!
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 01:54:27' prior: 50926254!
isExpired

	^ (lastAccessedAt distanceTo: clock now) > (30 * minute)! !

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:54:28'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:54:33'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:54:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:54:33'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 01:56:02' prior: 50920321!
test09

	| tusLibros cartId firstTransactionId secondTransactionId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	firstTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
	
	secondTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard
		on: testObjectFactory fixedDate.
		
	self assert: firstTransactionId isNotEqualTo: secondTransactionId.

! !

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:56:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:56:08'!
PASSED!

----SNAPSHOT----(9 November 2021 01:56:11) CuisUniversity-4913.image priorSource: 18979144!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:56:32'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:56:32'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:56:32'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:56:32'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:56:32'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:56:32'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:56:32'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:56:32'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:56:32'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 01:56:34'!
PASSED!

----SNAPSHOT----(9 November 2021 02:00:04) CuisUniversity-4913.image priorSource: 19083834!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:05:46'!
findActiveCart: aCartId

	^ activeCarts at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !

!methodRemoval: TusLibrosSystemFacade #findCart: stamp: 'MP 11/9/2021 02:05:46'!
findCart: aCartId

	^ activeCarts at: aCartId ifAbsent: [ self error: self class invalidCartIdErrorDescription ].!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:06:17' prior: 50928165!
findActiveCart: aCartId

	activeCarts at: aCartId 
		ifPresent: [ 
			
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:06:22' prior: 50928179!
findActiveCart: aCartId

	activeCarts at: aCartId 
		ifPresent: [ :anActiveCart
			
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:06:43' prior: 50928187!
findActiveCart: aCartId

	activeCarts at: aCartId 
		ifPresent: [ :anActiveCart |
			anActiveCart isExpired ifTrue: [ self error: self class expiredCartErrorDescription ].

		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:07:21' prior: 50928196!
findActiveCart: aCartId

	activeCarts at: aCartId 
		ifPresent: [ :anActiveCart |
			anActiveCart isExpired ifTrue: [ self error: self class expiredCartErrorDescription ].
			^anActiveCart.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:07:49' prior: 50925242!
add: aQuantity of: aProduct to: aCartId 
	
	(self findActiveCart: aCartId) add: aQuantity of: aProduct.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:08:10' prior: 50925228!
listCart: aCartId

	^(self findActiveCart: aCartId) cart contents.
! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:08:13' prior: 50928227!
listCart: aCartId

	^(self findActiveCart: aCartId) contents.
! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:09:02' prior: 50926659!
checkout: aCartId charging: aCard on: aDate 
	
	| anActiveCart receipt |
	anActiveCart _ self findActiveCart: aCartId.
	receipt _ cashier checkout: anActiveCart cart charging: aCard on: clock now.
		
	salesBook add: (Sale
		by: anActiveCart user
		of: anActiveCart cart contents
		totalling: receipt).

	^ self nextTransactionId.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 02:09:16'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 02:09:16'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:09:59'!
checkout: aCartId charging: aCard 
	
	| anActiveCart receipt |
	anActiveCart _ self findActiveCart: aCartId.
	receipt _ cashier checkout: anActiveCart cart charging: aCard on: clock now.
		
	salesBook add: (Sale
		by: anActiveCart user
		of: anActiveCart cart contents
		totalling: receipt).

	^ self nextTransactionId.! !

!methodRemoval: TusLibrosSystemFacade #checkout:charging:on: stamp: 'MP 11/9/2021 02:10:01'!
checkout: aCartId charging: aCard on: aDate 
	
	| anActiveCart receipt |
	anActiveCart _ self findActiveCart: aCartId.
	receipt _ cashier checkout: anActiveCart cart charging: aCard on: clock now.
		
	salesBook add: (Sale
		by: anActiveCart user
		of: anActiveCart cart contents
		totalling: receipt).

	^ self nextTransactionId.!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 02:10:08'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 02:10:08'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 02:10:08'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 02:10:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 02:10:08'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 02:10:08'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 02:10:23' prior: 50924770!
test07CannotCheckoutInvalidCartId

	| tusLibros invalidId |
	
	"TODO: list purchases y que no haya pasado nada"
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros
			checkout: invalidId
			charging: testObjectFactory validCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 02:10:25'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 02:10:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 02:10:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 02:10:25'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 02:10:34' prior: 50927077!
test08

	| tusLibros cartId expectedSale userPurchases |
	
	"TODO: Assertar observando mediante listPurchases y no mediante isNotNil."
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword.
	
	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	tusLibros
		checkout: cartId
		charging: testObjectFactory validCard.

	userPurchases _ (tusLibros listPurchasesOf: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword).
	expectedSale _ Sale
		by: testObjectFactory defaultUser
		of: (Bag with: testObjectFactory firstProductSoldByTheStore)
		totalling: testObjectFactory firstProductSoldByTheStorePrice.

	self assert: userPurchases includes: expectedSale.
	! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 02:10:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 02:10:36'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 02:10:36'!
ERROR!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 02:10:45' prior: 50927787!
test09

	| tusLibros cartId firstTransactionId secondTransactionId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	firstTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard.
	
	secondTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard.
		
	self assert: firstTransactionId isNotEqualTo: secondTransactionId.

! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 02:10:53' prior: 50927518!
test14CannotCheckoutExpiredCart

	| tusLibros clock cartId |
	
	clock _ ManualClock new.
	tusLibros _ self tusLibrosSystemFacadeWithClock: clock.
	
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	clock incrementTimeBy: 31.

	self should: [ tusLibros checkout: cartId charging: testObjectFactory validCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade expiredCartErrorDescription.

! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 02:10:53'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 02:10:53'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 02:11:09' prior: 50928602!
test08

	| tusLibros cartId expectedSale userPurchases |
		
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword.
	
	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	tusLibros
		checkout: cartId
		charging: testObjectFactory validCard.

	userPurchases _ (tusLibros listPurchasesOf: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword).
	expectedSale _ Sale
		by: testObjectFactory defaultUser
		of: (Bag with: testObjectFactory firstProductSoldByTheStore)
		totalling: testObjectFactory firstProductSoldByTheStorePrice.

	self assert: userPurchases includes: expectedSale.
	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 02:11:10' prior: 50928877!
test08

	| tusLibros cartId expectedSale userPurchases |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword.
	
	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	tusLibros
		checkout: cartId
		charging: testObjectFactory validCard.

	userPurchases _ (tusLibros listPurchasesOf: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword).
	expectedSale _ Sale
		by: testObjectFactory defaultUser
		of: (Bag with: testObjectFactory firstProductSoldByTheStore)
		totalling: testObjectFactory firstProductSoldByTheStorePrice.

	self assert: userPurchases includes: expectedSale.
	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 02:12:10'!
test08CheckoutOfCartRegistersSales

	| tusLibros cartId expectedSale userPurchases |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword.
	
	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	tusLibros
		checkout: cartId
		charging: testObjectFactory validCard.

	userPurchases _ (tusLibros listPurchasesOf: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword).
	expectedSale _ Sale
		by: testObjectFactory defaultUser
		of: (Bag with: testObjectFactory firstProductSoldByTheStore)
		totalling: testObjectFactory firstProductSoldByTheStorePrice.

	self assert: userPurchases includes: expectedSale.
	! !

!methodRemoval: TusLibrosSystemFacadeTest #test08 stamp: 'MP 11/9/2021 02:12:10'!
test08

	| tusLibros cartId expectedSale userPurchases |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword.
	
	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	tusLibros
		checkout: cartId
		charging: testObjectFactory validCard.

	userPurchases _ (tusLibros listPurchasesOf: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword).
	expectedSale _ Sale
		by: testObjectFactory defaultUser
		of: (Bag with: testObjectFactory firstProductSoldByTheStore)
		totalling: testObjectFactory firstProductSoldByTheStorePrice.

	self assert: userPurchases includes: expectedSale.
	!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 02:12:32'!
test09CheckoutReturnsDifferentIdsEachTime

	| tusLibros cartId firstTransactionId secondTransactionId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	firstTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard.
	
	secondTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard.
		
	self assert: firstTransactionId isNotEqualTo: secondTransactionId.

! !

!methodRemoval: TusLibrosSystemFacadeTest #test09 stamp: 'MP 11/9/2021 02:12:32'!
test09

	| tusLibros cartId firstTransactionId secondTransactionId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros
		createCartFor: testObjectFactory defaultUser
		authenticatedBy: testObjectFactory defaultPassword. 

	tusLibros add: 1 of: testObjectFactory firstProductSoldByTheStore to: cartId.

	firstTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard.
	
	secondTransactionId _ tusLibros
		checkout: cartId
		charging: testObjectFactory validCard.
		
	self assert: firstTransactionId isNotEqualTo: secondTransactionId.

!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:13:53' prior: 50928355!
checkout: aCartId charging: aCard 
	
	| anActiveCart receipt |

	anActiveCart _ self findActiveCart: aCartId.
	receipt _ cashier checkout: anActiveCart cart charging: aCard on: clock now.
		
	salesBook add: (Sale
		by: anActiveCart user
		of: anActiveCart cart contents
		totalling: receipt).

	"Curiosamente, no hay comportamiento en el enunciado que nos haga relacionar el transaction id con nada."
	^ self nextTransactionId.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:14:06' prior: 50929027!
checkout: aCartId charging: aCard 
	
	| anActiveCart receipt |

	anActiveCart _ self findActiveCart: aCartId.
	receipt _ cashier checkout: anActiveCart cart charging: aCard on: clock now.
		
	salesBook add: (Sale
		by: anActiveCart user
		of: anActiveCart cart contents
		totalling: receipt).

	"Curiosamente, no hay comportamiento en el enunciado que nos haga relacionar el transaction id con nada.
	Queda medio raro pero bueno."
	^ self nextTransactionId.! !
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:14:39'!
refreshLastAccessedAt

	lastAccessedAt _ clock now.! !
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:14:39' prior: 50919691!
contents

	self refreshLastAccessedAt.
	^ cart contents! !
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:14:39' prior: 50919685!
add: aQuantity of: aProduct

	cart add: aQuantity of: aProduct.
	self refreshLastAccessedAt.! !
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:14:39' prior: 50925257!
cart

	self refreshLastAccessedAt.
	^ cart.! !

!methodRemoval: ActiveCart #refreshX stamp: 'MP 11/9/2021 02:14:39'!
refreshX

	lastAccessedAt _ clock now.!
!ActiveCart methodsFor: 'cart protocol' stamp: 'MP 11/9/2021 02:15:12'!
totalPrice

	^ cart totalPrice.! !

!methodRemoval: ActiveCart #cart stamp: 'MP 11/9/2021 02:15:14'!
cart

	self refreshLastAccessedAt.
	^ cart.!
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:15:25' prior: 50929044!
checkout: aCartId charging: aCard 
	
	| anActiveCart receipt |

	anActiveCart _ self findActiveCart: aCartId.
	receipt _ cashier checkout: anActiveCart cart charging: aCard on: clock now.
		
	salesBook add: (Sale
		by: anActiveCart user
		of: anActiveCart contents
		totalling: receipt).

	"Curiosamente, no hay comportamiento en el enunciado que nos haga relacionar el transaction id con nada.
	Queda medio raro pero bueno."
	^ self nextTransactionId.! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:15:27' prior: 50929093!
checkout: aCartId charging: aCard 
	
	| anActiveCart receipt |

	anActiveCart _ self findActiveCart: aCartId.
	receipt _ cashier checkout: anActiveCart charging: aCard on: clock now.
		
	salesBook add: (Sale
		by: anActiveCart user
		of: anActiveCart contents
		totalling: receipt).

	"Curiosamente, no hay comportamiento en el enunciado que nos haga relacionar el transaction id con nada.
	Queda medio raro pero bueno."
	^ self nextTransactionId.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CheckoutOfCartRegistersSales stamp: 'MP 11/9/2021 02:15:28'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test09CheckoutReturnsDifferentIdsEachTime stamp: 'MP 11/9/2021 02:15:28'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 02:15:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CheckoutOfCartRegistersSales stamp: 'MP 11/9/2021 02:15:30'!
ERROR!
!ActiveCart methodsFor: 'cart protocol' stamp: 'MP 11/9/2021 02:15:54'!
isEmpty

	^ cart isEmpty.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CheckoutOfCartRegistersSales stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CheckoutReturnsDifferentIdsEachTime stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 02:15:55'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 02:15:55'!
PASSED!
!ActiveCart methodsFor: 'testing' stamp: 'MP 11/9/2021 02:17:19'!
cartLifetime

	^ 30 * minute! !
!ActiveCart methodsFor: 'testing' stamp: 'MP 11/9/2021 02:17:19' prior: 50927673!
isExpired

	^ (lastAccessedAt distanceTo: clock now) > (self cartLifetime)! !
!ActiveCart methodsFor: 'testing' stamp: 'MP 11/9/2021 02:17:28' prior: 50929348!
isExpired

	^ (lastAccessedAt distanceTo: clock now) > self cartLifetime! !
!ActiveCart methodsFor: 'testing' stamp: 'MP 11/9/2021 02:17:45'!
cartMaximumLifetime

	^ 30 * minute! !
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:17:45' prior: 50929353!
isExpired

	^ (lastAccessedAt distanceTo: clock now) > self cartMaximumLifetime! !

!methodRemoval: ActiveCart #cartLifetime stamp: 'MP 11/9/2021 02:17:45'!
cartLifetime

	^ 30 * minute!

!classDefinition: #ActiveCart category: 'TusLibros' stamp: 'MP 11/9/2021 02:17:49'!
Object subclass: #ActiveCart
	instanceVariableNames: 'cart cartLifetime clock id user'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:17:49' prior: 50926510!
initializeAcceptingProductsFrom: aCatalog
keepingTimeWith: aClock
createdBy: aUser
identifiedBy: anId

	clock _ aClock.
	id _ anId.
	user _ aUser.

	cart _ Cart acceptingProductsFrom: aCatalog.
	cartLifetime _ clock now.! !
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:17:49' prior: 50929363!
isExpired

	^ (cartLifetime distanceTo: clock now) > self cartMaximumLifetime! !
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:17:49' prior: 50929061!
refreshLastAccessedAt

	cartLifetime _ clock now.! !

!classDefinition: #ActiveCart category: 'TusLibros' stamp: 'MP 11/9/2021 02:18:05'!
Object subclass: #ActiveCart
	instanceVariableNames: 'cart lastAccessedAt clock id user'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:18:05' prior: 50929380!
initializeAcceptingProductsFrom: aCatalog
keepingTimeWith: aClock
createdBy: aUser
identifiedBy: anId

	clock _ aClock.
	id _ anId.
	user _ aUser.

	cart _ Cart acceptingProductsFrom: aCatalog.
	lastAccessedAt _ clock now.! !
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:18:05' prior: 50929390!
isExpired

	^ (lastAccessedAt distanceTo: clock now) > self cartMaximumLifetime! !
!ActiveCart methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:18:05' prior: 50929396!
refreshLastAccessedAt

	lastAccessedAt _ clock now.! !
!ActiveCart methodsFor: 'testing' stamp: 'MP 11/9/2021 02:18:12'!
cartLifetime

	^ lastAccessedAt distanceTo: clock now! !
!ActiveCart methodsFor: 'testing' stamp: 'MP 11/9/2021 02:18:12' prior: 50929419!
isExpired

	^ (self cartLifetime) > self cartMaximumLifetime! !
!ActiveCart methodsFor: 'testing' stamp: 'MP 11/9/2021 02:18:15' prior: 50929434!
isExpired

	^ self cartLifetime > self cartMaximumLifetime! !

----SNAPSHOT----(9 November 2021 02:18:37) CuisUniversity-4913.image priorSource: 19088340!

----SNAPSHOT----(9 November 2021 02:20:57) CuisUniversity-4913.image priorSource: 19129373!

Object subclass: #AuthenticationSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #AuthenticationSystem category: 'TusLibros' stamp: 'MP 11/9/2021 02:21:13'!
Object subclass: #AuthenticationSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

AuthenticationSystem subclass: #SimulatedAuthenticationSystem
	instanceVariableNames: 'result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #SimulatedAuthenticationSystem category: 'TusLibros' stamp: 'MP 11/9/2021 02:21:32'!
AuthenticationSystem subclass: #SimulatedAuthenticationSystem
	instanceVariableNames: 'result'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!AuthenticationSystem methodsFor: 'nil' stamp: 'MP 11/9/2021 02:21:46'!
can: aUser beAuthenticatedBy: aPassword 
	
	self subclassResponsibility .! !
!AuthenticationSystem methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:21:47' prior: 50929475!
can: aUser beAuthenticatedBy: aPassword 
	
	self subclassResponsibility.! !

----SNAPSHOT----(9 November 2021 02:22:18) CuisUniversity-4913.image priorSource: 19129466!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CheckoutOfCartRegistersSales stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CheckoutReturnsDifferentIdsEachTime stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 02:22:20'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 02:22:20'!
PASSED!
!TestObjectFactory methodsFor: 'authentication' stamp: 'MP 11/9/2021 02:23:00'!
authSystemAllowingAll
	
	^ SimulatedAuthenticationSystem newSuccesful.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:23:00' prior: 50916497!
tusLibrosSystemFacadeWithClock: aClock
	
	^TusLibrosSystemFacade
		authenticatingWith: testObjectFactory authSystemAllowingAll
		sourcingProductsFrom: testObjectFactory defaultCatalog
		chargingThrough: testObjectFactory defaultSimulatedMP
		withClock: aClock.! !

!methodRemoval: TestObjectFactory #authSystemAllowingAllxxx stamp: 'MP 11/9/2021 02:23:00'!
authSystemAllowingAllxxx
	
	^ SimulatedAuthenticationSystem newSuccesful.!
!TestObjectFactory methodsFor: 'authentication' stamp: 'MP 11/9/2021 02:23:05'!
authSystemDenyingAll
	
	^ SimulatedAuthenticationSystem newUnsuccesful.! !
!TusLibrosSystemFacadeTest methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:23:05' prior: 50919147!
test01CannotCreateCartWithInvalidCredentials

	| tusLibros |
	
	tusLibros _ TusLibrosSystemFacade
		authenticatingWith: testObjectFactory authSystemDenyingAll
		sourcingProductsFrom: testObjectFactory defaultCatalog
		chargingThrough: testObjectFactory defaultSimulatedMP
		withClock: ManualClock new.
	
	self should: [ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword ] 
		raise: Error - MessageNotUnderstood 
		withMessageText: TusLibrosSystemFacade invalidCredentialsErrorDescription.! !

!methodRemoval: TestObjectFactory #authSystemDenyingAllxxx stamp: 'MP 11/9/2021 02:23:05'!
authSystemDenyingAllxxx
	
	^ SimulatedAuthenticationSystem newUnsuccesful.!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CheckoutOfCartRegistersSales stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CheckoutReturnsDifferentIdsEachTime stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 02:23:07'!
PASSED!

----SNAPSHOT----(9 November 2021 02:23:09) CuisUniversity-4913.image priorSource: 19130731!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 02:24:46' prior: 50920342!
test03CanAddMultipleItemsToACartXXXXXx

	| tusLibros expectedCartContents quantity firstCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	"TODO: cambiar esto por algo que no se fije la estructura"
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self 
		assert: quantity
		equals: ( (tusLibros listCart: firstCartId) ocurrencesOf: testObjectFactory firstProductSoldByTheStore).! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 02:24:54' prior: 50929755!
test03CanAddMultipleItemsToACartXXXXXx

	| tusLibros quantity firstCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	self 
		assert: quantity
		equals: ( (tusLibros listCart: firstCartId) ocurrencesOf: testObjectFactory firstProductSoldByTheStore).! !
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 02:25:01' prior: 50929780!
test03CanAddMultipleItemsToACartXXXXXx

	| tusLibros quantity firstCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	self 
		assert: quantity
		equals: ( (tusLibros listCart: firstCartId) occurrencesOf: testObjectFactory firstProductSoldByTheStore).! !

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CheckoutOfCartRegistersSales stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CheckoutReturnsDifferentIdsEachTime stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 02:25:02'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 02:25:02'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 02:25:27'!
test03AddingMultipleOcurrencesOfAProductListsEachOne

	| tusLibros quantity firstCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	self 
		assert: quantity
		equals: ( (tusLibros listCart: firstCartId) occurrencesOf: testObjectFactory firstProductSoldByTheStore).! !

!methodRemoval: TusLibrosSystemFacadeTest #test03CanAddMultipleItemsToACartXXXXXx stamp: 'MP 11/9/2021 02:25:27'!
test03CanAddMultipleItemsToACartXXXXXx

	| tusLibros quantity firstCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	self 
		assert: quantity
		equals: ( (tusLibros listCart: firstCartId) occurrencesOf: testObjectFactory firstProductSoldByTheStore).!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 02:25:52'!
test04AddingToACartDoesntAffectTheOthers

	| tusLibros expectedCartContents quantity firstCartId secondCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	secondCartId _ tusLibros createCartFor: 'nacho' authenticatedBy: 'elRetorico'.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	"TODO: cambiar esto por algo que no se fije la estructura"
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).
	self assert: (tusLibros listCart: secondCartId) isEmpty.! !

!methodRemoval: TusLibrosSystemFacadeTest #test04CanListMultipleCartsXXXXx stamp: 'MP 11/9/2021 02:25:52'!
test04CanListMultipleCartsXXXXx

	| tusLibros expectedCartContents quantity firstCartId secondCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	secondCartId _ tusLibros createCartFor: 'nacho' authenticatedBy: 'elRetorico'.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	"TODO: cambiar esto por algo que no se fije la estructura"
	expectedCartContents _ Bag new
		add: testObjectFactory firstProductSoldByTheStore
		withOccurrences: quantity;
		yourself.
	
	self assert: expectedCartContents equals: (tusLibros listCart: firstCartId).
	self assert: (tusLibros listCart: secondCartId) isEmpty.!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 02:26:10' prior: 50929964!
test04AddingToACartDoesntAffectTheOthers

	| tusLibros quantity firstCartId secondCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	secondCartId _ tusLibros createCartFor: 'nacho' authenticatedBy: 'elRetorico'.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	self 
		assert: quantity
		equals: ( (tusLibros listCart: firstCartId) occurrencesOf: testObjectFactory firstProductSoldByTheStore).
	self assert: (tusLibros listCart: secondCartId) isEmpty.! !

!testRun: #TusLibrosSystemFacadeTest #test04AddingToACartDoesntAffectTheOthers stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03AddingMultipleOcurrencesOfAProductListsEachOne stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04AddingToACartDoesntAffectTheOthers stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CheckoutOfCartRegistersSales stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CheckoutReturnsDifferentIdsEachTime stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 02:26:13'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 02:26:13'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 02:26:20' prior: 50929926!
test03AddingMultipleOcurrencesOfAProductListsEachOne

	| tusLibros quantity cartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	cartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: cartId.
	
	self 
		assert: quantity
		equals: ( (tusLibros listCart: cartId) occurrencesOf: testObjectFactory firstProductSoldByTheStore).! !

!testRun: #TusLibrosSystemFacadeTest #test03AddingMultipleOcurrencesOfAProductListsEachOne stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03AddingMultipleOcurrencesOfAProductListsEachOne stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04AddingToACartDoesntAffectTheOthers stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CheckoutOfCartRegistersSales stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CheckoutReturnsDifferentIdsEachTime stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 02:26:21'!
PASSED!

----SNAPSHOT----(9 November 2021 02:26:23) CuisUniversity-4913.image priorSource: 19139227!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 02:26:31' prior: 50930020!
test04AddingToACartDoesntAffectTheOthers

	| tusLibros quantity firstCartId secondCartId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	firstCartId _ tusLibros createCartFor: testObjectFactory defaultUser authenticatedBy: testObjectFactory defaultPassword.
	secondCartId _ tusLibros createCartFor: 'nacho' authenticatedBy: 'elRetorico'.
	quantity _ 1.
	
	tusLibros add: quantity of: testObjectFactory firstProductSoldByTheStore to: firstCartId.
	
	self 
		assert: quantity
		equals: ( (tusLibros listCart: firstCartId) occurrencesOf: testObjectFactory firstProductSoldByTheStore).

	self assert: (tusLibros listCart: secondCartId) isEmpty.! !
!TusLibrosSystemFacade methodsFor: 'rest interface - private' stamp: 'MP 11/9/2021 02:29:50' prior: 50928208!
findActiveCart: aCartId

	activeCarts at: aCartId 
		ifPresent: [ :anActiveCart |
			self assertCartIsNotExpired: anActiveCart.
			^anActiveCart.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'assertions' stamp: 'MP 11/9/2021 02:30:01'!
assertCartIsNotExpired: anActiveCart

	anActiveCart isExpired ifTrue: [ self error: self class expiredCartErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'rest interface' stamp: 'MP 11/9/2021 02:30:17' prior: 50928233!
listCart: aCartId

	^ (self findActiveCart: aCartId) contents.
! !
!TusLibrosSystemFacade methodsFor: 'rest interface' stamp: 'MP 11/9/2021 02:30:32'!
selectPurchasesOfUser: aUser

	^ salesBook select: [ :aUserSale | aUserSale user = aUser ]! !
!TusLibrosSystemFacade methodsFor: 'rest interface' stamp: 'MP 11/9/2021 02:30:32' prior: 50925053!
listPurchasesOf: aUser authenticatedBy: aPassword

	self assert: aUser canBeAuthenticatedBy: aPassword.
	
	^ self selectPurchasesOfUser: aUser! !
!TusLibrosSystemFacade methodsFor: 'rest interface - private' stamp: 'MP 11/9/2021 02:31:01'!
selectPurchasesOf: aUser

	^ salesBook select: [ :aUserSale | aUserSale user = aUser ]! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'MP 11/9/2021 02:31:01' prior: 50930338!
listPurchasesOf: aUser authenticatedBy: aPassword

	self assert: aUser canBeAuthenticatedBy: aPassword.
	
	^ self selectPurchasesOf: aUser! !

!methodRemoval: TusLibrosSystemFacade #selectPurchasesOfUser: stamp: 'MP 11/9/2021 02:31:01'!
selectPurchasesOfUser: aUser

	^ salesBook select: [ :aUserSale | aUserSale user = aUser ]!
!TusLibrosSystemFacade methodsFor: 'rest interface - private' stamp: 'MP 11/9/2021 02:31:08' prior: 50930308!
findActiveCart: aCartId

	activeCarts at: aCartId 
		ifPresent: [ :anActiveCart |
			self assertCartIsNotExpired: anActiveCart.
			^ anActiveCart.
		]
		ifAbsent: [ self error: self class invalidCartIdErrorDescription ].! !
!TusLibrosSystemFacade methodsFor: 'rest interface' stamp: 'MP 11/9/2021 02:31:26' prior: 50929111!
checkout: aCartId charging: aCard 
	
	| anActiveCart receipt |

	anActiveCart _ self findActiveCart: aCartId.
	receipt _ cashier checkout: anActiveCart charging: aCard on: clock now.

	salesBook add: (Sale
		by: anActiveCart user
		of: anActiveCart contents
		totalling: receipt).

	"Curiosamente, no hay comportamiento en el enunciado que nos haga relacionar el transaction id con nada.
	Queda medio raro pero bueno."
	^ self nextTransactionId.! !
!TusLibrosSystemFacade methodsFor: 'rest interface' stamp: 'MP 11/9/2021 02:34:29' prior: 50926489!
createCartFor: aUser authenticatedBy: aPassword 
	
	self assert: aUser canBeAuthenticatedBy: aPassword.

	^self createCartFor: aUser.! !
!TusLibrosSystemFacade methodsFor: 'rest interface - private' stamp: 'MP 11/9/2021 02:34:37'!
createCartFor: aUser

	| activeCart cartId |
	cartId _ self nextCartId.

	activeCart _ ActiveCart
		acceptingProductsFrom: catalog
		keepingTimeWith: clock
		createdBy: aUser
		identifiedBy: cartId.

	activeCarts at: cartId put: activeCart.! !
!TusLibrosSystemFacade methodsFor: 'rest interface - private' stamp: 'MP 11/9/2021 02:34:44' prior: 50930404!
createCartFor: aUser

	| activeCart cartId |
	cartId _ self nextCartId.

	activeCart _ ActiveCart
		acceptingProductsFrom: catalog
		keepingTimeWith: clock
		createdBy: aUser
		identifiedBy: cartId.

	activeCarts at: cartId put: activeCart.
	
	^cartId.! !
!TusLibrosSystemFacade methodsFor: 'rest interface - private' stamp: 'MP 11/9/2021 02:34:46' prior: 50930416!
createCartFor: aUser

	| activeCart cartId |
	cartId _ self nextCartId.

	activeCart _ ActiveCart
		acceptingProductsFrom: catalog
		keepingTimeWith: clock
		createdBy: aUser
		identifiedBy: cartId.

	activeCarts at: cartId put: activeCart.
	
	^ cartId.! !
!TusLibrosSystemFacade methodsFor: 'rest interface' stamp: 'MP 11/9/2021 02:34:52' prior: 50930396!
createCartFor: aUser authenticatedBy: aPassword 
	
	self assert: aUser canBeAuthenticatedBy: aPassword.

	^ self createCartFor: aUser.! !
!TusLibrosSystemFacade methodsFor: 'rest interface - private' stamp: 'MP 11/9/2021 02:35:16' prior: 50930428!
createCartFor: aUser

	| activeCart cartId |
	cartId _ self nextCartId.

	activeCart _ ActiveCart
		acceptingProductsFrom: catalog
		keepingTimeWith: clock
		createdBy: aUser
		identifiedBy: cartId.

	activeCarts at: cartId put: activeCart.
	
	^ cartId.! !
!ActiveCart methodsFor: 'accessing' stamp: 'MP 11/9/2021 02:35:48'!
id

	^ id.! !
!TusLibrosSystemFacade methodsFor: 'rest interface - private' stamp: 'MP 11/9/2021 02:36:16' prior: 50930448!
createCartFor: aUser

	| activeCart cartId |
	cartId _ self nextCartId.

	activeCart _ ActiveCart
		acceptingProductsFrom: catalog
		keepingTimeWith: clock
		createdBy: aUser
		identifiedBy: cartId.

	activeCarts at: activeCart id put: activeCart.
	
	^ cartId.! !
!TusLibrosSystemFacade methodsFor: 'rest interface - private' stamp: 'MP 11/9/2021 02:36:36' prior: 50930463!
createCartFor: aUser

	| activeCart cartId |
	cartId _ self nextCartId.

	activeCart _ ActiveCart
		acceptingProductsFrom: catalog
		keepingTimeWith: clock
		createdBy: aUser
		identifiedBy: cartId.

	activeCarts at: activeCart id put: activeCart.
	
	^ activeCart id.! !
!TusLibrosSystemFacade methodsFor: 'rest interface - private' stamp: 'MP 11/9/2021 02:36:51' prior: 50930475!
createCartFor: aUser

	| activeCart |
	activeCart _ ActiveCart
		acceptingProductsFrom: catalog
		keepingTimeWith: clock
		createdBy: aUser
		identifiedBy: self nextCartId.

	activeCarts at: activeCart id put: activeCart.
	
	^ activeCart id.! !

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03AddingMultipleOcurrencesOfAProductListsEachOne stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04AddingToACartDoesntAffectTheOthers stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CheckoutOfCartRegistersSales stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CheckoutReturnsDifferentIdsEachTime stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 02:37:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 02:37:15'!
PASSED!
!TusLibrosSystemFacadeTest methodsFor: 'tests' stamp: 'MP 11/9/2021 02:39:43' prior: 50928484!
test07CannotCheckoutInvalidCartId

	| tusLibros invalidId |
	
	tusLibros _ self defaultTusLibrosSystemFacade.
	invalidId _ 0.
	self should: [ tusLibros
			checkout: invalidId
			charging: testObjectFactory validCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: TusLibrosSystemFacade invalidCartIdErrorDescription.
	
! !

----SNAPSHOT----(9 November 2021 02:40:42) CuisUniversity-4913.image priorSource: 19156147!

!testRun: #CartTest #test01NewCartIsEmpty stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #CartTest #test02CartWithABookShouldNotBeEmpty stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #CartTest #test03CartIncludesBookAfterAdding stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #CartTest #test04CantAddBookNotIncludedInCatalog stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #CartTest #test05CartIncludesAllOccurrencesOfBookAfterAdding stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #CartTest #test06CantAddBookWithZeroQuantity stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #CartTest #test07CantAddBookWithNegativeQuantity stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #CheckoutTest #test01CannotCheckoutWithEmptyCart stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #CheckoutTest #test02CheckoutOfCartWithSingleItemReturnsReceiptOfItsPrice stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #CheckoutTest #test03CheckoutOfCartWithItemWithMultipleOcurrencesReturnsRecepitOfItsTotalPrice stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #CheckoutTest #test04CheckoutOfCartWithMultipleItemsReturnsReceiptWithASumOfTheirPrices stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #CheckoutTest #test05CannotCheckoutWithExpiredCard stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #CheckoutTest #test06CannotCheckoutWithInvalidNumberCard stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #CheckoutTest #test07CannotCheckoutWithCardWithoutFunds stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #CheckoutTest #test08CannotCheckoutWithStolenCard stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CannotCreateCartWithInvalidCredentials stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CartCreatedWithValidCredentialsIsEmpty stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03AddingMultipleOcurrencesOfAProductListsEachOne stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04AddingToACartDoesntAffectTheOthers stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CannotAddProductToCartWithInvalidId stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CannotListCartWithInvalidId stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test07CannotCheckoutInvalidCartId stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CheckoutOfCartRegistersSales stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09CheckoutReturnsDifferentIdsEachTime stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CannotListExpiredCart stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CartsExpireOnlyAfterThirtyMinutes stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12ListingRefreshesCart stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CannotAddProductsToExpiredCart stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14CannotCheckoutExpiredCart stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15AddingProductsRefreshesCart stamp: 'MP 11/9/2021 02:42:04'!
PASSED!

----SNAPSHOT----(9 November 2021 02:42:08) CuisUniversity-4913.image priorSource: 19166893!