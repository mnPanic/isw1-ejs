

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (7 October 2021 20:08:29) as /home/mnpanic/Documents/dc/ing1/cuis/cuis-portfolio-1/CuisUniversity-4532.image!


----End fileIn of /home/mnpanic/repos/uba/ing1-repos/2021-2c/17-Portfolio 1/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MP 10/7/2021 20:27:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MP 10/7/2021 20:27:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MP 10/7/2021 20:27:25'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MP 10/7/2021 20:27:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MP 10/7/2021 20:27:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MP 10/7/2021 20:27:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MP 10/7/2021 20:27:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MP 10/7/2021 20:27:25'!
FAILURE!

account balance!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MP 10/7/2021 20:32:13' prior: 50859548!
balance

	^transactions sum: [ :aTransaction | aTransaction yyy ] ifEmpty: [ 0 ]! !
!AccountTransaction methodsFor: 'nil' stamp: 'MP 10/7/2021 20:32:29'!
yyy

	self subclassResponsibility.! !
!Deposit methodsFor: 'nil' stamp: 'MP 10/7/2021 20:32:37' overrides: 50859598!
yyy

	^value.! !
!Withdraw methodsFor: 'nil' stamp: 'MP 10/7/2021 20:33:03' overrides: 50859598!
yyy

	^value negative.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MP 10/7/2021 20:33:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MP 10/7/2021 20:33:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MP 10/7/2021 20:33:06'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MP 10/7/2021 20:33:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MP 10/7/2021 20:33:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MP 10/7/2021 20:33:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MP 10/7/2021 20:33:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MP 10/7/2021 20:33:06'!
ERROR!

10 negative!

10 negated !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 20:33:46' prior: 50859606 overrides: 50859598!
yyy

	^value negated.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MP 10/7/2021 20:33:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MP 10/7/2021 20:33:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MP 10/7/2021 20:33:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MP 10/7/2021 20:33:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MP 10/7/2021 20:33:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MP 10/7/2021 20:33:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MP 10/7/2021 20:33:47'!
PASSED!
!Deposit methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 20:34:05'!
balanceValue

	^value.! !
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 20:34:05'!
balanceValue

	self subclassResponsibility.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 20:34:05' overrides: 50859676!
balanceValue

	^value negated.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 20:34:05' prior: 50859593!
balance

	^transactions sum: [ :aTransaction | aTransaction balanceValue ] ifEmpty: [ 0 ]! !

!methodRemoval: Deposit #yyy stamp: 'MP 10/7/2021 20:34:05'!
yyy

	^value.!

!methodRemoval: AccountTransaction #yyy stamp: 'MP 10/7/2021 20:34:05'!
yyy

	self subclassResponsibility.!

!methodRemoval: Withdraw #yyy stamp: 'MP 10/7/2021 20:34:05'!
yyy

	^value negated.!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MP 10/7/2021 20:34:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MP 10/7/2021 20:34:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MP 10/7/2021 20:34:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MP 10/7/2021 20:34:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MP 10/7/2021 20:34:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MP 10/7/2021 20:34:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MP 10/7/2021 20:34:12'!
PASSED!

----SNAPSHOT----(7 October 2021 20:37:46) CuisUniversity-4532.image priorSource: 16885703!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MP 10/7/2021 20:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MP 10/7/2021 20:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MP 10/7/2021 20:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MP 10/7/2021 20:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MP 10/7/2021 20:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MP 10/7/2021 20:37:47'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MP 10/7/2021 20:37:47'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'MP 10/7/2021 20:40:48' prior: 50859686!
balance

	^transactions sum: [ :aTransaction | aTransaction balanceValue ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'MP 10/7/2021 20:47:22' prior: 50859756!
balance

	| balance |
	balance _ 0.
	transactions do: [ :aTransaction | balance _ aTransaction applyToBalance: balance ].
	^balance.! !

!methodRemoval: AccountTransaction #balanceValue stamp: 'MP 10/7/2021 20:47:31'!
balanceValue

	self subclassResponsibility.!
!AccountTransaction methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 20:48:16'!
applyToBalance: aBalance

	self subclassResponsibility ! !

!methodRemoval: Deposit #balanceValue stamp: 'MP 10/7/2021 20:48:20'!
balanceValue

	^value.!

!methodRemoval: Withdraw #balanceValue stamp: 'MP 10/7/2021 20:48:22'!
balanceValue

	^value negated.!
!Withdraw methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 20:48:38' overrides: 50859773!
applyToBalance: aBalance

	^aBalance - value.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 20:49:19' overrides: 50859773!
applyToBalance: aBalance

	^ aBalance + value.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MP 10/7/2021 20:49:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MP 10/7/2021 20:49:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MP 10/7/2021 20:49:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MP 10/7/2021 20:49:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MP 10/7/2021 20:49:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MP 10/7/2021 20:49:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MP 10/7/2021 20:49:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MP 10/7/2021 20:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MP 10/7/2021 20:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MP 10/7/2021 20:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MP 10/7/2021 20:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MP 10/7/2021 20:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MP 10/7/2021 20:49:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MP 10/7/2021 20:49:49'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'MP 10/7/2021 20:55:57' prior: 50859409!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.
	
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'MP 10/7/2021 20:55:58' prior: 50859847!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := ReceptiveAccount new.
	
	deposit1 := Deposit register: 50 on: account1.

	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'MP 10/7/2021 20:56:48'!
test08

	! !

!methodRemoval: ReceptiveAccountTest #test08 stamp: 'MP 10/7/2021 20:57:10'!
test08

	!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'MP 10/7/2021 20:57:19'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'nil' stamp: 'MP 10/7/2021 20:57:23'!
test01

	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MP 10/7/2021 20:59:21'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 20:59:17' prior: 50859887!
test01

	| portfolio |
	portfolio _ Portfolio new.
	
	self assert: 0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01 stamp: 'MP 10/7/2021 20:59:22'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 20:59:27'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 20:59:33' prior: 50859906!
balance
	
	^0.! !

!testRun: #PortfolioTest #test01 stamp: 'MP 10/7/2021 20:59:34'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'MP 10/7/2021 20:59:34'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:02:02'!
test02

	| portfolio account transaction |
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account. 
	
	self deny: (portfolio hasRegistered: transaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:02:05' prior: 50859919!
test02

	| portfolio account transaction |
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account. 
	
	self deny: (portfolio hasRegistered: transaction).! !

!testRun: #PortfolioTest #test02 stamp: 'MP 10/7/2021 21:02:05'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:02:10'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:02:15' prior: 50859941!
hasRegistered: aDeposit 
	
	^false! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:02:20' prior: 50859946!
hasRegistered: aTransaction
	
	^false! !

!testRun: #PortfolioTest #test02 stamp: 'MP 10/7/2021 21:02:21'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'MP 10/7/2021 21:02:21'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'MP 10/7/2021 21:02:21'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:03:08'!
test03

	| portfolio |
	portfolio _ Portfolio new.

	self assert: portfolio transactions isEmpty.! !

!testRun: #PortfolioTest #test03 stamp: 'MP 10/7/2021 21:03:15'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:03:20'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:04:30' prior: 50859970!
transactions
	
	^OrderedCollection new.! !

!testRun: #PortfolioTest #test03 stamp: 'MP 10/7/2021 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'MP 10/7/2021 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'MP 10/7/2021 21:04:32'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'MP 10/7/2021 21:04:32'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:10:33'!
test04

	| portfolio |
	portfolio _ Portfolio new.

	self assert: portfolio transactions isEmpty.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:11:28' prior: 50859989!
test04

	| portfolio |
	portfolio _ Portfolio new.

	self assert: portfolio transactions isEmpty.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:11:58' prior: 50859996!
test04

	| portfolio account transaction |
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account. 

	self assert: portfolio transactions isEmpty.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:12:16' prior: 50860003!
test04

	| portfolio account transaction |
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account. 

	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:12:25' prior: 50860013!
test04

	| portfolio account |
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account. 

	self assert: 100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test04 stamp: 'MP 10/7/2021 21:12:48'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:13:15' prior: 50860023!
test04

	| portfolio account |
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.

	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:13:17' prior: 50860034!
test04

	| portfolio account |
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	

	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:13:27' prior: 50860043!
test04

	| portfolio account |
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addAcount: account.

	self assert: 100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test04 stamp: 'MP 10/7/2021 21:13:29'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:13:40' prior: 50860052!
test04

	| portfolio account |
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addAccount: account.

	self assert: 100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test04 stamp: 'MP 10/7/2021 21:13:41'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:13:45'!
addAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:13:48' prior: 50860076!
addAccount: aReceptiveAccount 
	! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MP 10/7/2021 21:15:03'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:15:00' prior: 50860081!
addAccount: anAccount 
	
	accounts add: anAccount! !

!testRun: #PortfolioTest #test04 stamp: 'MP 10/7/2021 21:15:08'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'MP 10/7/2021 21:15:24' overrides: 16896425!
initialize

	accounts _ OrderedCollection new.! !

!testRun: #PortfolioTest #test01 stamp: 'MP 10/7/2021 21:15:25'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'MP 10/7/2021 21:15:25'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'MP 10/7/2021 21:15:25'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'MP 10/7/2021 21:15:25'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'MP 10/7/2021 21:15:25'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:16:02' prior: 50859911!
balance
	
	^accounts first balance.! !

!testRun: #PortfolioTest #test01 stamp: 'MP 10/7/2021 21:16:06'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'MP 10/7/2021 21:16:06'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'MP 10/7/2021 21:16:06'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'MP 10/7/2021 21:16:06'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'MP 10/7/2021 21:16:06'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'MP 10/7/2021 21:16:26'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'MP 10/7/2021 21:16:26'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'MP 10/7/2021 21:16:26'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'MP 10/7/2021 21:16:26'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'MP 10/7/2021 21:16:26'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:16:44' prior: 50860117!
balance
	
	accounts isEmpty ifTrue: [^0]
	^accounts first balance.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:16:47' prior: 50860145!
balance
	
	accounts isEmpty ifTrue: [^0].
	^accounts first balance.! !

!testRun: #PortfolioTest #test01 stamp: 'MP 10/7/2021 21:16:47'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'MP 10/7/2021 21:16:47'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'MP 10/7/2021 21:16:47'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'MP 10/7/2021 21:16:47'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:18:01'!
test05

	| portfolio account expectedTransactions transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addAccount: account.

	expectedTransactions _ OrderedCollection with: transaction.
	self assert: expectedTransactions equals: portfolio transactions.! !

!testRun: #PortfolioTest #test05 stamp: 'MP 10/7/2021 21:18:19'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:19:06' prior: 50859975!
transactions
	
	accounts ifEmpty: [^OrderedCollection new].
	^accounts first transactions.! !

!testRun: #PortfolioTest #test01 stamp: 'MP 10/7/2021 21:19:08'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'MP 10/7/2021 21:19:08'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'MP 10/7/2021 21:19:08'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'MP 10/7/2021 21:19:08'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'MP 10/7/2021 21:19:08'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:19:52'!
test06

	| portfolio account transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addAccount: account.

	self assert: (portfolio hasRegistered: transaction).! !

!testRun: #PortfolioTest #test06 stamp: 'MP 10/7/2021 21:19:54'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:20:30' prior: 50859951!
hasRegistered: aTransaction
	
	accounts isEmpty ifTrue: [^false].
	^accounts first hasRegistered: aTransaction .! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:20:31' prior: 50860212!
hasRegistered: aTransaction
	
	accounts isEmpty ifTrue: [^false].
	^accounts first hasRegistered: aTransaction.! !

!testRun: #PortfolioTest #test01 stamp: 'MP 10/7/2021 21:20:31'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'MP 10/7/2021 21:20:31'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'MP 10/7/2021 21:20:31'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'MP 10/7/2021 21:20:31'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'MP 10/7/2021 21:20:31'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'MP 10/7/2021 21:20:31'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:23:00' prior: 50860199!
test06

	| portfolio account1 account2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.

	portfolio _ Portfolio new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.

	self assert: 150 equals: portfolio balance.! !

!testRun: #PortfolioTest #test06 stamp: 'MP 10/7/2021 21:23:03'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:23:33' prior: 50860151!
balance
	
	^accounts sum: [ :account | account balance ].! !

!testRun: #PortfolioTest #test01 stamp: 'MP 10/7/2021 21:23:33'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'MP 10/7/2021 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'MP 10/7/2021 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'MP 10/7/2021 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'MP 10/7/2021 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'MP 10/7/2021 21:23:33'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'MP 10/7/2021 21:23:33'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:23:44' prior: 50860256!
balance
	
	^accounts sum: [ :account | account balance ] ifEmpty: [ ^0 ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:23:46' prior: 50860277!
balance
	
	^accounts sum: [ :account | account balance ] ifEmpty: [ 0 ].! !

!testRun: #PortfolioTest #test01 stamp: 'MP 10/7/2021 21:23:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'MP 10/7/2021 21:23:46'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'MP 10/7/2021 21:23:46'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'MP 10/7/2021 21:23:46'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'MP 10/7/2021 21:23:46'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'MP 10/7/2021 21:23:46'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:19:52' prior: 50860240!
test06

	| portfolio account transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addAccount: account.

	self assert: (portfolio hasRegistered: transaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:24:11'!
test07

	| portfolio account1 account2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.

	portfolio _ Portfolio new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.

	self assert: 150 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:25:50'!
test08

	| portfolio account1 account2 expectedTransactions transaction1 transaction2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 50 on: account2.

	portfolio _ Portfolio new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.

	expectedTransactions _ OrderedCollection with: transaction1 with: transaction2.
	self assert: expectedTransactions equals: portfolio transactions.! !

!testRun: #PortfolioTest #test08 stamp: 'MP 10/7/2021 21:27:31'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/7/2021 21:27:46' prior: 50860181!
transactions
	
	accounts ifEmpty: [^OrderedCollection new].
	^accounts first transactions.! !

----SNAPSHOT----(7 October 2021 21:27:56) CuisUniversity-4532.image priorSource: 16898421!

----SNAPSHOT----(7 October 2021 22:25:28) CuisUniversity-4532.image priorSource: 16918525!

----QUIT----(7 October 2021 22:25:34) CuisUniversity-4532.image priorSource: 16918617!

----STARTUP---- (9 October 2021 23:29:41) as /home/ignacio/Documents/Facultad/repos-isw1/isw1/vms/cuis-clean/CuisUniversity-4532.image!


----End fileIn of /home/ignacio/Documents/Facultad/repos-isw1/isw1/vms/cuis-clean/Portfolio-Ejercicio.st----!

!testRun: #PortfolioTest #test08 stamp: 'IAR 10/9/2021 23:31:26'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'IAR 10/9/2021 23:31:26'!
FAILURE!

!methodRemoval: PortfolioTest #test08 stamp: 'IAR 10/9/2021 23:31:37'!
test08

	| portfolio account1 account2 expectedTransactions transaction1 transaction2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 50 on: account2.

	portfolio _ Portfolio new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.

	expectedTransactions _ OrderedCollection with: transaction1 with: transaction2.
	self assert: expectedTransactions equals: portfolio transactions.!

!testRun: #PortfolioTest #test01 stamp: 'IAR 10/9/2021 23:31:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'IAR 10/9/2021 23:31:46'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'IAR 10/9/2021 23:31:46'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'IAR 10/9/2021 23:31:46'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'IAR 10/9/2021 23:31:46'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'IAR 10/9/2021 23:31:46'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'IAR 10/9/2021 23:31:46'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:36:50'!
test08

	| portfolio1 account1 account2 account portfolio2 |
	account _ ReceptiveAccount new.
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: account1.
	portfolio2 addPortfolio: portfolio1
	

	self assert: 150 equals: portfolio2 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:37:09' prior: 50859757!
test08

	| portfolio1 account portfolio2 |
	account _ ReceptiveAccount new.
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: account.
	portfolio2 addPortfolio: portfolio1
	

	self assert: 150 equals: portfolio2 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:37:19' prior: 50859769!
test08

	| portfolio1 portfolio2 account |
	account _ ReceptiveAccount new.
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: account.
	portfolio2 addPortfolio: portfolio1
	

	self assert: 150 equals: portfolio2 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:37:30' prior: 50859781!
test08

	| portfolio1 portfolio2 account |
	account _ ReceptiveAccount new.
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: account.
	portfolio2 addPortfolio: portfolio1
	

	self assert: 150 equals: portfolio2 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:37:49' prior: 50859793!
test08

	| portfolio1 portfolio2 account |
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.

	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: account.
	portfolio2 addPortfolio: portfolio1
	

	self assert: 150 equals: portfolio2 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:37:52' prior: 50859805!
test08

	| portfolio1 portfolio2 account |
	
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.

	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: account.
	portfolio2 addPortfolio: portfolio1
	

	self assert: 150 equals: portfolio2 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:38:01' prior: 50859818!
test08

	| portfolio1 portfolio2 account |
	
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.

	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: account.
	portfolio2 addPortfolio: portfolio1
	

	self assert: 10 equals: portfolio2 balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:38:11' prior: 50859831!
test08

	| portfolio1 portfolio2 account |
	
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.

	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: account.
	portfolio2 addPortfolio: portfolio1
	

	self assert: 100 equals: (portfolio2 balance).! !

!testRun: #PortfolioTest #test08 stamp: 'IAR 10/9/2021 23:38:17'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:38:34' prior: 50859844!
test08

	| portfolio1 portfolio2 account |
	
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.

	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: account.
	portfolio2 addPortfolio: portfolio1.
	

	self assert: 100 equals: (portfolio2 balance).! !

!testRun: #PortfolioTest #test08 stamp: 'IAR 10/9/2021 23:38:37'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:38:49'!
addPortfolio: aPortfolio 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'IAR 10/9/2021 23:39:43'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:39:40' prior: 50859874!
addPortfolio: aPortfolio 
	
	portfolios add: aPortfolio.! !

!testRun: #PortfolioTest #test08 stamp: 'IAR 10/9/2021 23:39:48'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:40:05' prior: 50859665 overrides: 16896425!
initialize

	accounts _ OrderedCollection new.
	portfolios _ OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:42:01' prior: 50859653!
balance
	
	| accountsBalance portfoliosBalance |
	accountsBalance _ accounts sum: [ :account | account balance ] ifEmpty: [ 0 ].
	portfoliosBalance _ portfolios first balance.
	
	^ accountsBalance + portfoliosBalance.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:42:06' prior: 50859901!
balance
	
	| accountsBalance portfoliosBalance |
	
	accountsBalance _ accounts sum: [ :account | account balance ] ifEmpty: [ 0 ].
	portfoliosBalance _ portfolios first balance.
	
	^ accountsBalance + portfoliosBalance.! !

!testRun: #PortfolioTest #test01 stamp: 'IAR 10/9/2021 23:42:08'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'IAR 10/9/2021 23:42:08'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'IAR 10/9/2021 23:42:08'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'IAR 10/9/2021 23:42:08'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'IAR 10/9/2021 23:42:08'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'IAR 10/9/2021 23:42:08'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'IAR 10/9/2021 23:42:08'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'IAR 10/9/2021 23:42:08'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:43:51' prior: 50859911!
balance
	
	| accountsBalance portfoliosBalance |
	
	accountsBalance _ accounts sum: [ :account | account balance ] ifEmpty: [ 0 ].
	portfolios isEmpty ifTrue: [
		portfoliosBalance _ 0.
		] ifFalse: [
		portfoliosBalance _ portfolios first balance.
		].

	
	^ accountsBalance + portfoliosBalance.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:44:05' prior: 50859940!
balance
	
	| accountsBalance portfoliosBalance |
	
	accountsBalance _ accounts sum: [ :account | account balance ] ifEmpty: [ 0 ].
	portfolios isEmpty ifTrue: [
		
		
		portfoliosBalance _ 0.
						] ifFalse:
					[
		portfoliosBalance _ portfolios first balance.
		].

	
	^ accountsBalance + portfoliosBalance.! !

!testRun: #PortfolioTest #test01 stamp: 'IAR 10/9/2021 23:44:06'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'IAR 10/9/2021 23:44:06'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'IAR 10/9/2021 23:44:06'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'IAR 10/9/2021 23:44:06'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'IAR 10/9/2021 23:44:06'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'IAR 10/9/2021 23:44:06'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'IAR 10/9/2021 23:44:06'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'IAR 10/9/2021 23:44:06'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:44:50' prior: 50859953!
balance
	
	| accountsBalance portfoliosBalance |
	
	accountsBalance _ accounts sum: [ :account | account balance ] ifEmpty: [ 0 ].
	portfolios isEmpty
		ifTrue: [ 	portfoliosBalance _ 0 ]
		ifFalse: [ 	portfoliosBalance _ portfolios first balance ].
			
	^ accountsBalance + portfoliosBalance.! !

!testRun: #PortfolioTest #test01 stamp: 'IAR 10/9/2021 23:44:51'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'IAR 10/9/2021 23:44:51'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'IAR 10/9/2021 23:44:51'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'IAR 10/9/2021 23:44:51'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'IAR 10/9/2021 23:44:51'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'IAR 10/9/2021 23:44:51'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'IAR 10/9/2021 23:44:51'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'IAR 10/9/2021 23:44:51'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:45:48'!
test09

	| portfolio1 portfolio2 portfolio3 account1 account2 |
	
	account1 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.

	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: account1.
	portfolio2 addPortfolio: portfolio1.
	

	self assert: 100 equals: (portfolio2 balance).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:46:03' prior: 50860016!
test09

	| portfolio1 portfolio2 portfolio3 account1 account2 |
	
	account1 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.

	account2 _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addAccount: account1.
	portfolio2 addPortfolio: portfolio1.
	

	self assert: 100 equals: (portfolio2 balance).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:46:49' prior: 50860030!
test09

	| portfolio1 portfolio2 portfolio3 account1 account2 |
	
	account1 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.

	account2 _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	portfolio3 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio2.
	

	self assert: 100 equals: (portfolio2 balance).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:46:51' prior: 50860046!
test09

	| portfolio1 portfolio2 portfolio3 account1 account2 |
	
	account1 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.

	account2 _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	portfolio3 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio2.
	

	self assert: 100 equals: (portfolio2 balance).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:46:54' prior: 50860065!
test09

	| portfolio1 portfolio2 portfolio3 account1 account2 |
	
	account1 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.

	account2 _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	portfolio3 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio2.

	self assert: 100 equals: (portfolio2 balance).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:46:58' prior: 50860084!
test09

	| portfolio1 portfolio2 portfolio3 account1 account2 |
	
	account1 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.

	account2 _ ReceptiveAccount new.
	Deposit register: 100 on: account2.
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	portfolio3 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio2.

	self assert: 100 equals: (portfolio3 balance).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:47:03' prior: 50860103!
test09

	| portfolio1 portfolio2 portfolio3 account1 account2 |
	
	account1 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.

	account2 _ ReceptiveAccount new.
	Deposit register: 50 on: account2.
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	portfolio3 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio2.

	self assert: 100 equals: (portfolio3 balance).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:47:06' prior: 50860122!
test09

	| portfolio1 portfolio2 portfolio3 account1 account2 |
	
	account1 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.

	account2 _ ReceptiveAccount new.
	Deposit register: 50 on: account2.
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	portfolio3 addPortfolio: portfolio1.
	portfolio3 addPortfolio: portfolio2.

	self assert: 150 equals: (portfolio3 balance).! !

!testRun: #PortfolioTest #test09 stamp: 'IAR 10/9/2021 23:47:12'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:48:44' prior: 50859985!
balance
	
	| accountsBalance portfoliosBalance |
	
	accountsBalance _ accounts sum: [ :account | account balance ] ifEmpty: [ 0 ].
	portfoliosBalance _ portfolios sum: [ :portfolio | portfolio balance] ifEmpty: [ 0 ].
			
	^ accountsBalance + portfoliosBalance.! !

!testRun: #PortfolioTest #test01 stamp: 'IAR 10/9/2021 23:48:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'IAR 10/9/2021 23:48:46'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'IAR 10/9/2021 23:48:46'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'IAR 10/9/2021 23:48:46'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'IAR 10/9/2021 23:48:46'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'IAR 10/9/2021 23:48:46'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'IAR 10/9/2021 23:48:46'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'IAR 10/9/2021 23:48:46'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'IAR 10/9/2021 23:48:46'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/9/2021 23:57:51'!
test021

	| portfolio account transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addAccount: account.

	self assert: (portfolio hasRegistered: transaction).! !

!methodRemoval: PortfolioTest #test06 stamp: 'IAR 10/9/2021 23:57:51'!
test06

	| portfolio account transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addAccount: account.

	self assert: (portfolio hasRegistered: transaction).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:01:21'!
test10

	| portfolio transaction account1 account2 transaction1 transaction2 |
	
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 50 on: account2.
	
	portfolio _ Portfolio new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.

	self assert: (portfolio hasRegistered: transaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:02:03' prior: 50860215!
test10

	| portfolio account1 account2 transaction1 transaction2 |
	
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 50 on: account2.
	
	portfolio _ Portfolio new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.

	self assert: (portfolio hasRegistered: transaction2).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:02:21' prior: 50860231!
test10

	| portfolio account1 account2 transaction2 transaction |
	
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	transaction _ Deposit register: 50 on: account2.
	
	portfolio _ Portfolio new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.

	self assert: (portfolio hasRegistered: transaction2).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:02:30' prior: 50860247!
test10

	| portfolio account1 account2 transaction |
	
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	transaction _ Deposit register: 50 on: account2.
	
	portfolio _ Portfolio new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.

	self assert: (portfolio hasRegistered: transaction).! !

!testRun: #PortfolioTest #test10 stamp: 'IAR 10/10/2021 00:02:38'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:03:33' prior: 50859658!
hasRegistered: aTransaction
	
	^accounts anySatisfy: [ : account | account hasRegistered: aTransaction].! !

!testRun: #PortfolioTest #test01 stamp: 'IAR 10/10/2021 00:03:34'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'IAR 10/10/2021 00:03:34'!
PASSED!

!testRun: #PortfolioTest #test021 stamp: 'IAR 10/10/2021 00:03:34'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'IAR 10/10/2021 00:03:34'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'IAR 10/10/2021 00:03:34'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'IAR 10/10/2021 00:03:34'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'IAR 10/10/2021 00:03:34'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'IAR 10/10/2021 00:03:34'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'IAR 10/10/2021 00:03:34'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'IAR 10/10/2021 00:03:34'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:05:41'!
test11

	| account1 account2 transaction portfolio1 portfolio2 |
	
	account1 _ ReceptiveAccount new.
	
	
	Deposit register: 100 on: account1.
	transaction _ Deposit register: 50 on: account2.
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 addAccount: account1.
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio1 hasRegistered: transaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:05:56' prior: 50860309!
test11

	| account1 transaction portfolio1 portfolio2 |
	
	account1 _ ReceptiveAccount new.
	
	
	Deposit register: 100 on: account1.
	transaction _ Deposit register: 50 on: account1.
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 addAccount: account1.
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio1 hasRegistered: transaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:06:02' prior: 50860325!
test11

	| account transaction portfolio1 portfolio2 |
	
	account _ ReceptiveAccount new.
	
	
	Deposit register: 100 on: account.
	transaction _ Deposit register: 50 on: account.
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 addAccount: account.
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio1 hasRegistered: transaction).! !

!testRun: #PortfolioTest #test11 stamp: 'IAR 10/10/2021 00:06:04'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'IAR 10/10/2021 00:06:04'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'IAR 10/10/2021 00:06:04'!
PASSED!

!testRun: #PortfolioTest #test021 stamp: 'IAR 10/10/2021 00:06:04'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'IAR 10/10/2021 00:06:04'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'IAR 10/10/2021 00:06:04'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'IAR 10/10/2021 00:06:04'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'IAR 10/10/2021 00:06:04'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'IAR 10/10/2021 00:06:04'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'IAR 10/10/2021 00:06:04'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'IAR 10/10/2021 00:06:04'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'IAR 10/10/2021 00:06:04'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:06:11' prior: 50860340!
test11

	| account transaction portfolio1 portfolio2 |
	
	account _ ReceptiveAccount new.
	
	
	Deposit register: 100 on: account.
	transaction _ Deposit register: 50 on: account.
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 addAccount: account.
	portfolio2 addPortfolio: portfolio1.

	self assert: (portfolio2 hasRegistered: transaction).! !

!testRun: #PortfolioTest #test11 stamp: 'IAR 10/10/2021 00:06:12'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:07:41' prior: 50860279!
hasRegistered: aTransaction
	
	^(accounts anySatisfy: [ : account | account hasRegistered: aTransaction])
		or: [ portfolios anySatisfy: [ : portfolio | portfolio hasRegistered: aTransaction]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:07:47' prior: 50860401!
hasRegistered: aTransaction
	
	^(accounts anySatisfy: [ : account | account hasRegistered: aTransaction])
		or: [ portfolios anySatisfy: [ : portfolio | portfolio hasRegistered: aTransaction ]].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:07:48' prior: 50860411!
hasRegistered: aTransaction
	
	^(accounts anySatisfy: [ : account | account hasRegistered: aTransaction])
		or: [ portfolios anySatisfy: [ : portfolio | portfolio hasRegistered: aTransaction ] ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:07:52' prior: 50860421!
hasRegistered: aTransaction
	
	^(accounts anySatisfy: [ : account | account hasRegistered: aTransaction ])
		or: [ portfolios anySatisfy: [ : portfolio | portfolio hasRegistered: aTransaction ] ].! !

!testRun: #PortfolioTest #test01 stamp: 'IAR 10/10/2021 00:07:52'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'IAR 10/10/2021 00:07:52'!
PASSED!

!testRun: #PortfolioTest #test021 stamp: 'IAR 10/10/2021 00:07:52'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'IAR 10/10/2021 00:07:52'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'IAR 10/10/2021 00:07:52'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'IAR 10/10/2021 00:07:52'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'IAR 10/10/2021 00:07:52'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'IAR 10/10/2021 00:07:52'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'IAR 10/10/2021 00:07:52'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'IAR 10/10/2021 00:07:52'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'IAR 10/10/2021 00:07:52'!
PASSED!

----End fileIn of /home/ignacio/Documents/Facultad/repos-isw1/isw1/vms/cuis-clean/Packages/TerseGuide.pck.st----!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:11:11'!
test12

	| portfolio account expectedTransactions transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	
	portfolio _ Portfolio new.
	portfolio addAccount: account.

	expectedTransactions _ OrderedCollection with: transaction.
	self assert: expectedTransactions equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:11:16' prior: 50863393!
test12

	| portfolio account1 expectedTransactions transaction |
	account1 _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account1.
	
	
	portfolio _ Portfolio new.
	portfolio addAccount: account1.

	expectedTransactions _ OrderedCollection with: transaction.
	self assert: expectedTransactions equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:11:50' prior: 50863407!
test12

	| portfolio account1 expectedTransactions transaction account2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	transaction _ Deposit register: 100 on: account1.
	
	
	portfolio _ Portfolio new.
	portfolio addAccount: account1.

	expectedTransactions _ OrderedCollection with: transaction.
	self assert: expectedTransactions equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:12:03' prior: 50863421!
test12

	| portfolio account1 expectedTransactions transaction1 account2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	transaction1 _ Deposit register: 100 on: account1.
	
	
	portfolio _ Portfolio new.
	portfolio addAccount: account1.

	expectedTransactions _ OrderedCollection with: transaction1.
	self assert: expectedTransactions equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:12:51' prior: 50863437!
test12

	| portfolio account1 expectedTransactions transaction1 account2 transaction2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 100 on: account2.	
	
	portfolio _ Portfolio new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.

	expectedTransactions _ OrderedCollection with: transaction1.
	self assert: expectedTransactions equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:13:06' prior: 50863453!
test12

	| portfolio account1 expectedTransactions transaction1 account2 transaction2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 100 on: account2.	
	
	portfolio _ Portfolio new.
	portfolio addAccount: account1.
	portfolio addAccount: account2.

	expectedTransactions _ OrderedCollection with: transaction1 with: transaction2.
	self assert: expectedTransactions equals: portfolio transactions.! !

!testRun: #PortfolioTest #test12 stamp: 'IAR 10/10/2021 00:13:09'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:19:37' prior: 50859669!
transactions
	
	accounts ifEmpty: [^OrderedCollection new].
	^accounts do: [ : account | | allTransactions |  allTransactions addAll: account transactions ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:20:32' prior: 50863494!
transactions
	
	| allTransactions |
	
	allTransactions _ OrderedCollection new.
	accounts do: [ : account |  allTransactions addAll: account transactions ].
	^ allTransactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:20:39' prior: 50863502!
transactions
	
	| allTransactions |
	
	allTransactions _ OrderedCollection new.
	accounts do: [ : account |  allTransactions addAll: account transactions ].
	
	^ allTransactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:20:42' prior: 50863511!
transactions
	
	| allTransactions |
	
	allTransactions _ OrderedCollection new.
	
	
	accounts do: [ : account |  allTransactions addAll: account transactions ].
	
	^ allTransactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:20:46' prior: 50863520!
transactions
	
	| allTransactions |
	
	
	allTransactions _ OrderedCollection new.
	
	
	
	accounts do: [ : account |  allTransactions addAll: account transactions ].
	
	^ allTransactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:20:49' prior: 50863529!
transactions
	
	| allTransactions |
	
	
	allTransactions _ OrderedCollection new.
	accounts do: [ : account |  allTransactions addAll: account transactions ].
	
	^ allTransactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:20:51' prior: 50863538!
transactions
	
	| allTransactions |
	
	allTransactions _ OrderedCollection new.
	accounts do: [ : account |  allTransactions addAll: account transactions ].
	
	^ allTransactions.! !

!testRun: #PortfolioTest #test01 stamp: 'IAR 10/10/2021 00:20:54'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'IAR 10/10/2021 00:20:54'!
PASSED!

!testRun: #PortfolioTest #test021 stamp: 'IAR 10/10/2021 00:20:54'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'IAR 10/10/2021 00:20:54'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'IAR 10/10/2021 00:20:54'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'IAR 10/10/2021 00:20:54'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'IAR 10/10/2021 00:20:54'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'IAR 10/10/2021 00:20:54'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'IAR 10/10/2021 00:20:54'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'IAR 10/10/2021 00:20:54'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'IAR 10/10/2021 00:20:54'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'IAR 10/10/2021 00:20:54'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:22:31'!
test13

	| portfolio1 account1 expectedTransactions transaction1 account2 transaction2 portfolio2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 100 on: account2.	
	
	portfolio1 _ Portfolio new.
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.

	expectedTransactions _ OrderedCollection with: transaction1 with: transaction2.
	self assert: expectedTransactions equals: portfolio1 transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:23:09' prior: 50863584!
test13

	| portfolio1 account1 expectedTransactions transaction1 account2 transaction2 portfolio2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 100 on: account2.	
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	portfolio1 addPortfolio: portfolio2.

	expectedTransactions _ OrderedCollection with: transaction1 with: transaction2.
	self assert: expectedTransactions equals: portfolio1 transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:23:38' prior: 50863604!
test13

	| portfolio1 account1 expectedTransactions transaction1 account2 transaction2 portfolio2 |
	
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 100 on: account2.	
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	portfolio1 addPortfolio: portfolio2.

	expectedTransactions _ OrderedCollection with: transaction1 with: transaction2.
	self assert: expectedTransactions equals: portfolio1 transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:24:07' prior: 50863626!
test13

	| portfolio1 account1 expectedTransactions transaction1 account2 transaction2 portfolio2 |
	
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 100 on: account2.	
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	portfolio2 addPortfolio: portfolio1.

	expectedTransactions _ OrderedCollection with: transaction1 with: transaction2.
	self assert: expectedTransactions equals: portfolio1 transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:24:26' prior: 50863648!
test13

	| portfolio1 account1 expectedTransactions transaction1 account2 transaction2 portfolio2 |
	
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 100 on: account2.	
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	portfolio2 addPortfolio: portfolio1.

	expectedTransactions _ OrderedCollection with: transaction1 with: transaction2.
	self assert: expectedTransactions equals: portfolio2 transactions.! !

!testRun: #PortfolioTest #test13 stamp: 'IAR 10/10/2021 00:24:28'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:25:19' prior: 50863547!
transactions
	
	| allTransactions |
	
	allTransactions _ OrderedCollection new.
	accounts do: [ :account |  allTransactions addAll: account transactions ].
	portfolios do: [ :portfolio |  allTransactions addAll: portfolio transactions ].
	^ allTransactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:25:21' prior: 50863695!
transactions
	
	| allTransactions |
	
	allTransactions _ OrderedCollection new.
	accounts do: [ :account |  allTransactions addAll: account transactions ].
	
	portfolios do: [ :portfolio |  allTransactions addAll: portfolio transactions ].
	^ allTransactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:25:22' prior: 50863707!
transactions
	
	| allTransactions |
	
	allTransactions _ OrderedCollection new.
	accounts do: [ :account |  allTransactions addAll: account transactions ].
	
	portfolios do: [ :portfolio |  allTransactions addAll: portfolio transactions ].
	
	^ allTransactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:25:27' prior: 50863719!
transactions
	
	| allTransactions |
	
	allTransactions _ OrderedCollection new.
	
	accounts do: [ :account |  allTransactions addAll: account transactions ].
	portfolios do: [ :portfolio |  allTransactions addAll: portfolio transactions ].
	
	^ allTransactions.! !

!testRun: #PortfolioTest #test01 stamp: 'IAR 10/10/2021 00:25:33'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'IAR 10/10/2021 00:25:33'!
PASSED!

!testRun: #PortfolioTest #test021 stamp: 'IAR 10/10/2021 00:25:33'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'IAR 10/10/2021 00:25:33'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'IAR 10/10/2021 00:25:33'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'IAR 10/10/2021 00:25:33'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'IAR 10/10/2021 00:25:33'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'IAR 10/10/2021 00:25:33'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'IAR 10/10/2021 00:25:33'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'IAR 10/10/2021 00:25:33'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'IAR 10/10/2021 00:25:33'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'IAR 10/10/2021 00:25:33'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'IAR 10/10/2021 00:25:33'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'IAR 10/10/2021 00:25:33'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:26:21' prior: 50863670!
test13

	| portfolio1 account1 expectedTransactions transaction1 account2 transaction2 portfolio2 |
	
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 100 on: account2.	
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	portfolio2 addPortfolio: portfolio1.

	expectedTransactions _ OrderedCollection with: transaction2 with: transaction1.
	self assert: expectedTransactions equals: portfolio2 transactions.! !

!testRun: #PortfolioTest #test13 stamp: 'IAR 10/10/2021 00:26:22'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'IAR 10/10/2021 00:26:22'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'IAR 10/10/2021 00:26:22'!
PASSED!

!testRun: #PortfolioTest #test021 stamp: 'IAR 10/10/2021 00:26:22'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'IAR 10/10/2021 00:26:22'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'IAR 10/10/2021 00:26:22'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'IAR 10/10/2021 00:26:22'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'IAR 10/10/2021 00:26:22'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'IAR 10/10/2021 00:26:22'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'IAR 10/10/2021 00:26:22'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'IAR 10/10/2021 00:26:22'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'IAR 10/10/2021 00:26:22'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'IAR 10/10/2021 00:26:22'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'IAR 10/10/2021 00:26:22'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'IAR 10/10/2021 00:26:32'!
test06

	| portfolio account transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addAccount: account.

	self assert: (portfolio hasRegistered: transaction).! !

!methodRemoval: PortfolioTest #test021 stamp: 'IAR 10/10/2021 00:26:32'!
test021

	| portfolio account transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addAccount: account.

	self assert: (portfolio hasRegistered: transaction).!

----SNAPSHOT----(10 October 2021 00:27:10) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (14 October 2021 21:31:23) as /home/mnpanic/Documents/dc/ing1/cuis/cuis-portfolio-1/CuisUniversity-4532.image!


Object subclass: #FinancialService
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #FinancialService category: 'Portfolio-Ejercicio' stamp: 'MP 10/14/2021 21:31:49'!
Object subclass: #FinancialService
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialService subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MP 10/14/2021 21:31:58'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

FinancialService subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Ejercicio' stamp: 'MP 10/14/2021 21:32:04'!
FinancialService subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!FinancialService methodsFor: 'no messages' stamp: 'MP 10/14/2021 21:33:26'!
balance

	self subclassResponsibility ! !
!FinancialService methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:33:34'!
hasRegistered

	self subclassResponsibility ! !
!FinancialService methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:33:57'!
hasRegistered: aTransaction

	self subclassResponsibility ! !

!methodRemoval: FinancialService #hasRegistered stamp: 'MP 10/14/2021 21:33:58'!
hasRegistered

	self subclassResponsibility !
!FinancialService methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:34:09'!
transactions

	self subclassResponsibility ! !

!testRun: #PortfolioTest #test01 stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MP 10/14/2021 21:34:23'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MP 10/14/2021 21:34:57'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'accounts portfolios financialServices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:34:56'!
addFinancialService: aFinancialService 
	
	financialServices add: aFinancialService! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:35:15' prior: 50860841 overrides: 16896425!
initialize

	accounts _ OrderedCollection new.
	portfolios _ OrderedCollection new.
	financialServices _ OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:35:17' prior: 50861045 overrides: 16896425!
initialize

	financialServices _ OrderedCollection new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:35:41' prior: 50860448!
test04

	| portfolio account |
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addAccount: account.

	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:35:57' prior: 50860458!
test05

	| portfolio account expectedTransactions transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account.

	expectedTransactions _ OrderedCollection with: transaction.
	self assert: expectedTransactions equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:36:01' prior: 50860472!
test06

	| portfolio account transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account.

	self assert: (portfolio hasRegistered: transaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:36:08' prior: 50860483!
test07

	| portfolio account1 account2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.

	portfolio _ Portfolio new.
	portfolio addFinancialService: account1.
	portfolio addFinancialService: account2.

	self assert: 150 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:36:12' prior: 50860496!
test08

	| portfolio1 portfolio2 account |
	
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.

	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio1 addFinancialService: account.
	portfolio2 addFinancialService: portfolio1.
	

	self assert: 100 equals: (portfolio2 balance).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:36:17' prior: 50860508!
test09

	| portfolio1 portfolio2 portfolio3 account1 account2 |
	
	account1 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.

	account2 _ ReceptiveAccount new.
	Deposit register: 50 on: account2.
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	portfolio3 _ Portfolio new.
	
	portfolio1 addFinancialService: account1.
	portfolio2 addFinancialService: account2.
	
	portfolio3 addFinancialService: portfolio1.
	portfolio3 addFinancialService: portfolio2.

	self assert: 150 equals: (portfolio3 balance).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:36:20' prior: 50860527!
test10

	| portfolio account1 account2 transaction |
	
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	Deposit register: 100 on: account1.
	transaction _ Deposit register: 50 on: account2.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account1.
	portfolio addFinancialService: account2.

	self assert: (portfolio hasRegistered: transaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:36:26' prior: 50860542!
test11

	| account transaction portfolio1 portfolio2 |
	
	account _ ReceptiveAccount new.
	
	
	Deposit register: 100 on: account.
	transaction _ Deposit register: 50 on: account.
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 addFinancialService: account.
	portfolio2 addFinancialService: portfolio1.

	self assert: (portfolio2 hasRegistered: transaction).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:36:30' prior: 50860557!
test12

	| portfolio account1 expectedTransactions transaction1 account2 transaction2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 100 on: account2.	
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account1.
	portfolio addFinancialService: account2.

	expectedTransactions _ OrderedCollection with: transaction1 with: transaction2.
	self assert: expectedTransactions equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:36:35' prior: 50860576!
test13

	| portfolio1 account1 expectedTransactions transaction1 account2 transaction2 portfolio2 |
	
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 100 on: account2.	
	
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 addFinancialService: account1.
	portfolio2 addFinancialService: account2.
	
	portfolio2 addFinancialService: portfolio1.

	expectedTransactions _ OrderedCollection with: transaction2 with: transaction1.
	self assert: expectedTransactions equals: portfolio2 transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:36:44' prior: 50861058!
test04

	| portfolio account |
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account.

	self assert: 100 equals: portfolio balance.! !

!methodRemoval: Portfolio #addPortfolio: stamp: 'MP 10/14/2021 21:36:54'!
addPortfolio: aPortfolio 
	
	portfolios add: aPortfolio.!

!methodRemoval: Portfolio #addAccount: stamp: 'MP 10/14/2021 21:36:55'!
addAccount: anAccount 
	
	accounts add: anAccount!

!testRun: #PortfolioTest #test01 stamp: 'MP 10/14/2021 21:37:04'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'MP 10/14/2021 21:37:04'!
ERROR!

!testRun: #PortfolioTest #test03 stamp: 'MP 10/14/2021 21:37:04'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'MP 10/14/2021 21:37:04'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'MP 10/14/2021 21:37:04'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'MP 10/14/2021 21:37:04'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'MP 10/14/2021 21:37:04'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'MP 10/14/2021 21:37:04'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'MP 10/14/2021 21:37:04'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'MP 10/14/2021 21:37:04'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'MP 10/14/2021 21:37:04'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'MP 10/14/2021 21:37:04'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'MP 10/14/2021 21:37:04'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:37:43' prior: 50860820 overrides: 50860950!
balance
	
	^financialServices sum: [ :financialService | financialService balance ] ifEmpty: [ 0 ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:37:49' prior: 50860831 overrides: 50860959!
hasRegistered: aTransaction
	
	^(financialServices anySatisfy: [ : account | account hasRegistered: aTransaction ])
		or: [ portfolios anySatisfy: [ : portfolio | portfolio hasRegistered: aTransaction ] ].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:38:03' prior: 50861272 overrides: 50860959!
hasRegistered: aTransaction
	
	^financialServices anySatisfy: [ :financialService | financialService hasRegistered: aTransaction ]! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'MP 10/14/2021 21:38:20' prior: 50860847 overrides: 50860968!
transactions
	
	| allTransactions |
	
	allTransactions _ OrderedCollection new.

	financialServices do: [ :financialService |  allTransactions addAll: financialService transactions ].
	
	^ allTransactions.! !

!testRun: #PortfolioTest #test01 stamp: 'MP 10/14/2021 21:38:40'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'MP 10/14/2021 21:38:40'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'MP 10/14/2021 21:38:40'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'MP 10/14/2021 21:38:40'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'MP 10/14/2021 21:38:40'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'MP 10/14/2021 21:38:40'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'MP 10/14/2021 21:38:40'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'MP 10/14/2021 21:38:40'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'MP 10/14/2021 21:38:40'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'MP 10/14/2021 21:38:40'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'MP 10/14/2021 21:38:40'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'MP 10/14/2021 21:38:40'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'MP 10/14/2021 21:38:40'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MP 10/14/2021 21:38:42'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MP 10/14/2021 21:38:46'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'portfolios financialServices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'MP 10/14/2021 21:38:46'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'financialServices'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----SNAPSHOT----(14 October 2021 21:38:49) CuisUniversity-4532.image priorSource: 16936111!

!testRun: #PortfolioTest #test01 stamp: 'MP 10/14/2021 21:38:51'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'MP 10/14/2021 21:38:51'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'MP 10/14/2021 21:38:51'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'MP 10/14/2021 21:38:51'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'MP 10/14/2021 21:38:51'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'MP 10/14/2021 21:38:51'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'MP 10/14/2021 21:38:51'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'MP 10/14/2021 21:38:51'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'MP 10/14/2021 21:38:51'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'MP 10/14/2021 21:38:51'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'MP 10/14/2021 21:38:51'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'MP 10/14/2021 21:38:51'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'MP 10/14/2021 21:38:51'!
PASSED!
!Portfolio methodsFor: 'initialization' stamp: 'MP 10/14/2021 21:40:54'!
pepe
! !

!methodRemoval: Portfolio #pepe stamp: 'MP 10/14/2021 21:41:06'!
pepe
!

!testRun: #PortfolioTest #test01 stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'MP 10/14/2021 21:41:46'!
PASSED!

----SNAPSHOT----(14 October 2021 21:41:50) CuisUniversity-4532.image priorSource: 16952107!

----SNAPSHOT----(14 October 2021 21:42:57) CuisUniversity-4532.image priorSource: 16955184!


----QUIT----(13 October 2021 15:20:10) CuisUniversity-4913.image priorSource: 14638157!

----STARTUP---- (13 October 2021 15:20:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:20:10) CuisUniversity-4913.image priorSource: 18661767!

----STARTUP---- (13 October 2021 15:21:02) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:21:02) CuisUniversity-4913.image priorSource: 18661997!

----QUIT----(13 October 2021 15:26:07) CuisUniversity-4913.image priorSource: 14638157!

----STARTUP---- (13 October 2021 15:26:08) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4913.image!


----QUIT----(13 October 2021 15:26:08) CuisUniversity-4913.image priorSource: 18661767!

----STARTUP---- (16 October 2021 14:32:52) as /home/agus/Documents/inge1/linux64/CuisUniversity-4913.image!


----End fileIn of /home/agus/Documents/inge1/isw1-ejs/17-Portfolio 1/Portfolio-Ejercicio.st----!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 14:55:20'!
test14

	| portfolio1 account1 transaction1 account2 transaction2 |
	
	account1 _ ReceptiveAccount new.
	
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 100 on: account2.	
	
	portfolio1 _ Portfolio new.
	
	portfolio1 addFinancialService: account1.
	portfolio1 addFinancialService: account1.
	

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 15:02:14' prior: 50915352!
test14

	| portfolio1 account1 transaction1 account2 transaction2 |
	
	account1 _ ReceptiveAccount new.
	
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 100 on: account2.	
	
	portfolio1 _ Portfolio new.
	
	portfolio1 addFinancialService: account1.
	portfolio1 addFinancialService: account1.
	
	self should: [portfolio1 addFinancialService: account1]  
	raise: Error -MessageNotUnderstood 
	withExceptionDo: [: error | self assert: Portfolio temporaryExistsInOtherBlockErrorDescription equals: error messageText].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 15:02:50' prior: 50915366!
test14

	| portfolio1 account1 |
	
	account1 _ ReceptiveAccount new.

	
	portfolio1 _ Portfolio new.
	
	portfolio1 addFinancialService: account1.
	portfolio1 addFinancialService: account1.
	
	self should: [portfolio1 addFinancialService: account1]  
	raise: Error -MessageNotUnderstood 
	withExceptionDo: [: error | self assert: Portfolio temporaryExistsInOtherBlockErrorDescription equals: error messageText].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 15:03:04' prior: 50915387!
test14

	| portfolio account1 |
	
	account1 _ ReceptiveAccount new.

	
	portfolio _ Portfolio new.
	
	portfolio addFinancialService: account1.
	portfolio addFinancialService: account1.
	
	self should: [portfolio addFinancialService: account1]  
	raise: Error -MessageNotUnderstood 
	withExceptionDo: [: error | self assert: Portfolio temporaryExistsInOtherBlockErrorDescription equals: error messageText].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 15:03:10' prior: 50915404!
test14

	| portfolio account1 |
	
	account1 _ ReceptiveAccount new.

	portfolio _ Portfolio new.
	
	portfolio addFinancialService: account1.
	portfolio addFinancialService: account1.
	
	self should: [portfolio addFinancialService: account1]  
	raise: Error -MessageNotUnderstood 
	withExceptionDo: [: error | self assert: Portfolio temporaryExistsInOtherBlockErrorDescription equals: error messageText].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 15:03:15' prior: 50915420!
test14

	| portfolio account |
	
	account _ ReceptiveAccount new.

	portfolio _ Portfolio new.
	
	portfolio addFinancialService: account.
	portfolio addFinancialService: account.
	
	self should: [portfolio addFinancialService: account]  
	raise: Error -MessageNotUnderstood 
	withExceptionDo: [: error | self assert: Portfolio temporaryExistsInOtherBlockErrorDescription equals: error messageText].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 15:04:02' prior: 50915436!
test14

	| portfolio account |
	
	account _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	portfolio addFinancialService: account.
	portfolio addFinancialService: account.
	
	self should: [portfolio addFinancialService: account]  
	raise: Error -MessageNotUnderstood 
	withExceptionDo: [: error | self assert: Portfolio cantAddFinancialServiceErrorDescription equals: error messageText].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 15:06:01' prior: 50915452!
test14

	| portfolio account |
	
	account _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	portfolio addFinancialService: account.
	portfolio addFinancialService: account.
	
	self should: [ portfolio addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 15:06:20'!
FAILURE!

----End fileIn of /home/agus/Documents/inge1/linux64/Packages/TerseGuide.pck.st----!

----QUIT----(16 October 2021 15:09:40) CuisUniversity-4913.image priorSource: 18661997!

----STARTUP---- (16 October 2021 15:11:55) as /home/agus/Documents/inge1/linux64/CuisUniversity-4913.image!


!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 15:12:50'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 15:12:50'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 15:12:50'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 15:12:50'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 15:12:50'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 15:12:50'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 15:12:50'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 15:12:50'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 15:12:50'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 15:12:50'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 15:12:50'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 15:12:50'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 15:12:50'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 15:12:50'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 15:12:50'!
FAILURE!

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 15:13:02'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 15:13:07'!
FAILURE!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 15:13:07'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 15:15:58' prior: 50915287!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) ifTrue: [
		self error: self class cantAddFinancialServiceErrorDescription].
	financialServices add: aFinancialService! !

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 15:16:03'!
ERROR!
!Portfolio class methodsFor: 'error descriptions' stamp: 'AF 10/16/2021 15:16:26'!
cantAddFinancialServiceErrorDescription
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'error descriptions' stamp: 'AF 10/16/2021 15:17:07' prior: 50918472!
cantAddFinancialServiceErrorDescription
	^ 'financial service already present'! !

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 15:17:08'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 15:17:31'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 15:18:00'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 15:18:06'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 15:18:13'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 15:18:24' prior: 50915468!
test14

	| portfolio account |
	
	account _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	portfolio addFinancialService: account.
	
	self should: [ portfolio addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 15:18:26'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 15:18:26'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 15:18:26'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 15:18:26'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 15:18:26'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 15:18:26'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 15:18:26'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 15:18:26'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 15:18:26'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 15:18:26'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 15:18:26'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 15:18:26'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 15:18:26'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 15:18:26'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 15:18:26'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 15:34:09'!
test15

	| portfolio1 portfolio2 account |
	
	account _ ReceptiveAccount new.
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio2 addFinancialService: account.
	portfolio1 addFinancialService: portfolio2.
	
	self should: [ portfolio1 addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 15:34:15'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 15:34:38'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 15:36:28'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 15:41:19' prior: 50918460!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) ifTrue: [
		self error: self class cantAddFinancialServiceErrorDescription].
	financialServices anySatsify: [: financialService | financialService containsFinancialService: aFinancialService].
	financialServices add: aFinancialService! !
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 15:51:24' prior: 50918571!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
	(financialServices anySatisfy: [: financialService | financialService includesFinancialService: aFinancialService]) 
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ].
	financialServices add: aFinancialService! !
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 15:55:04' prior: 50918584!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(financialServices anySatisfy: [: financialService | financialService containsAccount: aFinancialService]) 
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ].
	
	financialServices add: aFinancialService! !

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 15:55:09'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 15:55:09'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 15:55:09'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 15:55:09'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 15:55:09'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 15:55:09'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 15:55:09'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 15:55:09'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 15:55:09'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 15:55:09'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 15:55:09'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 15:55:09'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 15:55:09'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 15:55:09'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 15:55:09'!
ERROR!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 15:55:13'!
ERROR!
!FinancialService methodsFor: 'testing' stamp: 'AF 10/16/2021 15:55:33'!
containsAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!FinancialService methodsFor: 'testing' stamp: 'AF 10/16/2021 15:55:45' prior: 50918653!
containsAccount: aReceptiveAccount 
	self subclassResponsibility.! !

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 15:55:51'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 15:55:51'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 15:55:51'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 15:55:51'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 15:55:51'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 15:55:51'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 15:55:51'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 15:55:51'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 15:55:51'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 15:55:51'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 15:55:51'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 15:55:51'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 15:55:51'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 15:55:51'!
ERROR!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 15:55:51'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 15:55:53'!
FAILURE!
!Portfolio methodsFor: 'testing' stamp: 'AF 10/16/2021 15:57:33' overrides: 50918658!
containsAccount: aReceptiveAccount 
	self subclassResponsibility.! !
!Portfolio methodsFor: 'testing' stamp: 'AF 10/16/2021 15:57:53' prior: 50918701 overrides: 50918658!
containsAccount: aReceptiveAccount 
	
	^true.! !
!Portfolio methodsFor: 'testing' stamp: 'AF 10/16/2021 16:00:48' prior: 50918707 overrides: 50918658!
containsAccount: aReceptiveAccount 
	
	^financialServices anySatisfy: [: financialService | financialService containsAccount: aReceptiveAccount].! !

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 16:00:48'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 16:00:48'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 16:00:48'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 16:00:48'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 16:00:48'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 16:00:48'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 16:00:48'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 16:00:48'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 16:00:48'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 16:00:48'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 16:00:48'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 16:00:48'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 16:00:48'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 16:00:48'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 16:00:48'!
FAILURE!
!ReceptiveAccount methodsFor: 'testing' stamp: 'AF 10/16/2021 16:02:13' overrides: 50918658!
containsAccount: aRecpetiveAccount

	^aRecpetiveAccount = self.! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'AF 10/16/2021 16:02:40' prior: 50918755 overrides: 50918658!
containsAccount: aReceptiveAccount

	^aReceptiveAccount = self.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 10/16/2021 16:02:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 10/16/2021 16:02:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 10/16/2021 16:02:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 10/16/2021 16:02:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 10/16/2021 16:02:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 10/16/2021 16:02:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 10/16/2021 16:02:41'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 16:02:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 16:02:46'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 16:02:46'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 16:02:46'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 16:02:46'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 16:02:46'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 16:02:46'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 16:02:46'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 16:02:46'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 16:02:46'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 16:02:46'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 16:02:46'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 16:02:46'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 16:02:46'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 16:02:46'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 16:09:12'!
test16

	| portfolio1 portfolio2 account |
	
	account _ ReceptiveAccount new.
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 addFinancialService: account.
	portfolio1 addFinancialService: portfolio2.
	
	self should: [ portfolio2 addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 16:13:50' prior: 50918600!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(financialServices anySatisfy: [: financialService | financialService containsAccount: aFinancialService]) 
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ].
	
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 16:13:53'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 16:13:53'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 16:13:53'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 16:13:53'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 16:13:53'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 16:13:53'!
ERROR!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:13:53'!
ERROR!

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 16:14:56'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 16:14:56'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 16:14:56'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 16:14:56'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 16:14:56'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 16:14:56'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 16:14:56'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 16:14:56'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 16:14:56'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 16:14:56'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 16:14:56'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 16:14:56'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 16:14:56'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 16:14:56'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 16:14:56'!
ERROR!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:14:56'!
ERROR!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:14:59'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'AF 10/16/2021 16:15:47'!
yyy: aPortfolio 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AF 10/16/2021 16:16:22'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'financialServices parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'category-name' stamp: 'AF 10/16/2021 16:16:18' prior: 50918941!
yyy: aPortfolio 
	parent _ aPortfolio.! !

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 16:16:29'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 16:16:29'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 16:16:29'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 16:16:29'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 16:16:29'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 16:16:29'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 16:16:29'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 16:16:29'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 16:16:29'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 16:16:29'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 16:16:29'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 16:16:29'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 16:16:29'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 16:16:29'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 16:16:29'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:16:29'!
FAILURE!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:16:29'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 16:18:57' prior: 50918846!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(financialServices anySatisfy: [: financialService | financialService containsAccount: aFinancialService]) 
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ].
	
	parent containsAccount: aFinancialService.
	
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 16:18:57'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 16:18:57'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 16:18:57'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 16:18:57'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 16:18:57'!
ERROR!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 16:18:57'!
ERROR!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 16:18:57'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 16:18:57'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 16:18:57'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 16:18:57'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 16:18:57'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 16:18:57'!
ERROR!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 16:18:57'!
ERROR!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 16:18:57'!
ERROR!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 16:18:57'!
ERROR!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:18:57'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 16:20:12' prior: 50918998!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(financialServices anySatisfy: [: financialService | financialService containsAccount: aFinancialService]) 
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ].
	
	parent ifNotNil:[parent containsAccount: aFinancialService].
	
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 16:20:13'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 16:20:13'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 16:20:13'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 16:20:13'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 16:20:13'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 16:20:13'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 16:20:13'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 16:20:13'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 16:20:13'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 16:20:13'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 16:20:13'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 16:20:13'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 16:20:13'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 16:20:13'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 16:20:13'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:20:13'!
FAILURE!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:20:13'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 16:20:29' prior: 50919055!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(financialServices anySatisfy: [: financialService | financialService containsAccount: aFinancialService]) 
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ].
	
	parent ifNotNil:[ parent containsAccount: aFinancialService ].
	
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 16:20:29'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 16:20:29'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 16:20:29'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 16:20:29'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 16:20:29'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 16:20:29'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 16:20:29'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 16:20:29'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 16:20:29'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 16:20:29'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 16:20:29'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 16:20:29'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 16:20:29'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 16:20:29'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 16:20:29'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:20:29'!
FAILURE!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:20:29'!
FAILURE!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:21:24'!
FAILURE!

Portfolio new isKindOf: Portfolio.!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:24:29'!
FAILURE!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:25:03'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 16:25:55' prior: 50919115!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(financialServices anySatisfy: [: financialService | financialService containsAccount: aFinancialService]) 
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ].
	
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	parent ifNotNil:[ parent containsAccount: aFinancialService ].
	
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 16:25:55'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:25:55'!
FAILURE!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:25:55'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 16:26:33' prior: 50919184!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(financialServices anySatisfy: [: financialService | financialService containsAccount: aFinancialService]) 
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ].
	
	(parent ifNotNil:[ parent containsAccount: aFinancialService ])
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ].
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 16:27:33' prior: 50919244!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(financialServices anySatisfy: [: financialService | financialService containsAccount: aFinancialService]) 
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ].
	
	parent ifNotNil:[ (parent containsAccount: aFinancialService) 
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ] 
	].
		
		
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 16:27:35'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 16:27:35'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 16:27:35'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 16:27:35'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 16:27:35'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 16:27:35'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 16:27:35'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 16:27:35'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 16:27:35'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 16:27:35'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 16:27:35'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 16:27:35'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 16:27:35'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 16:27:35'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 16:27:35'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:27:35'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 16:28:37' prior: 50919267!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(financialServices anySatisfy: [: financialService | financialService containsAccount: aFinancialService]) 
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ].
	
	parent ifNotNil:[ (parent containsAccount: aFinancialService) 
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ] 
	].
	
		
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 16:31:24'!
test17

	| account portfolioA portfolioB portfolioC |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	portfolioC _ Portfolio new.
	
	portfolioA addFinancialService: account.
	portfolioA addFinancialService: portfolioC.
	portfolioB addFinancialService: portfolioC.
	
	self should: [ portfolioC addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 16:31:48' prior: 50918828!
test16

	| portfolio1 portfolio2 account |
	
	account _ ReceptiveAccount new.
	portfolio1 _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio1 addFinancialService: account.
	portfolio1 addFinancialService: portfolio2.
	
	self should: [ portfolio2 addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 16:32:02' prior: 50919372!
test16

	| portfolioA portfolio2 account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolioA addFinancialService: account.
	portfolioA addFinancialService: portfolio2.
	
	self should: [ portfolio2 addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 16:32:09' prior: 50919390!
test16

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioA addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioB addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 16:32:18' prior: 50918546!
test15

	| portfolioA portfolio2 account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolio2 addFinancialService: account.
	portfolioA addFinancialService: portfolio2.
	
	self should: [ portfolioA addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 16:32:28' prior: 50919426!
test15

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioB addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioA addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 16:32:43' prior: 50915011!
test13

	| portfolioA account1 expectedTransactions transaction1 account2 transaction2 portfolio2 |
	
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 100 on: account2.	
	
	portfolioA _ Portfolio new.
	portfolio2 _ Portfolio new.
	
	portfolioA addFinancialService: account1.
	portfolio2 addFinancialService: account2.
	
	portfolio2 addFinancialService: portfolioA.

	expectedTransactions _ OrderedCollection with: transaction2 with: transaction1.
	self assert: expectedTransactions equals: portfolio2 transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 16:32:54' prior: 50919462!
test13

	| portfolioA account1 expectedTransactions transaction1 account2 transaction2 portfolioB |
	
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 100 on: account2.	
	
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioA addFinancialService: account1.
	portfolioB addFinancialService: account2.
	
	portfolioB addFinancialService: portfolioA.

	expectedTransactions _ OrderedCollection with: transaction2 with: transaction1.
	self assert: expectedTransactions equals: portfolioB transactions.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 16:33:17' prior: 50919485!
test13

	| portfolioA portfolioB account1 account2 expectedTransactions transaction1 transaction2 |
	
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	
	transaction1 _ Deposit register: 100 on: account1.
	transaction2 _ Deposit register: 100 on: account2.	
	
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioA addFinancialService: account1.
	portfolioB addFinancialService: account2.
	
	portfolioB addFinancialService: portfolioA.

	expectedTransactions _ OrderedCollection with: transaction2 with: transaction1.
	self assert: expectedTransactions equals: portfolioB transactions.! !

!testRun: #PortfolioTest #test17 stamp: 'AF 10/16/2021 16:34:45'!
FAILURE!

!testRun: #PortfolioTest #test17 stamp: 'AF 10/16/2021 16:34:55'!
FAILURE!

!testRun: #PortfolioTest #test17 stamp: 'AF 10/16/2021 16:34:55'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'AF 10/16/2021 16:35:20' prior: 50918954!
yyy: aPortfolio 
	parent add: aPortfolio.! !
!Portfolio methodsFor: 'initialization' stamp: 'AF 10/16/2021 16:35:39' prior: 50915301 overrides: 16896425!
initialize

	financialServices _ OrderedCollection new.
	parent _ OrderedCollection new. ! !

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'AF 10/16/2021 16:35:53'!
FinancialService subclass: #Portfolio
	instanceVariableNames: 'financialServices parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 16:35:53' prior: 50919328!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(financialServices anySatisfy: [: financialService | financialService containsAccount: aFinancialService]) 
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ].
	
	parents ifNotNil:[ (parents containsAccount: aFinancialService) 
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ] 
	].
	
		
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 16:35:53' prior: 50919538!
yyy: aPortfolio 
	parents add: aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 16:35:53' prior: 50919543 overrides: 16896425!
initialize

	financialServices _ OrderedCollection new.
	parents _ OrderedCollection new. ! !
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 16:39:21' prior: 50919558!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(financialServices anySatisfy: [: financialService | financialService containsAccount: aFinancialService]) 
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ].
	
	parents anySatisfy: [ : parent | (parent containsAccount: aFinancialService) 
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ] 
	].
	
		
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 16:39:21'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 16:39:21'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 16:39:21'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 16:39:21'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 16:39:21'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 16:39:21'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 16:39:21'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 16:39:21'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 16:39:21'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 16:39:21'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 16:39:21'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 16:39:21'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 16:39:21'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 16:39:21'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 16:39:21'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:39:21'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AF 10/16/2021 16:39:21'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 16:40:48' prior: 50919593!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(financialServices anySatisfy: [: financialService | financialService containsAccount: aFinancialService]) 
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ].
	
	(parents anySatisfy: [ : parent | parent containsAccount: aFinancialService])
		ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ].
	
		
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:40:48'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AF 10/16/2021 16:40:48'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 16:41:09' prior: 50919656!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(financialServices anySatisfy: [: financialService | financialService containsAccount: aFinancialService]) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
	(parents anySatisfy: [: parent | parent containsAccount: aFinancialService ])
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
		
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 16:41:18' prior: 50919719!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(financialServices anySatisfy: [ :financialService | financialService containsAccount: aFinancialService]) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
	(parents anySatisfy: [ :parent | parent containsAccount: aFinancialService ])
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
		
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 16:41:19'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 16:41:19'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 16:41:19'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 16:41:19'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 16:41:19'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 16:41:19'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 16:41:19'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 16:41:19'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 16:41:19'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 16:41:19'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 16:41:19'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 16:41:19'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 16:41:19'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 16:41:19'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 16:41:19'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:41:19'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AF 10/16/2021 16:41:19'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 16:42:30'!
test18

	| account portfolioA portfolioB portfolioC |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	portfolioC _ Portfolio new.
	
	portfolioA addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	portfolioB addFinancialService: portfolioC.
	
	self should: [ portfolioC addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!testRun: #PortfolioTest #test18 stamp: 'AF 10/16/2021 16:42:30'!
FAILURE!

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 16:47:25'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 16:47:25'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 16:47:25'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 16:47:25'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 16:47:25'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 16:47:25'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 16:47:25'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 16:47:25'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 16:47:25'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 16:47:25'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 16:47:25'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 16:47:25'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 16:47:25'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 16:47:25'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 16:47:25'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:47:25'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AF 10/16/2021 16:47:25'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AF 10/16/2021 16:47:25'!
FAILURE!

!testRun: #PortfolioTest #test18 stamp: 'AF 10/16/2021 16:47:25'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 16:49:37' prior: 50919743!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(financialServices anySatisfy: [ :financialService | financialService containsAccount: aFinancialService]) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
	(self roots anySatisfy: [ :parent | parent containsAccount: aFinancialService ])
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
		
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 16:50:34' prior: 50919873!
addFinancialService: aFinancialService 
	
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(financialServices anySatisfy: [ :financialService | financialService containsAccount: aFinancialService]) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
	(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
		
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'category-name' stamp: 'AF 10/16/2021 16:54:29'!
roots

	| listOfRoots |
	parents do: [ :parent | parent add roots ].! !
!Portfolio methodsFor: 'category-name' stamp: 'AF 10/16/2021 16:54:51' prior: 50919920!
roots

	| listOfRoots |
	parents do: [ :parent | listOfRoots add roots ].! !
!Portfolio methodsFor: 'category-name' stamp: 'AF 10/16/2021 16:57:16' prior: 50919925!
roots

	| listOfRoots |
	
	parents ifEmpty: [^OrderedCollection with: self ].
	listOfRoots _ OrderedCollection new.
	parents do: [ :parent | listOfRoots addAll: parent roots].! !
!Portfolio methodsFor: 'category-name' stamp: 'AF 10/16/2021 16:57:29' prior: 50919931!
roots

	| listOfRoots |
	
	parents ifEmpty: [^OrderedCollection with: self ].
	listOfRoots _ OrderedCollection new.
	parents do: [ :parent | listOfRoots addAll: parent roots].! !
!Portfolio methodsFor: 'category-name' stamp: 'AF 10/16/2021 16:57:51' prior: 50919940!
roots

	| listOfRoots |
	
	parents ifEmpty: [^OrderedCollection with: self ].
	
	listOfRoots _ OrderedCollection new.
	parents do: [ :parent | listOfRoots addAll: parent roots].
	^listOfRoots ! !

!testRun: #PortfolioTest #test01 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!

!testRun: #PortfolioTest #test16 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!

!testRun: #PortfolioTest #test17 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!

!testRun: #PortfolioTest #test18 stamp: 'AF 10/16/2021 16:57:56'!
PASSED!
!Portfolio methodsFor: 'category-name' stamp: 'AF 10/16/2021 17:00:18' prior: 50919949!
roots

	| listOfRoots |
	
	parents ifEmpty: [^OrderedCollection with: self ].
	
	listOfRoots _ OrderedCollection new.
	parents do: [ :parent | listOfRoots addAll: parent roots].
	^listOfRoots.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:02:23'!
test01EmptyPortfolioShouldHaveZeroBalance

	| portfolio |
	portfolio _ Portfolio new.
	
	self assert: 0 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test01 stamp: 'AF 10/16/2021 17:02:23'!
test01

	| portfolio |
	portfolio _ Portfolio new.
	
	self assert: 0 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:03:36'!
test03EmptyPortfolioShouldHaveNoTransactions

	| portfolio |
	portfolio _ Portfolio new.

	self assert: portfolio transactions isEmpty.! !

!methodRemoval: PortfolioTest #test03 stamp: 'AF 10/16/2021 17:03:36'!
test03

	| portfolio |
	portfolio _ Portfolio new.

	self assert: portfolio transactions isEmpty.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:04:35'!
test02EmptyPortfolioHasNoRegisteredTransactions

	| portfolio account transaction |
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account. 
	
	self deny: (portfolio hasRegistered: transaction).! !

!methodRemoval: PortfolioTest #test02 stamp: 'AF 10/16/2021 17:04:35'!
test02

	| portfolio account transaction |
	portfolio _ Portfolio new.
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account. 
	
	self deny: (portfolio hasRegistered: transaction).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:05:56'!
test04PortfolioWithSingleAccountHasAccountBalance

	| portfolio account |
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account.

	self assert: 100 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test04 stamp: 'AF 10/16/2021 17:05:56'!
test04

	| portfolio account |
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account.

	self assert: 100 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:06:15'!
test04PortfolioWithSingleAccountShouldHaveAccountBalance

	| portfolio account |
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account.

	self assert: 100 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test04PortfolioWithSingleAccountHasAccountBalance stamp: 'AF 10/16/2021 17:06:15'!
test04PortfolioWithSingleAccountHasAccountBalance

	| portfolio account |
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account.

	self assert: 100 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:06:57'!
test04PortfolioWithSingleAccountShouldHaveItsBalance

	| portfolio account |
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account.

	self assert: 100 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test04PortfolioWithSingleAccountShouldHaveAccountBalance stamp: 'AF 10/16/2021 17:06:57'!
test04PortfolioWithSingleAccountShouldHaveAccountBalance

	| portfolio account |
	account _ ReceptiveAccount new.
	Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account.

	self assert: 100 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:08:14'!
test05PortfolioWithSingleAccountShouldHaveItsTransacitions

	| portfolio account expectedTransactions transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account.

	expectedTransactions _ OrderedCollection with: transaction.
	self assert: expectedTransactions equals: portfolio transactions.! !

!methodRemoval: PortfolioTest #test05 stamp: 'AF 10/16/2021 17:08:14'!
test05

	| portfolio account expectedTransactions transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account.

	expectedTransactions _ OrderedCollection with: transaction.
	self assert: expectedTransactions equals: portfolio transactions.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:10:02'!
test06PortfolioWithSingleAccountHasRegisterAccountItsTransactions

	| portfolio account transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account.

	self assert: (portfolio hasRegistered: transaction).! !

!methodRemoval: PortfolioTest #test06 stamp: 'AF 10/16/2021 17:10:02'!
test06

	| portfolio account transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account.

	self assert: (portfolio hasRegistered: transaction).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:10:28'!
test06PortfolioWithSingleAccountHasRegisterItsTransactions

	| portfolio account transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account.

	self assert: (portfolio hasRegistered: transaction).! !

!methodRemoval: PortfolioTest #test06PortfolioWithSingleAccountHasRegisterAccountItsTransactions stamp: 'AF 10/16/2021 17:10:28'!
test06PortfolioWithSingleAccountHasRegisterAccountItsTransactions

	| portfolio account transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account.

	self assert: (portfolio hasRegistered: transaction).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:11:02'!
test06PortfolioWithSingleAccountHasRegisteredItsTransactions

	| portfolio account transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account.

	self assert: (portfolio hasRegistered: transaction).! !

!methodRemoval: PortfolioTest #test06PortfolioWithSingleAccountHasRegisterItsTransactions stamp: 'AF 10/16/2021 17:11:02'!
test06PortfolioWithSingleAccountHasRegisterItsTransactions

	| portfolio account transaction |
	account _ ReceptiveAccount new.
	transaction _ Deposit register: 100 on: account.
	
	portfolio _ Portfolio new.
	portfolio addFinancialService: account.

	self assert: (portfolio hasRegistered: transaction).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:11:40'!
test07PortfolioWithSingleAccountShouldHaveItsBalance

	| portfolio account1 account2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.

	portfolio _ Portfolio new.
	portfolio addFinancialService: account1.
	portfolio addFinancialService: account2.

	self assert: 150 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test07 stamp: 'AF 10/16/2021 17:11:40'!
test07

	| portfolio account1 account2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.

	portfolio _ Portfolio new.
	portfolio addFinancialService: account1.
	portfolio addFinancialService: account2.

	self assert: 150 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:12:06'!
test07PortfolioWithMultipleAccountsShouldHaveBalances

	| portfolio account1 account2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.

	portfolio _ Portfolio new.
	portfolio addFinancialService: account1.
	portfolio addFinancialService: account2.

	self assert: 150 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test07PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 17:12:06'!
test07PortfolioWithSingleAccountShouldHaveItsBalance

	| portfolio account1 account2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.

	portfolio _ Portfolio new.
	portfolio addFinancialService: account1.
	portfolio addFinancialService: account2.

	self assert: 150 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:12:27'!
test07PortfolioWithMultipleAccountsShouldHaveTheirBalances

	| portfolio account1 account2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.

	portfolio _ Portfolio new.
	portfolio addFinancialService: account1.
	portfolio addFinancialService: account2.

	self assert: 150 equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveBalances stamp: 'AF 10/16/2021 17:12:27'!
test07PortfolioWithMultipleAccountsShouldHaveBalances

	| portfolio account1 account2 |
	account1 _ ReceptiveAccount new.
	account2 _ ReceptiveAccount new.
	Deposit register: 100 on: account1.
	Deposit register: 50 on: account2.

	portfolio _ Portfolio new.
	portfolio addFinancialService: account1.
	portfolio addFinancialService: account2.

	self assert: 150 equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:13:50'!
test14AddingExistingAccountToPortfolioShouldFail

	| portfolio account |
	
	account _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	portfolio addFinancialService: account.
	
	self should: [ portfolio addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!methodRemoval: PortfolioTest #test14 stamp: 'AF 10/16/2021 17:13:50'!
test14

	| portfolio account |
	
	account _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	portfolio addFinancialService: account.
	
	self should: [ portfolio addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:16:00'!
test15AddingAccountThat

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioB addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioA addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!methodRemoval: PortfolioTest #test15 stamp: 'AF 10/16/2021 17:16:00'!
test15

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioB addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioA addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:17:06'!
test15AddingExistingAccountThatRegisteredPortfolioAlreadyHasShouldFail

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioB addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioA addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!methodRemoval: PortfolioTest #test15AddingAccountThat stamp: 'AF 10/16/2021 17:17:06'!
test15AddingAccountThat

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioB addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioA addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:17:24'!
test15AddingAccountThatRegisteredPortfolioAlreadyHasShouldFail

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioB addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioA addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!methodRemoval: PortfolioTest #test15AddingExistingAccountThatRegisteredPortfolioAlreadyHasShouldFail stamp: 'AF 10/16/2021 17:17:24'!
test15AddingExistingAccountThatRegisteredPortfolioAlreadyHasShouldFail

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioB addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioA addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:17:48'!
test14AddingDuplicateAccountToPortfolioShouldFail

	| portfolio account |
	
	account _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	portfolio addFinancialService: account.
	
	self should: [ portfolio addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!methodRemoval: PortfolioTest #test14AddingExistingAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 17:17:48'!
test14AddingExistingAccountToPortfolioShouldFail

	| portfolio account |
	
	account _ ReceptiveAccount new.
	portfolio _ Portfolio new.
	
	portfolio addFinancialService: account.
	
	self should: [ portfolio addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:19:54'!
test15AddingAccountToChildPortfolioAlreadyHasShouldFail

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioB addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioA addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!methodRemoval: PortfolioTest #test15AddingAccountThatRegisteredPortfolioAlreadyHasShouldFail stamp: 'AF 10/16/2021 17:19:54'!
test15AddingAccountThatRegisteredPortfolioAlreadyHasShouldFail

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioB addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioA addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:21:11'!
test15AddingAccountRegisteredInChildPortfolioShouldFail

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioB addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioA addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!methodRemoval: PortfolioTest #test15AddingAccountToChildPortfolioAlreadyHasShouldFail stamp: 'AF 10/16/2021 17:21:11'!
test15AddingAccountToChildPortfolioAlreadyHasShouldFail

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioB addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioA addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:22:13'!
test16AddingAccountRegisteredInParentPorfolioShouldFail

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioA addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioB addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!methodRemoval: PortfolioTest #test16 stamp: 'AF 10/16/2021 17:22:13'!
test16

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioA addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioB addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:22:37'!
test16AddingAccountIncludedInParentPorfolioShouldFail

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioA addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioB addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!methodRemoval: PortfolioTest #test16AddingAccountRegisteredInParentPorfolioShouldFail stamp: 'AF 10/16/2021 17:22:37'!
test16AddingAccountRegisteredInParentPorfolioShouldFail

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioA addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioB addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:22:50'!
test15AddingAccountIncludedInChildPortfolioShouldFail

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioB addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioA addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!methodRemoval: PortfolioTest #test15AddingAccountRegisteredInChildPortfolioShouldFail stamp: 'AF 10/16/2021 17:22:50'!
test15AddingAccountRegisteredInChildPortfolioShouldFail

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioB addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioA addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:23:35' prior: 50919351!
test17 

	| account portfolioA portfolioB portfolioC |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	portfolioC _ Portfolio new.
	
	portfolioA addFinancialService: account.
	portfolioA addFinancialService: portfolioC.
	portfolioB addFinancialService: portfolioC.
	
	self should: [ portfolioC addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:24:01'!
test17AddingAccountIncludedInAParentShouldFail 

	| account portfolioA portfolioB portfolioC |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	portfolioC _ Portfolio new.
	
	portfolioA addFinancialService: account.
	portfolioA addFinancialService: portfolioC.
	portfolioB addFinancialService: portfolioC.
	
	self should: [ portfolioC addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!methodRemoval: PortfolioTest #test17 stamp: 'AF 10/16/2021 17:24:01'!
test17 

	| account portfolioA portfolioB portfolioC |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	portfolioC _ Portfolio new.
	
	portfolioA addFinancialService: account.
	portfolioA addFinancialService: portfolioC.
	portfolioB addFinancialService: portfolioC.
	
	self should: [ portfolioC addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:24:12'!
test16AddingAccountIncludedInTheParentPorfolioShouldFail

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioA addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioB addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!methodRemoval: PortfolioTest #test16AddingAccountIncludedInParentPorfolioShouldFail stamp: 'AF 10/16/2021 17:24:12'!
test16AddingAccountIncludedInParentPorfolioShouldFail

	| portfolioA portfolioB account |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioA addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	
	self should: [ portfolioB addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 17:26:22'!
test18AddingAccountIncludedInAnAncestorShouldFail

	| account portfolioA portfolioB portfolioC |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	portfolioC _ Portfolio new.
	
	portfolioA addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	portfolioB addFinancialService: portfolioC.
	
	self should: [ portfolioC addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!methodRemoval: PortfolioTest #test18 stamp: 'AF 10/16/2021 17:26:22'!
test18

	| account portfolioA portfolioB portfolioC |
	
	account _ ReceptiveAccount new.
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	portfolioC _ Portfolio new.
	
	portfolioA addFinancialService: account.
	portfolioA addFinancialService: portfolioB.
	portfolioB addFinancialService: portfolioC.
	
	self should: [ portfolioC addFinancialService: account ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 18:17:46' prior: 50919897!
addFinancialService: aFinancialService 
	
		
	(financialServices anySatisfy: [ :financialService | financialService containsAccount: aFinancialService]) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
	(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
		
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 18:17:46'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 18:17:46'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 18:17:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 18:17:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 18:17:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 18:17:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 18:17:46'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 18:17:46'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 18:17:46'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 18:17:46'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 18:17:46'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 18:17:46'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 18:17:46'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 18:17:46'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 18:17:46'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 18:17:46'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 18:17:46'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 18:17:46'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 18:17:54' prior: 50920825!
addFinancialService: aFinancialService 
	
	(financialServices anySatisfy: [ :financialService | financialService containsAccount: aFinancialService]) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
	(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
		
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 18:18:51'!
test19
	| portfolioA portfolioB |
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioA addFinancialService: portfolioB.
		
	self should: [ portfolioA addFinancialService: portfolioB ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!testRun: #PortfolioTest #test19 stamp: 'AF 10/16/2021 18:18:57'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 18:20:43' prior: 50920904!
addFinancialService: aFinancialService 
	
	(financialServices anySatisfy: [ :financialService | financialService containsAccount: aFinancialService]) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
	(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(financialServices includes: aFinancialService) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AF 10/16/2021 18:20:44'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AF 10/16/2021 18:21:37'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 18:21:52'!
PASSED!

!testRun: #PortfolioTest #test19 stamp: 'AF 10/16/2021 18:21:52'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 18:23:11'!
test19AddingDuplicatePortfolioToPortfolioShouldFail
	| portfolioA portfolioB |
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioA addFinancialService: portfolioB.
		
	self should: [ portfolioA addFinancialService: portfolioB ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!methodRemoval: PortfolioTest #test19 stamp: 'AF 10/16/2021 18:23:11'!
test19
	| portfolioA portfolioB |
	portfolioA _ Portfolio new.
	portfolioB _ Portfolio new.
	
	portfolioA addFinancialService: portfolioB.
		
	self should: [ portfolioA addFinancialService: portfolioB ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 18:27:59'!
test20
	| portfolioA |
	portfolioA _ Portfolio new.
		
	self should: [ portfolioA addFinancialService: portfolioA ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 18:28:15' prior: 50921181!
test20
	| portfolioA |
	portfolioA _ Portfolio new.	
	
	self should: [ portfolioA addFinancialService: portfolioA ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 18:28:17'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 18:32:56' prior: 50920940!
addFinancialService: aFinancialService 
	
	(financialServices anySatisfy: [ :financialService | financialService containsAccount: aFinancialService]) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
	(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	((aFinancialService = self) or: [ financialServices includes: aFinancialService ]) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
 	
	
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 18:33:01'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 18:33:01'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 18:33:33' prior: 50921209!
addFinancialService: aFinancialService 
	
	
	(financialServices anySatisfy: [ :financialService | financialService containsAccount: aFinancialService]) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
	(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	"Condiciones portfolios"
	((aFinancialService = self) or: [ financialServices includes: aFinancialService ]) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
 	
	
	(aFinancialService isKindOf: Portfolio) ifTrue: [ aFinancialService yyy: self ].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 18:33:44'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 18:33:44'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 18:37:15'!
test21
	| portfolioA portfolioB portfolioC |
	portfolioA _ Portfolio new.	
	portfolioB _ Portfolio new.
	portfolioC _ Portfolio new.
	
	portfolioA addFinancialService: portfolioB.
	portfolioB addFinancialService: portfolioC.
	
	self should: [ portfolioA addFinancialService: portfolioC ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 18:37:19'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 18:44:08' prior: 50921299!
addFinancialService: aFinancialService 
	
	
	(financialServices anySatisfy: [ :financialService | financialService containsAccount: aFinancialService]) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
	(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	"Condiciones portfolios"
	(aFinancialService isKindOf: Portfolio) ifTrue:[
	((aFinancialService = self) or: [ financialServices includes: aFinancialService ]) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	
	(financialServices anySatisfy: [ :financialService | financialService containsPortfolio: aFinancialService]) 
		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
	aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 18:44:46' prior: 50921410!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		(financialServices anySatisfy: [ :financialService | financialService containsAccount: aFinancialService]) 
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		((aFinancialService = self) or: [ financialServices includes: aFinancialService ]) 
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
		(financialServices anySatisfy: [ :financialService | financialService containsPortfolio: aFinancialService]) 
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
			
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 18:44:47'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 18:44:47'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 18:44:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 18:44:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 18:44:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 18:44:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 18:44:47'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 18:44:47'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 18:44:47'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 18:44:47'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 18:44:47'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 18:44:47'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 18:44:47'!
ERROR!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 18:44:47'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 18:44:47'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 18:44:47'!
ERROR!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 18:44:47'!
ERROR!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 18:44:47'!
ERROR!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 18:44:47'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 18:44:47'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 18:44:47'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 18:45:25' prior: 50921441!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		(financialServices anySatisfy: [ :financialService | financialService containsAccount: aFinancialService]) 
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		((aFinancialService = self) or: [ financialServices includes: aFinancialService ]) 
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		"
		(financialServices anySatisfy: [ :financialService | financialService containsPortfolio: aFinancialService]) 
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ]."
			
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 18:45:25'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 18:45:25'!
FAILURE!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 18:45:25'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 18:45:37' prior: 50921541!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		(financialServices anySatisfy: [ :financialService | financialService containsAccount: aFinancialService]) 
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		((aFinancialService = self) or: [ financialServices includes: aFinancialService ]) 
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
		(financialServices anySatisfy: [ :financialService | financialService containsPortfolio: aFinancialService]) 
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
			
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 18:45:51'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 18:45:51'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 18:45:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 18:45:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 18:45:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 18:45:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 18:45:51'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 18:45:51'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 18:45:51'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 18:45:51'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 18:45:51'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 18:45:51'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 18:45:51'!
ERROR!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 18:45:51'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 18:45:51'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 18:45:51'!
ERROR!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 18:45:51'!
ERROR!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 18:45:51'!
ERROR!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 18:45:51'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 18:45:51'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 18:45:51'!
ERROR!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 18:45:55'!
ERROR!
!FinancialService methodsFor: 'category-name' stamp: 'AF 10/16/2021 18:46:18'!
containsPortfolio: aPortfolio 
	self shouldBeImplemented.! !
!FinancialService methodsFor: 'category-name' stamp: 'AF 10/16/2021 18:46:24' prior: 50921746!
containsPortfolio: aPortfolio 
	self subclassResponsibility ! !
!FinancialService methodsFor: 'category-name' stamp: 'AF 10/16/2021 18:46:26' prior: 50921751!
containsPortfolio: aPortfolio 
	self subclassResponsibility.! !
!FinancialService methodsFor: 'category-name' stamp: 'AF 10/16/2021 18:46:31' prior: 50921756!
containsPortfolio: aPortfolio
 
	self subclassResponsibility.! !

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 18:46:34'!
FAILURE!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 18:46:41'!
FAILURE!
!Portfolio methodsFor: 'category-name' stamp: 'AF 10/16/2021 18:49:34' overrides: 50921761!
containsPortfolio: aPortfolio

	^(aPortfolio = self) 
		or: [financialServices anySatisfy: [ :aFinancialService | aFinancialService containsPortfolio: aPortfolio]].! !
!ReceptiveAccount methodsFor: 'testing' stamp: 'AF 10/16/2021 18:51:39' overrides: 50921761!
containsPortfolio: aPortfolio

	^false.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 10/16/2021 18:52:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 10/16/2021 18:52:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 10/16/2021 18:52:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 10/16/2021 18:52:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 10/16/2021 18:52:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 10/16/2021 18:52:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 10/16/2021 18:52:32'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 18:52:38'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 18:52:40'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 18:52:40'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 18:53:55'!
test22
	| portfolioA portfolioB |
	portfolioA _ Portfolio new.	
	portfolioB _ Portfolio new.
	
	portfolioB addFinancialService: portfolioA.
	
	self should: [ portfolioA addFinancialService: portfolioB ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 18:54:03'!
FAILURE!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 18:59:46'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 18:59:46'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 18:59:46'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 19:03:06' prior: 50921644!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		(financialServices anySatisfy: [ :financialService | financialService containsAccount: aFinancialService]) 
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		
		self contextStackIndex 
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
			
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 19:03:23' prior: 50921961!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		(financialServices anySatisfy: [ :financialService | financialService containsAccount: aFinancialService]) 
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		
		self containsPortfolio			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
			
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 19:03:44' prior: 50921986!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		(financialServices anySatisfy: [ :financialService | financialService containsAccount: aFinancialService]) 
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		
		(self containsPortfolio	: aFinancialService) 		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
			
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 19:04:53' prior: 50922011!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		(financialServices anySatisfy: [ :financialService | financialService containsAccount: aFinancialService]) 
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		
		(self containsPortfolio:: aFinancialService) 		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
			
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 19:04:54' prior: 50922037!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		(financialServices anySatisfy: [ :financialService | financialService containsAccount: aFinancialService]) 
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		
		(self containsPortfolio: aFinancialService) 		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
			
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:05:04'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:05:04'!
FAILURE!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:05:04'!
FAILURE!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:05:53'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:05:53'!
FAILURE!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:05:53'!
FAILURE!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:06:34'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 19:08:13' prior: 50922063!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		
		
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		
		(self containsPortfolio: aFinancialService) 		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
			
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:08:13'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:08:13'!
FAILURE!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:08:13'!
FAILURE!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:08:16'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:08:16'!
FAILURE!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:08:16'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 19:08:31' prior: 50922236!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		
		
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		
		(self containsPortfolio: aFinancialService) 		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
			
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:08:31'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:08:31'!
FAILURE!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:08:31'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 19:15:53' prior: 50922400!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		
		(self containsPortfolio: aFinancialService) 		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
			
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 19:15:59' prior: 50922492!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		(self containsPortfolio: aFinancialService) 		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].	
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 19:16:36' prior: 50922512!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		(self containsPortfolio: aFinancialService) 		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].	
		aFinancialService canBeAddedTo: self.
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 19:17:59' prior: 50922531!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		(self containsPortfolio: aFinancialService) 		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].	
		(aFinancialService cannotBeAddedTo: self) ifTrue:[ self error: self class cantAddFinancialServiceErrorDescription ].
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 19:18:20' prior: 50922552!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		(self containsPortfolio: aFinancialService) 		ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].	
		(aFinancialService cannotBeAddedTo: self) ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:18:26'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:18:26'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:18:26'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:18:26'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:18:26'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:18:26'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:18:26'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:18:26'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:18:26'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:18:26'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:18:26'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:18:26'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:18:26'!
ERROR!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:18:26'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:18:26'!
ERROR!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:18:26'!
ERROR!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:18:26'!
ERROR!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:18:26'!
ERROR!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:18:26'!
ERROR!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:18:26'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:18:26'!
ERROR!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:18:26'!
ERROR!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:18:29'!
ERROR!
!Portfolio methodsFor: 'category-name' stamp: 'AF 10/16/2021 19:18:37'!
cannotBeAddedTo: aPortfolio 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'category-name' stamp: 'AF 10/16/2021 19:20:06' prior: 50922670!
cannotBeAddedTo: aPortfolio 
	^(aPortfolio containsPortfolio: self) or: [financialServices anySatisfy: [ :financialService | financialService cannotBeAddedTo: aPortfolio]].! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:22:17'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:22:17'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:22:17'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:22:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:22:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:22:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:22:17'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:22:17'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:22:17'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:22:17'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:22:17'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:22:17'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:22:17'!
ERROR!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:22:17'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:22:17'!
ERROR!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:22:17'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:22:17'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:22:17'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:22:17'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:22:17'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:22:17'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:22:17'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:22:36'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:22:36'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:22:36'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:22:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:22:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:22:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:22:36'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:22:36'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:22:36'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:22:36'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:22:36'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:22:36'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:22:36'!
ERROR!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:22:36'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:22:36'!
ERROR!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:22:36'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:22:36'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:22:36'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:22:36'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:22:36'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:22:36'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:22:36'!
PASSED!
!ReceptiveAccount methodsFor: 'nil' stamp: 'AF 10/16/2021 19:23:27'!
cannotBeAddedTo:aPortfolio
	
	^false.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 19:23:30' prior: 50922823!
cannotBeAddedTo: aPortfolio
	
	^false.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 10/16/2021 19:23:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 10/16/2021 19:23:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 10/16/2021 19:23:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 10/16/2021 19:23:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 10/16/2021 19:23:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 10/16/2021 19:23:31'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 10/16/2021 19:23:31'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:23:34'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:23:34'!
PASSED!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 19:23:49' prior: 50922575!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		(aFinancialService cannotBeAddedTo: self) ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:23:49'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:23:49'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 19:25:01'!
test23
	| portfolioA portfolioB portfolioC |
	portfolioA _ Portfolio new.	
	portfolioB _ Portfolio new.
	portfolioC _ Portfolio new.
	
	portfolioA addFinancialService: portfolioC.
	portfolioB addFinancialService: portfolioC.
	
	self should: [ portfolioA addFinancialService: portfolioB ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!testRun: #PortfolioTest #test23 stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'AF 10/16/2021 19:25:06'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:25:52'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'AF 10/16/2021 19:25:52'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 19:27:20'!
test24
	| portfolioA portfolioB portfolioC portfolioR |
	portfolioR _ Portfolio new.
	portfolioA _ Portfolio new.	
	portfolioB _ Portfolio new.
	portfolioC _ Portfolio new.
	
	portfolioA addFinancialService: portfolioC.
	portfolioB addFinancialService: portfolioC.
	
	self should: [ portfolioA addFinancialService: portfolioB ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 19:27:55' prior: 50923185!
test24
	| portfolioA portfolioB portfolioC portfolioR |
	portfolioR _ Portfolio new.
	portfolioA _ Portfolio new.	
	portfolioB _ Portfolio new.
	portfolioC _ Portfolio new.
	
	portfolioR addFinancialService: portfolioC.
	portfolioR addFinancialService: portfolioA.
	portfolioB addFinancialService: portfolioC.
	
	
	self should: [ portfolioA addFinancialService: portfolioB ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 19:28:06' prior: 50923204!
test24
	| portfolioA portfolioB portfolioC portfolioR |
	portfolioR _ Portfolio new.
	portfolioA _ Portfolio new.	
	portfolioB _ Portfolio new.
	portfolioC _ Portfolio new.
	
	portfolioR addFinancialService: portfolioC.
	portfolioR addFinancialService: portfolioA.
	portfolioB addFinancialService: portfolioC.
	
	
	self should: [ portfolioA addFinancialService: portfolioB ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!testRun: #PortfolioTest #test24 stamp: 'AF 10/16/2021 19:28:07'!
FAILURE!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 19:28:57' prior: 50922929!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		(aFinancialService cannotBeAddedTo: self roots) ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:28:57'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:28:57'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:28:57'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:28:57'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:28:57'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:28:57'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:28:57'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:28:57'!
ERROR!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:28:57'!
ERROR!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:28:57'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:28:57'!
ERROR!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:28:57'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:28:57'!
ERROR!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:28:57'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:28:57'!
ERROR!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:28:57'!
ERROR!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:28:57'!
ERROR!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:28:57'!
ERROR!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:28:57'!
ERROR!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:28:57'!
ERROR!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:28:57'!
ERROR!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:28:57'!
ERROR!

!testRun: #PortfolioTest #test23 stamp: 'AF 10/16/2021 19:28:57'!
ERROR!

!testRun: #PortfolioTest #test24 stamp: 'AF 10/16/2021 19:28:57'!
ERROR!
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 19:31:43' prior: 50923248!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		(self roots anySatisfy: [ :root | aFinancialService cannotBeAddedTo: root])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !
!Portfolio methodsFor: 'accessing' stamp: 'AF 10/16/2021 19:31:55' prior: 50923342!
addFinancialService: aFinancialService 
	
	(aFinancialService isKindOf: ReceptiveAccount ) ifTrue:[
		(self roots anySatisfy: [ :root | root containsAccount: aFinancialService ])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
	].
		
	(aFinancialService isKindOf: Portfolio) ifTrue:[
		(self roots anySatisfy: [ :root | aFinancialService cannotBeAddedTo: root])
			ifTrue: [ self error: self class cantAddFinancialServiceErrorDescription ].
			
		aFinancialService yyy: self
 	].
	
	financialServices add: aFinancialService.! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'AF 10/16/2021 19:31:56'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'AF 10/16/2021 19:32:06'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'AF 10/16/2021 19:32:06'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 19:34:22'!
test25
	| portfolioA portfolioB account |
	portfolioA _ Portfolio new.	
	portfolioB _ Portfolio new.
	account _ ReceptiveAccount new.
	
	portfolioA addFinancialService: account.
	portfolioB addFinancialService: account.
	
	
	self should: [ portfolioA addFinancialService: portfolioB ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!testRun: #PortfolioTest #test25 stamp: 'AF 10/16/2021 19:34:27'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 19:34:50' prior: 50922828!
cannotBeAddedTo: aPortfolio
	
	^aPortfolio containsAccount: self.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 10/16/2021 19:34:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 10/16/2021 19:34:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 10/16/2021 19:34:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 10/16/2021 19:34:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 10/16/2021 19:34:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 10/16/2021 19:34:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 10/16/2021 19:34:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:34:56'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'AF 10/16/2021 19:34:58'!
PASSED!

!testRun: #PortfolioTest #test25 stamp: 'AF 10/16/2021 19:34:58'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 19:38:17'!
test26
	| portfolioA portfolioB account portfolioV portfolioW |
	

	portfolioW _ Portfolio new.
	portfolioV _ Portfolio new.
	portfolioA _ Portfolio new.	
	portfolioB _ Portfolio new.
	
	account _ ReceptiveAccount new.
	
	portfolioA addFinancialService: account.
	portfolioB addFinancialService: account.
	
	self should: [ portfolioA addFinancialService: portfolioB ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 19:39:06' prior: 50923666!
test26
	| portfolioA portfolioB account portfolioV portfolioW |
	

	portfolioW _ Portfolio new.
	portfolioV _ Portfolio new.
	portfolioA _ Portfolio new.	
	portfolioB _ Portfolio new.
	
	account _ ReceptiveAccount new.
	
	portfolioW addFinancialService: account.
	portfolioW addFinancialService: portfolioA .
	portfolioV addFinancialService:  portfolioA .
	portfolioB addFinancialService: account.
	
	self should: [ portfolioA addFinancialService: portfolioB ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 19:39:08' prior: 50923687!
test26
	| portfolioA portfolioB account portfolioV portfolioW |
	

	portfolioW _ Portfolio new.
	portfolioV _ Portfolio new.
	portfolioA _ Portfolio new.	
	portfolioB _ Portfolio new.
	
	account _ ReceptiveAccount new.
	
	portfolioW addFinancialService: account.
	portfolioW addFinancialService: portfolioA.
	portfolioV addFinancialService:  portfolioA.
	portfolioB addFinancialService: account.
	
	self should: [ portfolioA addFinancialService: portfolioB ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 19:39:24' prior: 50923711!
test26
	| portfolioA portfolioB account portfolioV portfolioW |
	

	portfolioW _ Portfolio new.
	portfolioV _ Portfolio new.
	portfolioA _ Portfolio new.	
	portfolioB _ Portfolio new.
	
	account _ ReceptiveAccount new.
	
	portfolioW addFinancialService: account.
	portfolioW addFinancialService: portfolioA.
	portfolioV addFinancialService: portfolioA.
	
	portfolioB addFinancialService: account.
	
	self should: [ portfolioA addFinancialService: portfolioB ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!testRun: #PortfolioTest #test26 stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test25 stamp: 'AF 10/16/2021 19:39:25'!
PASSED!

!testRun: #PortfolioTest #test26 stamp: 'AF 10/16/2021 19:39:25'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 19:39:50' prior: 50923735!
test26
	| portfolioA portfolioB account portfolioV portfolioW |
	
	"paso de una"
	portfolioW _ Portfolio new.
	portfolioV _ Portfolio new.
	portfolioA _ Portfolio new.	
	portfolioB _ Portfolio new.
	
	account _ ReceptiveAccount new.
	
	portfolioW addFinancialService: account.
	portfolioW addFinancialService: portfolioA.
	portfolioV addFinancialService: portfolioA.
	
	portfolioB addFinancialService: account.
	
	self should: [ portfolioA addFinancialService: portfolioB ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'AF 10/16/2021 19:40:00' prior: 50923018!
test23
	| portfolioA portfolioB portfolioC |
	
	"paso de una"
	
	portfolioA _ Portfolio new.	
	portfolioB _ Portfolio new.
	portfolioC _ Portfolio new.
	
	portfolioA addFinancialService: portfolioC.
	portfolioB addFinancialService: portfolioC.
	
	self should: [ portfolioA addFinancialService: portfolioB ]  
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error | 
			self assert: Portfolio cantAddFinancialServiceErrorDescription 
				equals: error messageText 
		].

! !

!testRun: #PortfolioTest #test01EmptyPortfolioShouldHaveZeroBalance stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test02EmptyPortfolioHasNoRegisteredTransactions stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test03EmptyPortfolioShouldHaveNoTransactions stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithSingleAccountShouldHaveItsBalance stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioWithSingleAccountShouldHaveItsTransacitions stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioWithSingleAccountHasRegisteredItsTransactions stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioWithMultipleAccountsShouldHaveTheirBalances stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test14AddingDuplicateAccountToPortfolioShouldFail stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test15AddingAccountIncludedInChildPortfolioShouldFail stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test16AddingAccountIncludedInTheParentPorfolioShouldFail stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test17AddingAccountIncludedInAParentShouldFail stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test18AddingAccountIncludedInAnAncestorShouldFail stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test19AddingDuplicatePortfolioToPortfolioShouldFail stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test20 stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test21 stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test22 stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test23 stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test24 stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test25 stamp: 'AF 10/16/2021 19:40:06'!
PASSED!

!testRun: #PortfolioTest #test26 stamp: 'AF 10/16/2021 19:40:06'!
PASSED!